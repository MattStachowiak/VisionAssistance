
MSS01_MSS_CM3_0_app:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b0c  20000000  20000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  20003b0c  20003b0c  0000bb0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000288  20003c18  20003c18  0000bc14  2**3
                  ALLOC
  3 .stack        00003000  20003ea0  20003ea0  0000bc14  2**0
                  ALLOC
  4 .comment      0000012d  00000000  00000000  0000bc14  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000500  00000000  00000000  0000bd41  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000b88  00000000  00000000  0000c241  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006deb  00000000  00000000  0000cdc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000c31  00000000  00000000  00013bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002310  00000000  00000000  000147e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001d5c  00000000  00000000  00016af8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000028a4  00000000  00000000  00018854  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001c67  00000000  00000000  0001b0f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 0002e7a5  00000000  00000000  0001cd5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 00000025  00000000  00000000  0004b504  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 000004e0  00000000  00000000  0004b529  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

20000000 <__text_start>:
20000000:	20010000 	.word	0x20010000
20000004:	20000299 	.word	0x20000299
20000008:	20000309 	.word	0x20000309
2000000c:	2000030b 	.word	0x2000030b
20000010:	2000030d 	.word	0x2000030d
20000014:	2000030f 	.word	0x2000030f
20000018:	20000311 	.word	0x20000311
	...
2000002c:	20000313 	.word	0x20000313
20000030:	20000315 	.word	0x20000315
20000034:	00000000 	.word	0x00000000
20000038:	20000317 	.word	0x20000317
2000003c:	20000319 	.word	0x20000319
20000040:	2000031b 	.word	0x2000031b
20000044:	2000031d 	.word	0x2000031d
20000048:	2000031f 	.word	0x2000031f
2000004c:	20000321 	.word	0x20000321
20000050:	20000323 	.word	0x20000323
20000054:	20000325 	.word	0x20000325
20000058:	20000327 	.word	0x20000327
2000005c:	20000329 	.word	0x20000329
20000060:	2000032b 	.word	0x2000032b
20000064:	2000032d 	.word	0x2000032d
20000068:	200013a9 	.word	0x200013a9
2000006c:	200013d5 	.word	0x200013d5
20000070:	20000333 	.word	0x20000333
20000074:	20000335 	.word	0x20000335
20000078:	200021e9 	.word	0x200021e9
2000007c:	20000339 	.word	0x20000339
20000080:	2000033b 	.word	0x2000033b
20000084:	20002215 	.word	0x20002215
20000088:	2000033f 	.word	0x2000033f
2000008c:	20000341 	.word	0x20000341
20000090:	20000343 	.word	0x20000343
20000094:	20000345 	.word	0x20000345
20000098:	20000347 	.word	0x20000347
2000009c:	20000349 	.word	0x20000349
200000a0:	2000034b 	.word	0x2000034b
	...
200000bc:	2000034d 	.word	0x2000034d
200000c0:	20000d39 	.word	0x20000d39
200000c4:	20000d61 	.word	0x20000d61
200000c8:	20000353 	.word	0x20000353
200000cc:	20000355 	.word	0x20000355
200000d0:	20000357 	.word	0x20000357
200000d4:	20000359 	.word	0x20000359
200000d8:	2000035b 	.word	0x2000035b
200000dc:	2000035d 	.word	0x2000035d
200000e0:	2000035f 	.word	0x2000035f
200000e4:	20000361 	.word	0x20000361
200000e8:	20000363 	.word	0x20000363
200000ec:	20000365 	.word	0x20000365
200000f0:	20000367 	.word	0x20000367
200000f4:	20000369 	.word	0x20000369
200000f8:	2000036b 	.word	0x2000036b
200000fc:	2000036d 	.word	0x2000036d
20000100:	2000036f 	.word	0x2000036f
20000104:	20000371 	.word	0x20000371
20000108:	20000373 	.word	0x20000373
2000010c:	20000375 	.word	0x20000375
20000110:	20000377 	.word	0x20000377
20000114:	20000379 	.word	0x20000379
20000118:	2000037b 	.word	0x2000037b
2000011c:	2000037d 	.word	0x2000037d
20000120:	2000037f 	.word	0x2000037f
20000124:	20000381 	.word	0x20000381
20000128:	20000383 	.word	0x20000383
2000012c:	20000385 	.word	0x20000385
20000130:	20000387 	.word	0x20000387
20000134:	20000389 	.word	0x20000389
20000138:	2000038b 	.word	0x2000038b
2000013c:	2000038d 	.word	0x2000038d
20000140:	2000038f 	.word	0x2000038f
20000144:	20000391 	.word	0x20000391
20000148:	20000393 	.word	0x20000393
2000014c:	20000395 	.word	0x20000395
20000150:	20000397 	.word	0x20000397
20000154:	20000399 	.word	0x20000399
20000158:	2000039b 	.word	0x2000039b
2000015c:	2000039d 	.word	0x2000039d
20000160:	2000039f 	.word	0x2000039f
20000164:	200003a1 	.word	0x200003a1
20000168:	200003a3 	.word	0x200003a3
2000016c:	200003a5 	.word	0x200003a5
20000170:	200003a7 	.word	0x200003a7
20000174:	200003a9 	.word	0x200003a9
20000178:	200003ab 	.word	0x200003ab
2000017c:	200003ad 	.word	0x200003ad
20000180:	200003af 	.word	0x200003af
20000184:	200003b1 	.word	0x200003b1
20000188:	200003b3 	.word	0x200003b3
2000018c:	200003b5 	.word	0x200003b5
20000190:	200003b7 	.word	0x200003b7
20000194:	200003b9 	.word	0x200003b9
20000198:	200003bb 	.word	0x200003bb
2000019c:	200003bd 	.word	0x200003bd
200001a0:	200003bf 	.word	0x200003bf
200001a4:	200003c1 	.word	0x200003c1
200001a8:	200003c3 	.word	0x200003c3
200001ac:	200003c5 	.word	0x200003c5
200001b0:	200003c7 	.word	0x200003c7
200001b4:	200003c9 	.word	0x200003c9
200001b8:	200003cb 	.word	0x200003cb
200001bc:	200003cd 	.word	0x200003cd
200001c0:	200003cf 	.word	0x200003cf
200001c4:	200003d1 	.word	0x200003d1
200001c8:	200003d3 	.word	0x200003d3
200001cc:	200003d5 	.word	0x200003d5
200001d0:	200003d7 	.word	0x200003d7
200001d4:	200003d9 	.word	0x200003d9
200001d8:	200003db 	.word	0x200003db
200001dc:	200003dd 	.word	0x200003dd
200001e0:	200003df 	.word	0x200003df
200001e4:	200003e1 	.word	0x200003e1
200001e8:	200003e3 	.word	0x200003e3
200001ec:	200003e5 	.word	0x200003e5
200001f0:	200003e7 	.word	0x200003e7
200001f4:	200003e9 	.word	0x200003e9
200001f8:	200003eb 	.word	0x200003eb
200001fc:	200003ed 	.word	0x200003ed
20000200:	200003ef 	.word	0x200003ef
20000204:	200003f1 	.word	0x200003f1
20000208:	200003f3 	.word	0x200003f3
2000020c:	200003f5 	.word	0x200003f5
20000210:	200003f7 	.word	0x200003f7
20000214:	200003f9 	.word	0x200003f9
20000218:	200003fb 	.word	0x200003fb
2000021c:	200003fd 	.word	0x200003fd
20000220:	200003ff 	.word	0x200003ff
20000224:	20000401 	.word	0x20000401
20000228:	20000403 	.word	0x20000403
2000022c:	20000405 	.word	0x20000405
20000230:	20000407 	.word	0x20000407
20000234:	20000409 	.word	0x20000409
20000238:	2000040b 	.word	0x2000040b
2000023c:	2000040d 	.word	0x2000040d
20000240:	2000040f 	.word	0x2000040f
20000244:	20000411 	.word	0x20000411
20000248:	20000413 	.word	0x20000413
2000024c:	20000415 	.word	0x20000415
20000250:	20000417 	.word	0x20000417
20000254:	20000419 	.word	0x20000419
20000258:	2000041b 	.word	0x2000041b
2000025c:	2000041d 	.word	0x2000041d
20000260:	2000041f 	.word	0x2000041f
20000264:	20000421 	.word	0x20000421
20000268:	20000423 	.word	0x20000423
2000026c:	20000425 	.word	0x20000425
20000270:	20000427 	.word	0x20000427
20000274:	20000429 	.word	0x20000429
20000278:	2000042b 	.word	0x2000042b
2000027c:	2000042d 	.word	0x2000042d
20000280:	2000042f 	.word	0x2000042f
20000284:	20000431 	.word	0x20000431
20000288:	20000433 	.word	0x20000433
2000028c:	20000435 	.word	0x20000435
20000290:	20000437 	.word	0x20000437
20000294:	20000439 	.word	0x20000439

20000298 <Reset_Handler>:
20000298:	4868      	ldr	r0, [pc, #416]	; (2000043c <ACE_PPE_Flag31_IRQHandler+0x4>)
2000029a:	4780      	blx	r0
2000029c:	4868      	ldr	r0, [pc, #416]	; (20000440 <ACE_PPE_Flag31_IRQHandler+0x8>)
2000029e:	2800      	cmp	r0, #0
200002a0:	d10b      	bne.n	200002ba <copy_data>
200002a2:	4868      	ldr	r0, [pc, #416]	; (20000444 <ACE_PPE_Flag31_IRQHandler+0xc>)
200002a4:	4968      	ldr	r1, [pc, #416]	; (20000448 <ACE_PPE_Flag31_IRQHandler+0x10>)
200002a6:	4a69      	ldr	r2, [pc, #420]	; (2000044c <ACE_PPE_Flag31_IRQHandler+0x14>)
200002a8:	4288      	cmp	r0, r1
200002aa:	d006      	beq.n	200002ba <copy_data>

200002ac <copy_code_loop>:
200002ac:	4291      	cmp	r1, r2
200002ae:	bf1c      	itt	ne
200002b0:	f850 3b04 	ldrne.w	r3, [r0], #4
200002b4:	f841 3b04 	strne.w	r3, [r1], #4
200002b8:	d1f8      	bne.n	200002ac <copy_code_loop>

200002ba <copy_data>:
200002ba:	4865      	ldr	r0, [pc, #404]	; (20000450 <ACE_PPE_Flag31_IRQHandler+0x18>)
200002bc:	4965      	ldr	r1, [pc, #404]	; (20000454 <ACE_PPE_Flag31_IRQHandler+0x1c>)
200002be:	4a66      	ldr	r2, [pc, #408]	; (20000458 <ACE_PPE_Flag31_IRQHandler+0x20>)
200002c0:	4288      	cmp	r0, r1
200002c2:	d006      	beq.n	200002d2 <clear_bss>

200002c4 <copy_data_loop>:
200002c4:	4291      	cmp	r1, r2
200002c6:	bf1c      	itt	ne
200002c8:	f850 3b04 	ldrne.w	r3, [r0], #4
200002cc:	f841 3b04 	strne.w	r3, [r1], #4
200002d0:	d1f8      	bne.n	200002c4 <copy_data_loop>

200002d2 <clear_bss>:
200002d2:	4862      	ldr	r0, [pc, #392]	; (2000045c <ACE_PPE_Flag31_IRQHandler+0x24>)
200002d4:	4962      	ldr	r1, [pc, #392]	; (20000460 <ACE_PPE_Flag31_IRQHandler+0x28>)
200002d6:	4a63      	ldr	r2, [pc, #396]	; (20000464 <ACE_PPE_Flag31_IRQHandler+0x2c>)

200002d8 <clear_bss_loop>:
200002d8:	4291      	cmp	r1, r2
200002da:	bf18      	it	ne
200002dc:	f841 0b04 	strne.w	r0, [r1], #4
200002e0:	d1fa      	bne.n	200002d8 <clear_bss_loop>
	...

200002f0 <call_glob_ctor>:
200002f0:	f8df 0174 	ldr.w	r0, [pc, #372]	; 20000468 <ACE_PPE_Flag31_IRQHandler+0x30>
200002f4:	f20f 0e03 	addw	lr, pc, #3
200002f8:	4700      	bx	r0

200002fa <branch_to_main>:
200002fa:	f04f 0000 	mov.w	r0, #0
200002fe:	f04f 0100 	mov.w	r1, #0
20000302:	f8df f168 	ldr.w	pc, [pc, #360]	; 2000046c <ACE_PPE_Flag31_IRQHandler+0x34>

20000306 <ExitLoop>:
20000306:	e7fe      	b.n	20000306 <ExitLoop>

20000308 <NMI_Handler>:
20000308:	e7fe      	b.n	20000308 <NMI_Handler>

2000030a <HardFault_Handler>:
2000030a:	e7fe      	b.n	2000030a <HardFault_Handler>

2000030c <MemManage_Handler>:
2000030c:	e7fe      	b.n	2000030c <MemManage_Handler>

2000030e <BusFault_Handler>:
2000030e:	e7fe      	b.n	2000030e <BusFault_Handler>

20000310 <UsageFault_Handler>:
20000310:	e7fe      	b.n	20000310 <UsageFault_Handler>

20000312 <SVC_Handler>:
20000312:	e7fe      	b.n	20000312 <SVC_Handler>

20000314 <DebugMon_Handler>:
20000314:	e7fe      	b.n	20000314 <DebugMon_Handler>

20000316 <PendSV_Handler>:
20000316:	e7fe      	b.n	20000316 <PendSV_Handler>

20000318 <SysTick_Handler>:
20000318:	e7fe      	b.n	20000318 <SysTick_Handler>

2000031a <WdogWakeup_IRQHandler>:
2000031a:	e7fe      	b.n	2000031a <WdogWakeup_IRQHandler>

2000031c <BrownOut_1_5V_IRQHandler>:
2000031c:	e7fe      	b.n	2000031c <BrownOut_1_5V_IRQHandler>

2000031e <BrownOut_3_3V_IRQHandler>:
2000031e:	e7fe      	b.n	2000031e <BrownOut_3_3V_IRQHandler>

20000320 <RTC_Match_IRQHandler>:
20000320:	e7fe      	b.n	20000320 <RTC_Match_IRQHandler>

20000322 <RTCIF_Pub_IRQHandler>:
20000322:	e7fe      	b.n	20000322 <RTCIF_Pub_IRQHandler>

20000324 <EthernetMAC_IRQHandler>:
20000324:	e7fe      	b.n	20000324 <EthernetMAC_IRQHandler>

20000326 <IAP_IRQHandler>:
20000326:	e7fe      	b.n	20000326 <IAP_IRQHandler>

20000328 <ENVM0_IRQHandler>:
20000328:	e7fe      	b.n	20000328 <ENVM0_IRQHandler>

2000032a <ENVM1_IRQHandler>:
2000032a:	e7fe      	b.n	2000032a <ENVM1_IRQHandler>

2000032c <DMA_IRQHandler>:
2000032c:	e7fe      	b.n	2000032c <DMA_IRQHandler>
2000032e:	e7fe      	b.n	2000032e <DMA_IRQHandler+0x2>
20000330:	e7fe      	b.n	20000330 <DMA_IRQHandler+0x4>

20000332 <SPI0_IRQHandler>:
20000332:	e7fe      	b.n	20000332 <SPI0_IRQHandler>

20000334 <SPI1_IRQHandler>:
20000334:	e7fe      	b.n	20000334 <SPI1_IRQHandler>
20000336:	e7fe      	b.n	20000336 <SPI1_IRQHandler+0x2>

20000338 <I2C0_SMBAlert_IRQHandler>:
20000338:	e7fe      	b.n	20000338 <I2C0_SMBAlert_IRQHandler>

2000033a <I2C0_SMBus_IRQHandler>:
2000033a:	e7fe      	b.n	2000033a <I2C0_SMBus_IRQHandler>
2000033c:	e7fe      	b.n	2000033c <I2C0_SMBus_IRQHandler+0x2>

2000033e <I2C1_SMBAlert_IRQHandler>:
2000033e:	e7fe      	b.n	2000033e <I2C1_SMBAlert_IRQHandler>

20000340 <I2C1_SMBus_IRQHandler>:
20000340:	e7fe      	b.n	20000340 <I2C1_SMBus_IRQHandler>

20000342 <Timer1_IRQHandler>:
20000342:	e7fe      	b.n	20000342 <Timer1_IRQHandler>

20000344 <Timer2_IRQHandler>:
20000344:	e7fe      	b.n	20000344 <Timer2_IRQHandler>

20000346 <PLL_Lock_IRQHandler>:
20000346:	e7fe      	b.n	20000346 <PLL_Lock_IRQHandler>

20000348 <PLL_LockLost_IRQHandler>:
20000348:	e7fe      	b.n	20000348 <PLL_LockLost_IRQHandler>

2000034a <CommError_IRQHandler>:
2000034a:	e7fe      	b.n	2000034a <CommError_IRQHandler>

2000034c <Fabric_IRQHandler>:
2000034c:	e7fe      	b.n	2000034c <Fabric_IRQHandler>
2000034e:	e7fe      	b.n	2000034e <Fabric_IRQHandler+0x2>
20000350:	e7fe      	b.n	20000350 <Fabric_IRQHandler+0x4>

20000352 <GPIO2_IRQHandler>:
20000352:	e7fe      	b.n	20000352 <GPIO2_IRQHandler>

20000354 <GPIO3_IRQHandler>:
20000354:	e7fe      	b.n	20000354 <GPIO3_IRQHandler>

20000356 <GPIO4_IRQHandler>:
20000356:	e7fe      	b.n	20000356 <GPIO4_IRQHandler>

20000358 <GPIO5_IRQHandler>:
20000358:	e7fe      	b.n	20000358 <GPIO5_IRQHandler>

2000035a <GPIO6_IRQHandler>:
2000035a:	e7fe      	b.n	2000035a <GPIO6_IRQHandler>

2000035c <GPIO7_IRQHandler>:
2000035c:	e7fe      	b.n	2000035c <GPIO7_IRQHandler>

2000035e <GPIO8_IRQHandler>:
2000035e:	e7fe      	b.n	2000035e <GPIO8_IRQHandler>

20000360 <GPIO9_IRQHandler>:
20000360:	e7fe      	b.n	20000360 <GPIO9_IRQHandler>

20000362 <GPIO10_IRQHandler>:
20000362:	e7fe      	b.n	20000362 <GPIO10_IRQHandler>

20000364 <GPIO11_IRQHandler>:
20000364:	e7fe      	b.n	20000364 <GPIO11_IRQHandler>

20000366 <GPIO12_IRQHandler>:
20000366:	e7fe      	b.n	20000366 <GPIO12_IRQHandler>

20000368 <GPIO13_IRQHandler>:
20000368:	e7fe      	b.n	20000368 <GPIO13_IRQHandler>

2000036a <GPIO14_IRQHandler>:
2000036a:	e7fe      	b.n	2000036a <GPIO14_IRQHandler>

2000036c <GPIO15_IRQHandler>:
2000036c:	e7fe      	b.n	2000036c <GPIO15_IRQHandler>

2000036e <GPIO16_IRQHandler>:
2000036e:	e7fe      	b.n	2000036e <GPIO16_IRQHandler>

20000370 <GPIO17_IRQHandler>:
20000370:	e7fe      	b.n	20000370 <GPIO17_IRQHandler>

20000372 <GPIO18_IRQHandler>:
20000372:	e7fe      	b.n	20000372 <GPIO18_IRQHandler>

20000374 <GPIO19_IRQHandler>:
20000374:	e7fe      	b.n	20000374 <GPIO19_IRQHandler>

20000376 <GPIO20_IRQHandler>:
20000376:	e7fe      	b.n	20000376 <GPIO20_IRQHandler>

20000378 <GPIO21_IRQHandler>:
20000378:	e7fe      	b.n	20000378 <GPIO21_IRQHandler>

2000037a <GPIO22_IRQHandler>:
2000037a:	e7fe      	b.n	2000037a <GPIO22_IRQHandler>

2000037c <GPIO23_IRQHandler>:
2000037c:	e7fe      	b.n	2000037c <GPIO23_IRQHandler>

2000037e <GPIO24_IRQHandler>:
2000037e:	e7fe      	b.n	2000037e <GPIO24_IRQHandler>

20000380 <GPIO25_IRQHandler>:
20000380:	e7fe      	b.n	20000380 <GPIO25_IRQHandler>

20000382 <GPIO26_IRQHandler>:
20000382:	e7fe      	b.n	20000382 <GPIO26_IRQHandler>

20000384 <GPIO27_IRQHandler>:
20000384:	e7fe      	b.n	20000384 <GPIO27_IRQHandler>

20000386 <GPIO28_IRQHandler>:
20000386:	e7fe      	b.n	20000386 <GPIO28_IRQHandler>

20000388 <GPIO29_IRQHandler>:
20000388:	e7fe      	b.n	20000388 <GPIO29_IRQHandler>

2000038a <GPIO30_IRQHandler>:
2000038a:	e7fe      	b.n	2000038a <GPIO30_IRQHandler>

2000038c <GPIO31_IRQHandler>:
2000038c:	e7fe      	b.n	2000038c <GPIO31_IRQHandler>

2000038e <ACE_PC0_Flag0_IRQHandler>:
2000038e:	e7fe      	b.n	2000038e <ACE_PC0_Flag0_IRQHandler>

20000390 <ACE_PC0_Flag1_IRQHandler>:
20000390:	e7fe      	b.n	20000390 <ACE_PC0_Flag1_IRQHandler>

20000392 <ACE_PC0_Flag2_IRQHandler>:
20000392:	e7fe      	b.n	20000392 <ACE_PC0_Flag2_IRQHandler>

20000394 <ACE_PC0_Flag3_IRQHandler>:
20000394:	e7fe      	b.n	20000394 <ACE_PC0_Flag3_IRQHandler>

20000396 <ACE_PC1_Flag0_IRQHandler>:
20000396:	e7fe      	b.n	20000396 <ACE_PC1_Flag0_IRQHandler>

20000398 <ACE_PC1_Flag1_IRQHandler>:
20000398:	e7fe      	b.n	20000398 <ACE_PC1_Flag1_IRQHandler>

2000039a <ACE_PC1_Flag2_IRQHandler>:
2000039a:	e7fe      	b.n	2000039a <ACE_PC1_Flag2_IRQHandler>

2000039c <ACE_PC1_Flag3_IRQHandler>:
2000039c:	e7fe      	b.n	2000039c <ACE_PC1_Flag3_IRQHandler>

2000039e <ACE_PC2_Flag0_IRQHandler>:
2000039e:	e7fe      	b.n	2000039e <ACE_PC2_Flag0_IRQHandler>

200003a0 <ACE_PC2_Flag1_IRQHandler>:
200003a0:	e7fe      	b.n	200003a0 <ACE_PC2_Flag1_IRQHandler>

200003a2 <ACE_PC2_Flag2_IRQHandler>:
200003a2:	e7fe      	b.n	200003a2 <ACE_PC2_Flag2_IRQHandler>

200003a4 <ACE_PC2_Flag3_IRQHandler>:
200003a4:	e7fe      	b.n	200003a4 <ACE_PC2_Flag3_IRQHandler>

200003a6 <ACE_ADC0_DataValid_IRQHandler>:
200003a6:	e7fe      	b.n	200003a6 <ACE_ADC0_DataValid_IRQHandler>

200003a8 <ACE_ADC1_DataValid_IRQHandler>:
200003a8:	e7fe      	b.n	200003a8 <ACE_ADC1_DataValid_IRQHandler>

200003aa <ACE_ADC2_DataValid_IRQHandler>:
200003aa:	e7fe      	b.n	200003aa <ACE_ADC2_DataValid_IRQHandler>

200003ac <ACE_ADC0_CalDone_IRQHandler>:
200003ac:	e7fe      	b.n	200003ac <ACE_ADC0_CalDone_IRQHandler>

200003ae <ACE_ADC1_CalDone_IRQHandler>:
200003ae:	e7fe      	b.n	200003ae <ACE_ADC1_CalDone_IRQHandler>

200003b0 <ACE_ADC2_CalDone_IRQHandler>:
200003b0:	e7fe      	b.n	200003b0 <ACE_ADC2_CalDone_IRQHandler>

200003b2 <ACE_ADC0_CalStart_IRQHandler>:
200003b2:	e7fe      	b.n	200003b2 <ACE_ADC0_CalStart_IRQHandler>

200003b4 <ACE_ADC1_CalStart_IRQHandler>:
200003b4:	e7fe      	b.n	200003b4 <ACE_ADC1_CalStart_IRQHandler>

200003b6 <ACE_ADC2_CalStart_IRQHandler>:
200003b6:	e7fe      	b.n	200003b6 <ACE_ADC2_CalStart_IRQHandler>

200003b8 <ACE_Comp0_Fall_IRQHandler>:
200003b8:	e7fe      	b.n	200003b8 <ACE_Comp0_Fall_IRQHandler>

200003ba <ACE_Comp1_Fall_IRQHandler>:
200003ba:	e7fe      	b.n	200003ba <ACE_Comp1_Fall_IRQHandler>

200003bc <ACE_Comp2_Fall_IRQHandler>:
200003bc:	e7fe      	b.n	200003bc <ACE_Comp2_Fall_IRQHandler>

200003be <ACE_Comp3_Fall_IRQHandler>:
200003be:	e7fe      	b.n	200003be <ACE_Comp3_Fall_IRQHandler>

200003c0 <ACE_Comp4_Fall_IRQHandler>:
200003c0:	e7fe      	b.n	200003c0 <ACE_Comp4_Fall_IRQHandler>

200003c2 <ACE_Comp5_Fall_IRQHandler>:
200003c2:	e7fe      	b.n	200003c2 <ACE_Comp5_Fall_IRQHandler>

200003c4 <ACE_Comp6_Fall_IRQHandler>:
200003c4:	e7fe      	b.n	200003c4 <ACE_Comp6_Fall_IRQHandler>

200003c6 <ACE_Comp7_Fall_IRQHandler>:
200003c6:	e7fe      	b.n	200003c6 <ACE_Comp7_Fall_IRQHandler>

200003c8 <ACE_Comp8_Fall_IRQHandler>:
200003c8:	e7fe      	b.n	200003c8 <ACE_Comp8_Fall_IRQHandler>

200003ca <ACE_Comp9_Fall_IRQHandler>:
200003ca:	e7fe      	b.n	200003ca <ACE_Comp9_Fall_IRQHandler>

200003cc <ACE_Comp10_Fall_IRQHandler>:
200003cc:	e7fe      	b.n	200003cc <ACE_Comp10_Fall_IRQHandler>

200003ce <ACE_Comp11_Fall_IRQHandler>:
200003ce:	e7fe      	b.n	200003ce <ACE_Comp11_Fall_IRQHandler>

200003d0 <ACE_Comp0_Rise_IRQHandler>:
200003d0:	e7fe      	b.n	200003d0 <ACE_Comp0_Rise_IRQHandler>

200003d2 <ACE_Comp1_Rise_IRQHandler>:
200003d2:	e7fe      	b.n	200003d2 <ACE_Comp1_Rise_IRQHandler>

200003d4 <ACE_Comp2_Rise_IRQHandler>:
200003d4:	e7fe      	b.n	200003d4 <ACE_Comp2_Rise_IRQHandler>

200003d6 <ACE_Comp3_Rise_IRQHandler>:
200003d6:	e7fe      	b.n	200003d6 <ACE_Comp3_Rise_IRQHandler>

200003d8 <ACE_Comp4_Rise_IRQHandler>:
200003d8:	e7fe      	b.n	200003d8 <ACE_Comp4_Rise_IRQHandler>

200003da <ACE_Comp5_Rise_IRQHandler>:
200003da:	e7fe      	b.n	200003da <ACE_Comp5_Rise_IRQHandler>

200003dc <ACE_Comp6_Rise_IRQHandler>:
200003dc:	e7fe      	b.n	200003dc <ACE_Comp6_Rise_IRQHandler>

200003de <ACE_Comp7_Rise_IRQHandler>:
200003de:	e7fe      	b.n	200003de <ACE_Comp7_Rise_IRQHandler>

200003e0 <ACE_Comp8_Rise_IRQHandler>:
200003e0:	e7fe      	b.n	200003e0 <ACE_Comp8_Rise_IRQHandler>

200003e2 <ACE_Comp9_Rise_IRQHandler>:
200003e2:	e7fe      	b.n	200003e2 <ACE_Comp9_Rise_IRQHandler>

200003e4 <ACE_Comp10_Rise_IRQHandler>:
200003e4:	e7fe      	b.n	200003e4 <ACE_Comp10_Rise_IRQHandler>

200003e6 <ACE_Comp11_Rise_IRQHandler>:
200003e6:	e7fe      	b.n	200003e6 <ACE_Comp11_Rise_IRQHandler>

200003e8 <ACE_ADC0_FifoFull_IRQHandler>:
200003e8:	e7fe      	b.n	200003e8 <ACE_ADC0_FifoFull_IRQHandler>

200003ea <ACE_ADC0_FifoAFull_IRQHandler>:
200003ea:	e7fe      	b.n	200003ea <ACE_ADC0_FifoAFull_IRQHandler>

200003ec <ACE_ADC0_FifoEmpty_IRQHandler>:
200003ec:	e7fe      	b.n	200003ec <ACE_ADC0_FifoEmpty_IRQHandler>

200003ee <ACE_ADC1_FifoFull_IRQHandler>:
200003ee:	e7fe      	b.n	200003ee <ACE_ADC1_FifoFull_IRQHandler>

200003f0 <ACE_ADC1_FifoAFull_IRQHandler>:
200003f0:	e7fe      	b.n	200003f0 <ACE_ADC1_FifoAFull_IRQHandler>

200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>:
200003f2:	e7fe      	b.n	200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>

200003f4 <ACE_ADC2_FifoFull_IRQHandler>:
200003f4:	e7fe      	b.n	200003f4 <ACE_ADC2_FifoFull_IRQHandler>

200003f6 <ACE_ADC2_FifoAFull_IRQHandler>:
200003f6:	e7fe      	b.n	200003f6 <ACE_ADC2_FifoAFull_IRQHandler>

200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>:
200003f8:	e7fe      	b.n	200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>

200003fa <ACE_PPE_Flag0_IRQHandler>:
200003fa:	e7fe      	b.n	200003fa <ACE_PPE_Flag0_IRQHandler>

200003fc <ACE_PPE_Flag1_IRQHandler>:
200003fc:	e7fe      	b.n	200003fc <ACE_PPE_Flag1_IRQHandler>

200003fe <ACE_PPE_Flag2_IRQHandler>:
200003fe:	e7fe      	b.n	200003fe <ACE_PPE_Flag2_IRQHandler>

20000400 <ACE_PPE_Flag3_IRQHandler>:
20000400:	e7fe      	b.n	20000400 <ACE_PPE_Flag3_IRQHandler>

20000402 <ACE_PPE_Flag4_IRQHandler>:
20000402:	e7fe      	b.n	20000402 <ACE_PPE_Flag4_IRQHandler>

20000404 <ACE_PPE_Flag5_IRQHandler>:
20000404:	e7fe      	b.n	20000404 <ACE_PPE_Flag5_IRQHandler>

20000406 <ACE_PPE_Flag6_IRQHandler>:
20000406:	e7fe      	b.n	20000406 <ACE_PPE_Flag6_IRQHandler>

20000408 <ACE_PPE_Flag7_IRQHandler>:
20000408:	e7fe      	b.n	20000408 <ACE_PPE_Flag7_IRQHandler>

2000040a <ACE_PPE_Flag8_IRQHandler>:
2000040a:	e7fe      	b.n	2000040a <ACE_PPE_Flag8_IRQHandler>

2000040c <ACE_PPE_Flag9_IRQHandler>:
2000040c:	e7fe      	b.n	2000040c <ACE_PPE_Flag9_IRQHandler>

2000040e <ACE_PPE_Flag10_IRQHandler>:
2000040e:	e7fe      	b.n	2000040e <ACE_PPE_Flag10_IRQHandler>

20000410 <ACE_PPE_Flag11_IRQHandler>:
20000410:	e7fe      	b.n	20000410 <ACE_PPE_Flag11_IRQHandler>

20000412 <ACE_PPE_Flag12_IRQHandler>:
20000412:	e7fe      	b.n	20000412 <ACE_PPE_Flag12_IRQHandler>

20000414 <ACE_PPE_Flag13_IRQHandler>:
20000414:	e7fe      	b.n	20000414 <ACE_PPE_Flag13_IRQHandler>

20000416 <ACE_PPE_Flag14_IRQHandler>:
20000416:	e7fe      	b.n	20000416 <ACE_PPE_Flag14_IRQHandler>

20000418 <ACE_PPE_Flag15_IRQHandler>:
20000418:	e7fe      	b.n	20000418 <ACE_PPE_Flag15_IRQHandler>

2000041a <ACE_PPE_Flag16_IRQHandler>:
2000041a:	e7fe      	b.n	2000041a <ACE_PPE_Flag16_IRQHandler>

2000041c <ACE_PPE_Flag17_IRQHandler>:
2000041c:	e7fe      	b.n	2000041c <ACE_PPE_Flag17_IRQHandler>

2000041e <ACE_PPE_Flag18_IRQHandler>:
2000041e:	e7fe      	b.n	2000041e <ACE_PPE_Flag18_IRQHandler>

20000420 <ACE_PPE_Flag19_IRQHandler>:
20000420:	e7fe      	b.n	20000420 <ACE_PPE_Flag19_IRQHandler>

20000422 <ACE_PPE_Flag20_IRQHandler>:
20000422:	e7fe      	b.n	20000422 <ACE_PPE_Flag20_IRQHandler>

20000424 <ACE_PPE_Flag21_IRQHandler>:
20000424:	e7fe      	b.n	20000424 <ACE_PPE_Flag21_IRQHandler>

20000426 <ACE_PPE_Flag22_IRQHandler>:
20000426:	e7fe      	b.n	20000426 <ACE_PPE_Flag22_IRQHandler>

20000428 <ACE_PPE_Flag23_IRQHandler>:
20000428:	e7fe      	b.n	20000428 <ACE_PPE_Flag23_IRQHandler>

2000042a <ACE_PPE_Flag24_IRQHandler>:
2000042a:	e7fe      	b.n	2000042a <ACE_PPE_Flag24_IRQHandler>

2000042c <ACE_PPE_Flag25_IRQHandler>:
2000042c:	e7fe      	b.n	2000042c <ACE_PPE_Flag25_IRQHandler>

2000042e <ACE_PPE_Flag26_IRQHandler>:
2000042e:	e7fe      	b.n	2000042e <ACE_PPE_Flag26_IRQHandler>

20000430 <ACE_PPE_Flag27_IRQHandler>:
20000430:	e7fe      	b.n	20000430 <ACE_PPE_Flag27_IRQHandler>

20000432 <ACE_PPE_Flag28_IRQHandler>:
20000432:	e7fe      	b.n	20000432 <ACE_PPE_Flag28_IRQHandler>

20000434 <ACE_PPE_Flag29_IRQHandler>:
20000434:	e7fe      	b.n	20000434 <ACE_PPE_Flag29_IRQHandler>

20000436 <ACE_PPE_Flag30_IRQHandler>:
20000436:	e7fe      	b.n	20000436 <ACE_PPE_Flag30_IRQHandler>

20000438 <ACE_PPE_Flag31_IRQHandler>:
20000438:	e7fe      	b.n	20000438 <ACE_PPE_Flag31_IRQHandler>
2000043a:	0000      	.short	0x0000
2000043c:	20002449 	.word	0x20002449
20000440:	00000000 	.word	0x00000000
20000444:	20000000 	.word	0x20000000
20000448:	20000000 	.word	0x20000000
2000044c:	20003b0c 	.word	0x20003b0c
20000450:	20003b0c 	.word	0x20003b0c
20000454:	20003b0c 	.word	0x20003b0c
20000458:	20003c14 	.word	0x20003c14
2000045c:	00000000 	.word	0x00000000
20000460:	20003c18 	.word	0x20003c18
20000464:	20003ea0 	.word	0x20003ea0
20000468:	2000333d 	.word	0x2000333d
2000046c:	200010b9 	.word	0x200010b9

20000470 <__do_global_dtors_aux>:
20000470:	f643 4318 	movw	r3, #15384	; 0x3c18
20000474:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000478:	781a      	ldrb	r2, [r3, #0]
2000047a:	b90a      	cbnz	r2, 20000480 <__do_global_dtors_aux+0x10>
2000047c:	2001      	movs	r0, #1
2000047e:	7018      	strb	r0, [r3, #0]
20000480:	4770      	bx	lr
20000482:	bf00      	nop

20000484 <frame_dummy>:
20000484:	f643 300c 	movw	r0, #15116	; 0x3b0c
20000488:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000048c:	b508      	push	{r3, lr}
2000048e:	6803      	ldr	r3, [r0, #0]
20000490:	b12b      	cbz	r3, 2000049e <frame_dummy+0x1a>
20000492:	f240 0300 	movw	r3, #0
20000496:	f2c0 0300 	movt	r3, #0
2000049a:	b103      	cbz	r3, 2000049e <frame_dummy+0x1a>
2000049c:	4798      	blx	r3
2000049e:	bd08      	pop	{r3, pc}

200004a0 <NVIC_EnableIRQ>:
 *
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
200004a0:	b480      	push	{r7}
200004a2:	b083      	sub	sp, #12
200004a4:	af00      	add	r7, sp, #0
200004a6:	4603      	mov	r3, r0
200004a8:	80fb      	strh	r3, [r7, #6]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
200004aa:	f24e 1300 	movw	r3, #57600	; 0xe100
200004ae:	f2ce 0300 	movt	r3, #57344	; 0xe000
200004b2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
200004b6:	ea4f 1252 	mov.w	r2, r2, lsr #5
200004ba:	88f9      	ldrh	r1, [r7, #6]
200004bc:	f001 011f 	and.w	r1, r1, #31
200004c0:	f04f 0001 	mov.w	r0, #1
200004c4:	fa00 f101 	lsl.w	r1, r0, r1
200004c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
200004cc:	f107 070c 	add.w	r7, r7, #12
200004d0:	46bd      	mov	sp, r7
200004d2:	bc80      	pop	{r7}
200004d4:	4770      	bx	lr
200004d6:	bf00      	nop

200004d8 <NVIC_DisableIRQ>:
 * 
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
200004d8:	b480      	push	{r7}
200004da:	b083      	sub	sp, #12
200004dc:	af00      	add	r7, sp, #0
200004de:	4603      	mov	r3, r0
200004e0:	80fb      	strh	r3, [r7, #6]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
200004e2:	f24e 1300 	movw	r3, #57600	; 0xe100
200004e6:	f2ce 0300 	movt	r3, #57344	; 0xe000
200004ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
200004ee:	ea4f 1252 	mov.w	r2, r2, lsr #5
200004f2:	88f9      	ldrh	r1, [r7, #6]
200004f4:	f001 011f 	and.w	r1, r1, #31
200004f8:	f04f 0001 	mov.w	r0, #1
200004fc:	fa00 f101 	lsl.w	r1, r0, r1
20000500:	f102 0220 	add.w	r2, r2, #32
20000504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20000508:	f107 070c 	add.w	r7, r7, #12
2000050c:	46bd      	mov	sp, r7
2000050e:	bc80      	pop	{r7}
20000510:	4770      	bx	lr
20000512:	bf00      	nop

20000514 <gridEYE_write>:
//--- Grideye Functions ---

// Perform a write to a register on the gridEYE
// reg_addr: 1-byte array containing address of register to read
// recieved_data: 1-byte array containing input data
void gridEYE_write(uint8_t* reg_addr, uint8_t* data){
20000514:	b580      	push	{r7, lr}
20000516:	b086      	sub	sp, #24
20000518:	af02      	add	r7, sp, #8
2000051a:	6078      	str	r0, [r7, #4]
2000051c:	6039      	str	r1, [r7, #0]

	uint8_t signal[] = {*reg_addr, *data};
2000051e:	687b      	ldr	r3, [r7, #4]
20000520:	781a      	ldrb	r2, [r3, #0]
20000522:	683b      	ldr	r3, [r7, #0]
20000524:	781b      	ldrb	r3, [r3, #0]
20000526:	733a      	strb	r2, [r7, #12]
20000528:	737b      	strb	r3, [r7, #13]

	MSS_I2C_write
2000052a:	f107 030c 	add.w	r3, r7, #12
2000052e:	f04f 0200 	mov.w	r2, #0
20000532:	9200      	str	r2, [sp, #0]
20000534:	f643 602c 	movw	r0, #15916	; 0x3e2c
20000538:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000053c:	f04f 0169 	mov.w	r1, #105	; 0x69
20000540:	461a      	mov	r2, r3
20000542:	f04f 0302 	mov.w	r3, #2
20000546:	f001 f869 	bl	2000161c <MSS_I2C_write>
			signal,
			sizeof(signal),
			MSS_I2C_RELEASE_BUS
		);

	MSS_I2C_wait_complete(&g_mss_i2c1, 100);
2000054a:	f643 602c 	movw	r0, #15916	; 0x3e2c
2000054e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000552:	f04f 0164 	mov.w	r1, #100	; 0x64
20000556:	f001 f975 	bl	20001844 <MSS_I2C_wait_complete>
}//gridEYE_write()
2000055a:	f107 0710 	add.w	r7, r7, #16
2000055e:	46bd      	mov	sp, r7
20000560:	bd80      	pop	{r7, pc}
20000562:	bf00      	nop

20000564 <gridEYE_read>:


// Read from a specific register on the gridEYE
// reg_addr: 1-byte array containing address of register to read
// recieved_data: 1-byte array where received data will be placed
void gridEYE_read(uint8_t* reg_addr, uint8_t* recieved_data ){
20000564:	b580      	push	{r7, lr}
20000566:	b086      	sub	sp, #24
20000568:	af04      	add	r7, sp, #16
2000056a:	6078      	str	r0, [r7, #4]
2000056c:	6039      	str	r1, [r7, #0]

	MSS_I2C_write_read
2000056e:	683b      	ldr	r3, [r7, #0]
20000570:	9300      	str	r3, [sp, #0]
20000572:	f04f 0380 	mov.w	r3, #128	; 0x80
20000576:	9301      	str	r3, [sp, #4]
20000578:	f04f 0300 	mov.w	r3, #0
2000057c:	9302      	str	r3, [sp, #8]
2000057e:	f643 602c 	movw	r0, #15916	; 0x3e2c
20000582:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000586:	f04f 0169 	mov.w	r1, #105	; 0x69
2000058a:	687a      	ldr	r2, [r7, #4]
2000058c:	f04f 0301 	mov.w	r3, #1
20000590:	f001 f8be 	bl	20001710 <MSS_I2C_write_read>
			recieved_data,
			128,
			MSS_I2C_RELEASE_BUS
		);

	MSS_I2C_wait_complete(&g_mss_i2c1, 100);
20000594:	f643 602c 	movw	r0, #15916	; 0x3e2c
20000598:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000059c:	f04f 0164 	mov.w	r1, #100	; 0x64
200005a0:	f001 f950 	bl	20001844 <MSS_I2C_wait_complete>
}//gridEYE_read()
200005a4:	f107 0708 	add.w	r7, r7, #8
200005a8:	46bd      	mov	sp, r7
200005aa:	bd80      	pop	{r7, pc}

200005ac <gridEYE_reset>:


// Reset gridEYE
void gridEYE_reset(){
200005ac:	b580      	push	{r7, lr}
200005ae:	b082      	sub	sp, #8
200005b0:	af00      	add	r7, sp, #0

	uint8_t resAddr[] = {0x1};
200005b2:	f04f 0301 	mov.w	r3, #1
200005b6:	713b      	strb	r3, [r7, #4]
	uint8_t resVal[] = {0x3f};
200005b8:	f04f 033f 	mov.w	r3, #63	; 0x3f
200005bc:	703b      	strb	r3, [r7, #0]
	gridEYE_write(resAddr, resVal);
200005be:	f107 0204 	add.w	r2, r7, #4
200005c2:	463b      	mov	r3, r7
200005c4:	4610      	mov	r0, r2
200005c6:	4619      	mov	r1, r3
200005c8:	f7ff ffa4 	bl	20000514 <gridEYE_write>
}//gridEYE_reset()
200005cc:	f107 0708 	add.w	r7, r7, #8
200005d0:	46bd      	mov	sp, r7
200005d2:	bd80      	pop	{r7, pc}

200005d4 <gridEYE_set_normal_power>:


// Set normal power mode
void gridEYE_set_normal_power(){
200005d4:	b580      	push	{r7, lr}
200005d6:	b082      	sub	sp, #8
200005d8:	af00      	add	r7, sp, #0

	uint8_t powAddr[] = {0x0};
200005da:	f04f 0300 	mov.w	r3, #0
200005de:	713b      	strb	r3, [r7, #4]
	uint8_t powVal[] = {0x0};
200005e0:	f04f 0300 	mov.w	r3, #0
200005e4:	703b      	strb	r3, [r7, #0]
	gridEYE_write(powAddr, powVal);
200005e6:	f107 0204 	add.w	r2, r7, #4
200005ea:	463b      	mov	r3, r7
200005ec:	4610      	mov	r0, r2
200005ee:	4619      	mov	r1, r3
200005f0:	f7ff ff90 	bl	20000514 <gridEYE_write>
}//gridEYE_set_normal()
200005f4:	f107 0708 	add.w	r7, r7, #8
200005f8:	46bd      	mov	sp, r7
200005fa:	bd80      	pop	{r7, pc}

200005fc <gridEYE_init>:


// Reset device, set operation to normal power
void gridEYE_init(){
200005fc:	b580      	push	{r7, lr}
200005fe:	af00      	add	r7, sp, #0
	gridEYE_reset();
20000600:	f7ff ffd4 	bl	200005ac <gridEYE_reset>
	gridEYE_set_normal_power();
20000604:	f7ff ffe6 	bl	200005d4 <gridEYE_set_normal_power>
}//grideye_init()
20000608:	bd80      	pop	{r7, pc}
2000060a:	bf00      	nop

2000060c <raw_to_temp>:

// Function converts a 12 bit 2C number to
// a signed float
float raw_to_temp(uint8_t upper, uint8_t lower){
2000060c:	b580      	push	{r7, lr}
2000060e:	b084      	sub	sp, #16
20000610:	af00      	add	r7, sp, #0
20000612:	4602      	mov	r2, r0
20000614:	460b      	mov	r3, r1
20000616:	71fa      	strb	r2, [r7, #7]
20000618:	71bb      	strb	r3, [r7, #6]

	// TEMPERATURE CONVERSION
	// Data is recieved as a 12 bit 2's complement number
	// Each value represents a 0.25 C temperature difference

	int full = (upper << 8) | lower;
2000061a:	79fb      	ldrb	r3, [r7, #7]
2000061c:	ea4f 2203 	mov.w	r2, r3, lsl #8
20000620:	79bb      	ldrb	r3, [r7, #6]
20000622:	ea42 0303 	orr.w	r3, r2, r3
20000626:	60fb      	str	r3, [r7, #12]

	// If input is negative, perform sign extension
	if (upper &  (1 << 3)){
20000628:	79fb      	ldrb	r3, [r7, #7]
2000062a:	f003 0308 	and.w	r3, r3, #8
2000062e:	2b00      	cmp	r3, #0
20000630:	d005      	beq.n	2000063e <raw_to_temp+0x32>
		full |= 0xFFFFF000;
20000632:	68fb      	ldr	r3, [r7, #12]
20000634:	ea6f 5303 	mvn.w	r3, r3, lsl #20
20000638:	ea6f 5313 	mvn.w	r3, r3, lsr #20
2000063c:	60fb      	str	r3, [r7, #12]
	}
	return (float)full*0.25;
2000063e:	68f8      	ldr	r0, [r7, #12]
20000640:	f002 fc5c 	bl	20002efc <__aeabi_i2f>
20000644:	4603      	mov	r3, r0
20000646:	4618      	mov	r0, r3
20000648:	4904      	ldr	r1, [pc, #16]	; (2000065c <raw_to_temp+0x50>)
2000064a:	f002 fcab 	bl	20002fa4 <__aeabi_fmul>
2000064e:	4603      	mov	r3, r0
}//raw_to_temp()
20000650:	4618      	mov	r0, r3
20000652:	f107 0710 	add.w	r7, r7, #16
20000656:	46bd      	mov	sp, r7
20000658:	bd80      	pop	{r7, pc}
2000065a:	bf00      	nop
2000065c:	3e800000 	.word	0x3e800000

20000660 <get_temps_forward>:

// Function converts 128 byte raw data array
// to a set of 64 signed float values
// Data is oriented in the same positions
// as the vision of the grideye (looking outward)
void get_temps_forward(uint8_t* data_in, float temps[][8]){
20000660:	b5b0      	push	{r4, r5, r7, lr}
20000662:	b086      	sub	sp, #24
20000664:	af00      	add	r7, sp, #0
20000666:	6078      	str	r0, [r7, #4]
20000668:	6039      	str	r1, [r7, #0]

	int i = 0;
2000066a:	f04f 0300 	mov.w	r3, #0
2000066e:	60fb      	str	r3, [r7, #12]
	int j = 0;
20000670:	f04f 0300 	mov.w	r3, #0
20000674:	613b      	str	r3, [r7, #16]
	int k = 7;
20000676:	f04f 0307 	mov.w	r3, #7
2000067a:	617b      	str	r3, [r7, #20]

	// Iterate through all data
	for (i = 0; i < 128; i += 2) {
2000067c:	f04f 0300 	mov.w	r3, #0
20000680:	60fb      	str	r3, [r7, #12]
20000682:	e02e      	b.n	200006e2 <get_temps_forward+0x82>
		// Move one column to the left every 16 input bytes
		if(i && i%16 == 0){
20000684:	68fb      	ldr	r3, [r7, #12]
20000686:	2b00      	cmp	r3, #0
20000688:	d00b      	beq.n	200006a2 <get_temps_forward+0x42>
2000068a:	68fb      	ldr	r3, [r7, #12]
2000068c:	f003 030f 	and.w	r3, r3, #15
20000690:	2b00      	cmp	r3, #0
20000692:	d106      	bne.n	200006a2 <get_temps_forward+0x42>
			--k;
20000694:	697b      	ldr	r3, [r7, #20]
20000696:	f103 33ff 	add.w	r3, r3, #4294967295
2000069a:	617b      	str	r3, [r7, #20]
			j = 0;
2000069c:	f04f 0300 	mov.w	r3, #0
200006a0:	613b      	str	r3, [r7, #16]
		}

		// Read upper and lower bytes, convert to float, store
		temps[j][k] = raw_to_temp(data_in[i + 1], data_in[i]);
200006a2:	693b      	ldr	r3, [r7, #16]
200006a4:	ea4f 1243 	mov.w	r2, r3, lsl #5
200006a8:	683b      	ldr	r3, [r7, #0]
200006aa:	eb02 0403 	add.w	r4, r2, r3
200006ae:	697d      	ldr	r5, [r7, #20]
200006b0:	68fb      	ldr	r3, [r7, #12]
200006b2:	f103 0201 	add.w	r2, r3, #1
200006b6:	687b      	ldr	r3, [r7, #4]
200006b8:	4413      	add	r3, r2
200006ba:	781a      	ldrb	r2, [r3, #0]
200006bc:	68f9      	ldr	r1, [r7, #12]
200006be:	687b      	ldr	r3, [r7, #4]
200006c0:	440b      	add	r3, r1
200006c2:	781b      	ldrb	r3, [r3, #0]
200006c4:	4610      	mov	r0, r2
200006c6:	4619      	mov	r1, r3
200006c8:	f7ff ffa0 	bl	2000060c <raw_to_temp>
200006cc:	4603      	mov	r3, r0
200006ce:	f844 3025 	str.w	r3, [r4, r5, lsl #2]

		++j;
200006d2:	693b      	ldr	r3, [r7, #16]
200006d4:	f103 0301 	add.w	r3, r3, #1
200006d8:	613b      	str	r3, [r7, #16]
	int i = 0;
	int j = 0;
	int k = 7;

	// Iterate through all data
	for (i = 0; i < 128; i += 2) {
200006da:	68fb      	ldr	r3, [r7, #12]
200006dc:	f103 0302 	add.w	r3, r3, #2
200006e0:	60fb      	str	r3, [r7, #12]
200006e2:	68fb      	ldr	r3, [r7, #12]
200006e4:	2b7f      	cmp	r3, #127	; 0x7f
200006e6:	ddcd      	ble.n	20000684 <get_temps_forward+0x24>
		// Read upper and lower bytes, convert to float, store
		temps[j][k] = raw_to_temp(data_in[i + 1], data_in[i]);

		++j;
	}
}//get_temps_forward()
200006e8:	f107 0718 	add.w	r7, r7, #24
200006ec:	46bd      	mov	sp, r7
200006ee:	bdb0      	pop	{r4, r5, r7, pc}

200006f0 <get_max_temp>:
	}
}//get_temps_reversed()


// Function returns the highest temperature in the 8x8 array
float get_max_temp(float temps[][8]){
200006f0:	b590      	push	{r4, r7, lr}
200006f2:	b087      	sub	sp, #28
200006f4:	af00      	add	r7, sp, #0
200006f6:	6078      	str	r0, [r7, #4]
	float current_max = 0;
200006f8:	4b1f      	ldr	r3, [pc, #124]	; (20000778 <get_max_temp+0x88>)
200006fa:	60fb      	str	r3, [r7, #12]

	int i;
	int j;
	for(i = 0; i < 8; ++i){
200006fc:	f04f 0300 	mov.w	r3, #0
20000700:	613b      	str	r3, [r7, #16]
20000702:	e02f      	b.n	20000764 <get_max_temp+0x74>
		for(j = 0; j < 8; ++j){
20000704:	f04f 0300 	mov.w	r3, #0
20000708:	617b      	str	r3, [r7, #20]
2000070a:	e024      	b.n	20000756 <get_max_temp+0x66>
			if (temps[i][j] > current_max){
2000070c:	693b      	ldr	r3, [r7, #16]
2000070e:	ea4f 1243 	mov.w	r2, r3, lsl #5
20000712:	687b      	ldr	r3, [r7, #4]
20000714:	4413      	add	r3, r2
20000716:	697a      	ldr	r2, [r7, #20]
20000718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000071c:	f04f 0200 	mov.w	r2, #0
20000720:	4614      	mov	r4, r2
20000722:	4618      	mov	r0, r3
20000724:	68f9      	ldr	r1, [r7, #12]
20000726:	f002 fdf9 	bl	2000331c <__aeabi_fcmpgt>
2000072a:	4603      	mov	r3, r0
2000072c:	2b00      	cmp	r3, #0
2000072e:	d002      	beq.n	20000736 <get_max_temp+0x46>
20000730:	f04f 0301 	mov.w	r3, #1
20000734:	461c      	mov	r4, r3
20000736:	b2e3      	uxtb	r3, r4
20000738:	2b00      	cmp	r3, #0
2000073a:	d008      	beq.n	2000074e <get_max_temp+0x5e>
				current_max = temps[i][j];
2000073c:	693b      	ldr	r3, [r7, #16]
2000073e:	ea4f 1243 	mov.w	r2, r3, lsl #5
20000742:	687b      	ldr	r3, [r7, #4]
20000744:	4413      	add	r3, r2
20000746:	697a      	ldr	r2, [r7, #20]
20000748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000074c:	60fb      	str	r3, [r7, #12]
	float current_max = 0;

	int i;
	int j;
	for(i = 0; i < 8; ++i){
		for(j = 0; j < 8; ++j){
2000074e:	697b      	ldr	r3, [r7, #20]
20000750:	f103 0301 	add.w	r3, r3, #1
20000754:	617b      	str	r3, [r7, #20]
20000756:	697b      	ldr	r3, [r7, #20]
20000758:	2b07      	cmp	r3, #7
2000075a:	ddd7      	ble.n	2000070c <get_max_temp+0x1c>
float get_max_temp(float temps[][8]){
	float current_max = 0;

	int i;
	int j;
	for(i = 0; i < 8; ++i){
2000075c:	693b      	ldr	r3, [r7, #16]
2000075e:	f103 0301 	add.w	r3, r3, #1
20000762:	613b      	str	r3, [r7, #16]
20000764:	693b      	ldr	r3, [r7, #16]
20000766:	2b07      	cmp	r3, #7
20000768:	ddcc      	ble.n	20000704 <get_max_temp+0x14>
				current_max = temps[i][j];
			}
		}
	}

	return current_max;
2000076a:	68fb      	ldr	r3, [r7, #12]
}//get_max_temp()
2000076c:	4618      	mov	r0, r3
2000076e:	f107 071c 	add.w	r7, r7, #28
20000772:	46bd      	mov	sp, r7
20000774:	bd90      	pop	{r4, r7, pc}
20000776:	bf00      	nop
20000778:	00000000 	.word	0x00000000

2000077c <LED_reset>:
 * since they're upside-down on the head piece, this is reversed.
 * thus, LED[0] is the rightmost, LED[23] is the leftmost.
 */

// Reset LED values
void LED_reset(volatile uint32_t* LED){
2000077c:	b480      	push	{r7}
2000077e:	b085      	sub	sp, #20
20000780:	af00      	add	r7, sp, #0
20000782:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < NUMLEDS; ++i){
20000784:	f04f 0300 	mov.w	r3, #0
20000788:	60fb      	str	r3, [r7, #12]
2000078a:	e00b      	b.n	200007a4 <LED_reset+0x28>
		LED[i] = off;
2000078c:	68fb      	ldr	r3, [r7, #12]
2000078e:	ea4f 0283 	mov.w	r2, r3, lsl #2
20000792:	687b      	ldr	r3, [r7, #4]
20000794:	4413      	add	r3, r2
20000796:	f04f 0200 	mov.w	r2, #0
2000079a:	601a      	str	r2, [r3, #0]
 */

// Reset LED values
void LED_reset(volatile uint32_t* LED){
	int i;
	for (i = 0; i < NUMLEDS; ++i){
2000079c:	68fb      	ldr	r3, [r7, #12]
2000079e:	f103 0301 	add.w	r3, r3, #1
200007a2:	60fb      	str	r3, [r7, #12]
200007a4:	68fb      	ldr	r3, [r7, #12]
200007a6:	2b17      	cmp	r3, #23
200007a8:	ddf0      	ble.n	2000078c <LED_reset+0x10>
		LED[i] = off;
	}
}
200007aa:	f107 0714 	add.w	r7, r7, #20
200007ae:	46bd      	mov	sp, r7
200007b0:	bc80      	pop	{r7}
200007b2:	4770      	bx	lr

200007b4 <data_to_cm>:
// Sonic globals
#define SONIC_ADDR 0x40050100;


// Returns a decimal value representation of the distance in centimeters
float data_to_cm(uint32_t in_data){
200007b4:	b580      	push	{r7, lr}
200007b6:	b084      	sub	sp, #16
200007b8:	af00      	add	r7, sp, #0
200007ba:	6078      	str	r0, [r7, #4]

	// Convert 10nS count to 1mS count
	float cm_data = (float)in_data / 100;
200007bc:	6878      	ldr	r0, [r7, #4]
200007be:	f002 fb99 	bl	20002ef4 <__aeabi_ui2f>
200007c2:	4603      	mov	r3, r0
200007c4:	4618      	mov	r0, r3
200007c6:	4907      	ldr	r1, [pc, #28]	; (200007e4 <data_to_cm+0x30>)
200007c8:	f002 fca0 	bl	2000310c <__aeabi_fdiv>
200007cc:	4603      	mov	r3, r0
200007ce:	60fb      	str	r3, [r7, #12]

	// Divide by 56 to get data in cm according to datasheet
	return cm_data/56;
200007d0:	68f8      	ldr	r0, [r7, #12]
200007d2:	4905      	ldr	r1, [pc, #20]	; (200007e8 <data_to_cm+0x34>)
200007d4:	f002 fc9a 	bl	2000310c <__aeabi_fdiv>
200007d8:	4603      	mov	r3, r0
}
200007da:	4618      	mov	r0, r3
200007dc:	f107 0710 	add.w	r7, r7, #16
200007e0:	46bd      	mov	sp, r7
200007e2:	bd80      	pop	{r7, pc}
200007e4:	42c80000 	.word	0x42c80000
200007e8:	42600000 	.word	0x42600000
200007ec:	00000000 	.word	0x00000000

200007f0 <wrap_angle_360>:
#define EUL_HEADING_LSB 0x1A

#define CHIP_ID_REG 0x00

double wrap_angle_360(double x)
{
200007f0:	b590      	push	{r4, r7, lr}
200007f2:	b083      	sub	sp, #12
200007f4:	af00      	add	r7, sp, #0
200007f6:	e9c7 0100 	strd	r0, r1, [r7]
	while (x < 0) x += 360.0;
200007fa:	e00a      	b.n	20000812 <wrap_angle_360+0x22>
200007fc:	e9d7 0100 	ldrd	r0, r1, [r7]
20000800:	a321      	add	r3, pc, #132	; (adr r3, 20000888 <wrap_angle_360+0x98>)
20000802:	e9d3 2300 	ldrd	r2, r3, [r3]
20000806:	f001 fe2b 	bl	20002460 <__adddf3>
2000080a:	4602      	mov	r2, r0
2000080c:	460b      	mov	r3, r1
2000080e:	e9c7 2300 	strd	r2, r3, [r7]
20000812:	f04f 0300 	mov.w	r3, #0
20000816:	461c      	mov	r4, r3
20000818:	e9d7 0100 	ldrd	r0, r1, [r7]
2000081c:	f04f 0200 	mov.w	r2, #0
20000820:	f04f 0300 	mov.w	r3, #0
20000824:	f002 fa40 	bl	20002ca8 <__aeabi_dcmplt>
20000828:	4603      	mov	r3, r0
2000082a:	2b00      	cmp	r3, #0
2000082c:	d002      	beq.n	20000834 <wrap_angle_360+0x44>
2000082e:	f04f 0301 	mov.w	r3, #1
20000832:	461c      	mov	r4, r3
20000834:	b2e3      	uxtb	r3, r4
20000836:	2b00      	cmp	r3, #0
20000838:	d1e0      	bne.n	200007fc <wrap_angle_360+0xc>
	while (x >= 360.0) x -= 360.0;
2000083a:	e00a      	b.n	20000852 <wrap_angle_360+0x62>
2000083c:	e9d7 0100 	ldrd	r0, r1, [r7]
20000840:	a311      	add	r3, pc, #68	; (adr r3, 20000888 <wrap_angle_360+0x98>)
20000842:	e9d3 2300 	ldrd	r2, r3, [r3]
20000846:	f001 fe09 	bl	2000245c <__aeabi_dsub>
2000084a:	4602      	mov	r2, r0
2000084c:	460b      	mov	r3, r1
2000084e:	e9c7 2300 	strd	r2, r3, [r7]
20000852:	f04f 0300 	mov.w	r3, #0
20000856:	461c      	mov	r4, r3
20000858:	e9d7 0100 	ldrd	r0, r1, [r7]
2000085c:	a30a      	add	r3, pc, #40	; (adr r3, 20000888 <wrap_angle_360+0x98>)
2000085e:	e9d3 2300 	ldrd	r2, r3, [r3]
20000862:	f002 fa35 	bl	20002cd0 <__aeabi_dcmpge>
20000866:	4603      	mov	r3, r0
20000868:	2b00      	cmp	r3, #0
2000086a:	d002      	beq.n	20000872 <wrap_angle_360+0x82>
2000086c:	f04f 0301 	mov.w	r3, #1
20000870:	461c      	mov	r4, r3
20000872:	b2e3      	uxtb	r3, r4
20000874:	2b00      	cmp	r3, #0
20000876:	d1e1      	bne.n	2000083c <wrap_angle_360+0x4c>
	return x;
20000878:	e9d7 2300 	ldrd	r2, r3, [r7]
}
2000087c:	4610      	mov	r0, r2
2000087e:	4619      	mov	r1, r3
20000880:	f107 070c 	add.w	r7, r7, #12
20000884:	46bd      	mov	sp, r7
20000886:	bd90      	pop	{r4, r7, pc}
20000888:	00000000 	.word	0x00000000
2000088c:	40768000 	.word	0x40768000

20000890 <wrap_angle_180>:

double wrap_angle_180(double x)
{
20000890:	b590      	push	{r4, r7, lr}
20000892:	b083      	sub	sp, #12
20000894:	af00      	add	r7, sp, #0
20000896:	e9c7 0100 	strd	r0, r1, [r7]
	while (x < -180.0) x += 360.0;
2000089a:	e00a      	b.n	200008b2 <wrap_angle_180+0x22>
2000089c:	e9d7 0100 	ldrd	r0, r1, [r7]
200008a0:	a321      	add	r3, pc, #132	; (adr r3, 20000928 <wrap_angle_180+0x98>)
200008a2:	e9d3 2300 	ldrd	r2, r3, [r3]
200008a6:	f001 fddb 	bl	20002460 <__adddf3>
200008aa:	4602      	mov	r2, r0
200008ac:	460b      	mov	r3, r1
200008ae:	e9c7 2300 	strd	r2, r3, [r7]
200008b2:	f04f 0300 	mov.w	r3, #0
200008b6:	461c      	mov	r4, r3
200008b8:	e9d7 0100 	ldrd	r0, r1, [r7]
200008bc:	a31c      	add	r3, pc, #112	; (adr r3, 20000930 <wrap_angle_180+0xa0>)
200008be:	e9d3 2300 	ldrd	r2, r3, [r3]
200008c2:	f002 f9f1 	bl	20002ca8 <__aeabi_dcmplt>
200008c6:	4603      	mov	r3, r0
200008c8:	2b00      	cmp	r3, #0
200008ca:	d002      	beq.n	200008d2 <wrap_angle_180+0x42>
200008cc:	f04f 0301 	mov.w	r3, #1
200008d0:	461c      	mov	r4, r3
200008d2:	b2e3      	uxtb	r3, r4
200008d4:	2b00      	cmp	r3, #0
200008d6:	d1e1      	bne.n	2000089c <wrap_angle_180+0xc>
	while (x >= 180.0) x -= 360.0;
200008d8:	e00a      	b.n	200008f0 <wrap_angle_180+0x60>
200008da:	e9d7 0100 	ldrd	r0, r1, [r7]
200008de:	a312      	add	r3, pc, #72	; (adr r3, 20000928 <wrap_angle_180+0x98>)
200008e0:	e9d3 2300 	ldrd	r2, r3, [r3]
200008e4:	f001 fdba 	bl	2000245c <__aeabi_dsub>
200008e8:	4602      	mov	r2, r0
200008ea:	460b      	mov	r3, r1
200008ec:	e9c7 2300 	strd	r2, r3, [r7]
200008f0:	f04f 0300 	mov.w	r3, #0
200008f4:	461c      	mov	r4, r3
200008f6:	e9d7 0100 	ldrd	r0, r1, [r7]
200008fa:	a30f      	add	r3, pc, #60	; (adr r3, 20000938 <wrap_angle_180+0xa8>)
200008fc:	e9d3 2300 	ldrd	r2, r3, [r3]
20000900:	f002 f9e6 	bl	20002cd0 <__aeabi_dcmpge>
20000904:	4603      	mov	r3, r0
20000906:	2b00      	cmp	r3, #0
20000908:	d002      	beq.n	20000910 <wrap_angle_180+0x80>
2000090a:	f04f 0301 	mov.w	r3, #1
2000090e:	461c      	mov	r4, r3
20000910:	b2e3      	uxtb	r3, r4
20000912:	2b00      	cmp	r3, #0
20000914:	d1e1      	bne.n	200008da <wrap_angle_180+0x4a>
	return x;
20000916:	e9d7 2300 	ldrd	r2, r3, [r7]
}
2000091a:	4610      	mov	r0, r2
2000091c:	4619      	mov	r1, r3
2000091e:	f107 070c 	add.w	r7, r7, #12
20000922:	46bd      	mov	sp, r7
20000924:	bd90      	pop	{r4, r7, pc}
20000926:	bf00      	nop
20000928:	00000000 	.word	0x00000000
2000092c:	40768000 	.word	0x40768000
20000930:	00000000 	.word	0x00000000
20000934:	c0668000 	.word	0xc0668000
20000938:	00000000 	.word	0x00000000
2000093c:	40668000 	.word	0x40668000

20000940 <init_BNO055>:

int init_BNO055(uint8_t dev_addr)
{
20000940:	b580      	push	{r7, lr}
20000942:	b088      	sub	sp, #32
20000944:	af04      	add	r7, sp, #16
20000946:	4603      	mov	r3, r0
20000948:	71fb      	strb	r3, [r7, #7]
	// Set up MSS I2C driver struct
	MSS_I2C_init(&g_mss_i2c1 , 0x0, MSS_I2C_PCLK_DIV_256 );
2000094a:	f643 602c 	movw	r0, #15916	; 0x3e2c
2000094e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000952:	f04f 0100 	mov.w	r1, #0
20000956:	f04f 0200 	mov.w	r2, #0
2000095a:	f000 fda9 	bl	200014b0 <MSS_I2C_init>


	// Read chip ID
	uint8_t read_id_seq[] = {CHIP_ID_REG};
2000095e:	f04f 0300 	mov.w	r3, #0
20000962:	733b      	strb	r3, [r7, #12]
	uint8_t chip_id;
	MSS_I2C_write_read
20000964:	79fa      	ldrb	r2, [r7, #7]
20000966:	f107 030c 	add.w	r3, r7, #12
2000096a:	f107 010b 	add.w	r1, r7, #11
2000096e:	9100      	str	r1, [sp, #0]
20000970:	f04f 0101 	mov.w	r1, #1
20000974:	9101      	str	r1, [sp, #4]
20000976:	f04f 0100 	mov.w	r1, #0
2000097a:	9102      	str	r1, [sp, #8]
2000097c:	f643 602c 	movw	r0, #15916	; 0x3e2c
20000980:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000984:	4611      	mov	r1, r2
20000986:	461a      	mov	r2, r3
20000988:	f04f 0301 	mov.w	r3, #1
2000098c:	f000 fec0 	bl	20001710 <MSS_I2C_write_read>
		1,
		&chip_id,
		1,
		MSS_I2C_RELEASE_BUS
	);
	MSS_I2C_wait_complete(&g_mss_i2c1, MSS_I2C_RELEASE_BUS);
20000990:	f643 602c 	movw	r0, #15916	; 0x3e2c
20000994:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000998:	f04f 0100 	mov.w	r1, #0
2000099c:	f000 ff52 	bl	20001844 <MSS_I2C_wait_complete>
	if (chip_id != 0xA0) return -1;
200009a0:	7afb      	ldrb	r3, [r7, #11]
200009a2:	2ba0      	cmp	r3, #160	; 0xa0
200009a4:	d002      	beq.n	200009ac <init_BNO055+0x6c>
200009a6:	f04f 33ff 	mov.w	r3, #4294967295
200009aa:	e01f      	b.n	200009ec <init_BNO055+0xac>

	// Set mode to NDOF
	uint8_t write_mode_seq[] = { OPR_MODE_REG, OPR_MODE_NDOF };
200009ac:	f643 13bc 	movw	r3, #14780	; 0x39bc
200009b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200009b4:	881b      	ldrh	r3, [r3, #0]
200009b6:	813b      	strh	r3, [r7, #8]
	MSS_I2C_write
200009b8:	79fa      	ldrb	r2, [r7, #7]
200009ba:	f107 0308 	add.w	r3, r7, #8
200009be:	f04f 0100 	mov.w	r1, #0
200009c2:	9100      	str	r1, [sp, #0]
200009c4:	f643 602c 	movw	r0, #15916	; 0x3e2c
200009c8:	f2c2 0000 	movt	r0, #8192	; 0x2000
200009cc:	4611      	mov	r1, r2
200009ce:	461a      	mov	r2, r3
200009d0:	f04f 0302 	mov.w	r3, #2
200009d4:	f000 fe22 	bl	2000161c <MSS_I2C_write>
		dev_addr,
		write_mode_seq,
		2,
		MSS_I2C_RELEASE_BUS
	);
	MSS_I2C_wait_complete(&g_mss_i2c1, MSS_I2C_NO_TIMEOUT);
200009d8:	f643 602c 	movw	r0, #15916	; 0x3e2c
200009dc:	f2c2 0000 	movt	r0, #8192	; 0x2000
200009e0:	f04f 0100 	mov.w	r1, #0
200009e4:	f000 ff2e 	bl	20001844 <MSS_I2C_wait_complete>

	return 0;
200009e8:	f04f 0300 	mov.w	r3, #0
}
200009ec:	4618      	mov	r0, r3
200009ee:	f107 0710 	add.w	r7, r7, #16
200009f2:	46bd      	mov	sp, r7
200009f4:	bd80      	pop	{r7, pc}
200009f6:	bf00      	nop

200009f8 <read_heading_BNO055>:

double read_heading_BNO055(uint8_t dev_addr)
{
200009f8:	b580      	push	{r7, lr}
200009fa:	b088      	sub	sp, #32
200009fc:	af04      	add	r7, sp, #16
200009fe:	4603      	mov	r3, r0
20000a00:	71fb      	strb	r3, [r7, #7]
	int32_t heading = 0;
20000a02:	f04f 0300 	mov.w	r3, #0
20000a06:	60fb      	str	r3, [r7, #12]
	uint8_t read_heading_seq[] = {EUL_HEADING_LSB, EUL_HEADING_MSB};
20000a08:	f643 13b8 	movw	r3, #14776	; 0x39b8
20000a0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000a10:	881b      	ldrh	r3, [r3, #0]
20000a12:	813b      	strh	r3, [r7, #8]
	MSS_I2C_write_read
20000a14:	f107 010c 	add.w	r1, r7, #12
20000a18:	79fa      	ldrb	r2, [r7, #7]
20000a1a:	f107 0308 	add.w	r3, r7, #8
20000a1e:	9100      	str	r1, [sp, #0]
20000a20:	f04f 0102 	mov.w	r1, #2
20000a24:	9101      	str	r1, [sp, #4]
20000a26:	f04f 0101 	mov.w	r1, #1
20000a2a:	9102      	str	r1, [sp, #8]
20000a2c:	f643 602c 	movw	r0, #15916	; 0x3e2c
20000a30:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000a34:	4611      	mov	r1, r2
20000a36:	461a      	mov	r2, r3
20000a38:	f04f 0302 	mov.w	r3, #2
20000a3c:	f000 fe68 	bl	20001710 <MSS_I2C_write_read>
		2,
		&heading,
		2,
		MSS_I2C_HOLD_BUS
	);
	MSS_I2C_wait_complete(&g_mss_i2c1, MSS_I2C_RELEASE_BUS);
20000a40:	f643 602c 	movw	r0, #15916	; 0x3e2c
20000a44:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000a48:	f04f 0100 	mov.w	r1, #0
20000a4c:	f000 fefa 	bl	20001844 <MSS_I2C_wait_complete>
	return wrap_angle_360(heading/16.0);
20000a50:	68fb      	ldr	r3, [r7, #12]
20000a52:	4618      	mov	r0, r3
20000a54:	f001 fe50 	bl	200026f8 <__aeabi_i2d>
20000a58:	4602      	mov	r2, r0
20000a5a:	460b      	mov	r3, r1
20000a5c:	4610      	mov	r0, r2
20000a5e:	4619      	mov	r1, r3
20000a60:	f04f 0200 	mov.w	r2, #0
20000a64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
20000a68:	f503 1340 	add.w	r3, r3, #3145728	; 0x300000
20000a6c:	f001 ffd4 	bl	20002a18 <__aeabi_ddiv>
20000a70:	4602      	mov	r2, r0
20000a72:	460b      	mov	r3, r1
20000a74:	4610      	mov	r0, r2
20000a76:	4619      	mov	r1, r3
20000a78:	f7ff feba 	bl	200007f0 <wrap_angle_360>
20000a7c:	4602      	mov	r2, r0
20000a7e:	460b      	mov	r3, r1
}
20000a80:	4610      	mov	r0, r2
20000a82:	4619      	mov	r1, r3
20000a84:	f107 0710 	add.w	r7, r7, #16
20000a88:	46bd      	mov	sp, r7
20000a8a:	bd80      	pop	{r7, pc}

20000a8c <calc_display_angle>:

double calc_display_angle(const uint8_t display_addr, const uint8_t sensor_addr, const uint8_t init)
{
20000a8c:	b580      	push	{r7, lr}
20000a8e:	b086      	sub	sp, #24
20000a90:	af00      	add	r7, sp, #0
20000a92:	4613      	mov	r3, r2
20000a94:	4602      	mov	r2, r0
20000a96:	71fa      	strb	r2, [r7, #7]
20000a98:	460a      	mov	r2, r1
20000a9a:	71ba      	strb	r2, [r7, #6]
20000a9c:	717b      	strb	r3, [r7, #5]
	static double baseline_heading_display;
	static double baseline_heading_sensor;

	if (init)
20000a9e:	797b      	ldrb	r3, [r7, #5]
20000aa0:	2b00      	cmp	r3, #0
20000aa2:	d013      	beq.n	20000acc <calc_display_angle+0x40>
	{
		baseline_heading_display = read_heading_BNO055(display_addr);
20000aa4:	79fb      	ldrb	r3, [r7, #7]
20000aa6:	4618      	mov	r0, r3
20000aa8:	f7ff ffa6 	bl	200009f8 <read_heading_BNO055>
20000aac:	f643 4320 	movw	r3, #15392	; 0x3c20
20000ab0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ab4:	e9c3 0100 	strd	r0, r1, [r3]
		baseline_heading_sensor = read_heading_BNO055(sensor_addr);
20000ab8:	79bb      	ldrb	r3, [r7, #6]
20000aba:	4618      	mov	r0, r3
20000abc:	f7ff ff9c 	bl	200009f8 <read_heading_BNO055>
20000ac0:	f643 4328 	movw	r3, #15400	; 0x3c28
20000ac4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ac8:	e9c3 0100 	strd	r0, r1, [r3]
	}

	double heading_sensor = wrap_angle_180(read_heading_BNO055(sensor_addr) - baseline_heading_sensor);
20000acc:	79bb      	ldrb	r3, [r7, #6]
20000ace:	4618      	mov	r0, r3
20000ad0:	f7ff ff92 	bl	200009f8 <read_heading_BNO055>
20000ad4:	f643 4328 	movw	r3, #15400	; 0x3c28
20000ad8:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000adc:	e9d3 2300 	ldrd	r2, r3, [r3]
20000ae0:	f001 fcbc 	bl	2000245c <__aeabi_dsub>
20000ae4:	4602      	mov	r2, r0
20000ae6:	460b      	mov	r3, r1
20000ae8:	4610      	mov	r0, r2
20000aea:	4619      	mov	r1, r3
20000aec:	f7ff fed0 	bl	20000890 <wrap_angle_180>
20000af0:	4602      	mov	r2, r0
20000af2:	460b      	mov	r3, r1
20000af4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double heading_display = wrap_angle_180(read_heading_BNO055(display_addr) - baseline_heading_display);
20000af8:	79fb      	ldrb	r3, [r7, #7]
20000afa:	4618      	mov	r0, r3
20000afc:	f7ff ff7c 	bl	200009f8 <read_heading_BNO055>
20000b00:	f643 4320 	movw	r3, #15392	; 0x3c20
20000b04:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b08:	e9d3 2300 	ldrd	r2, r3, [r3]
20000b0c:	f001 fca6 	bl	2000245c <__aeabi_dsub>
20000b10:	4602      	mov	r2, r0
20000b12:	460b      	mov	r3, r1
20000b14:	4610      	mov	r0, r2
20000b16:	4619      	mov	r1, r3
20000b18:	f7ff feba 	bl	20000890 <wrap_angle_180>
20000b1c:	4602      	mov	r2, r0
20000b1e:	460b      	mov	r3, r1
20000b20:	e9c7 2304 	strd	r2, r3, [r7, #16]

	return wrap_angle_180(heading_sensor - heading_display);
20000b24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
20000b28:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
20000b2c:	f001 fc96 	bl	2000245c <__aeabi_dsub>
20000b30:	4602      	mov	r2, r0
20000b32:	460b      	mov	r3, r1
20000b34:	4610      	mov	r0, r2
20000b36:	4619      	mov	r1, r3
20000b38:	f7ff feaa 	bl	20000890 <wrap_angle_180>
20000b3c:	4602      	mov	r2, r0
20000b3e:	460b      	mov	r3, r1
}
20000b40:	4610      	mov	r0, r2
20000b42:	4619      	mov	r1, r3
20000b44:	f107 0718 	add.w	r7, r7, #24
20000b48:	46bd      	mov	sp, r7
20000b4a:	bd80      	pop	{r7, pc}

20000b4c <byte_reverse>:


int int_count;
// Function reverses bits in the byte
uint8_t byte_reverse(uint8_t x)
{
20000b4c:	b480      	push	{r7}
20000b4e:	b083      	sub	sp, #12
20000b50:	af00      	add	r7, sp, #0
20000b52:	4603      	mov	r3, r0
20000b54:	71fb      	strb	r3, [r7, #7]
	return  0xFF & (((x & 0b10000000) >> 7) | ((x & 0b01000000) >> 5) | ((x & 0b00100000) >> 3) | ((x & 0b00010000) >> 1) |
20000b56:	79fb      	ldrb	r3, [r7, #7]
20000b58:	ea4f 13d3 	mov.w	r3, r3, lsr #7
20000b5c:	b2db      	uxtb	r3, r3
20000b5e:	461a      	mov	r2, r3
20000b60:	79fb      	ldrb	r3, [r7, #7]
20000b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
20000b66:	ea4f 1363 	mov.w	r3, r3, asr #5
20000b6a:	b2db      	uxtb	r3, r3
20000b6c:	ea42 0303 	orr.w	r3, r2, r3
20000b70:	b2da      	uxtb	r2, r3
20000b72:	79fb      	ldrb	r3, [r7, #7]
20000b74:	f003 0320 	and.w	r3, r3, #32
20000b78:	ea4f 03e3 	mov.w	r3, r3, asr #3
20000b7c:	b2db      	uxtb	r3, r3
20000b7e:	ea42 0303 	orr.w	r3, r2, r3
20000b82:	b2da      	uxtb	r2, r3
20000b84:	79fb      	ldrb	r3, [r7, #7]
20000b86:	f003 0310 	and.w	r3, r3, #16
20000b8a:	ea4f 0363 	mov.w	r3, r3, asr #1
20000b8e:	b2db      	uxtb	r3, r3
20000b90:	ea42 0303 	orr.w	r3, r2, r3
20000b94:	b2da      	uxtb	r2, r3
		((x & 0b00001000) << 1) | ((x & 0b000000100) << 3) | ((x & 0b000000010) << 5) | ((x & 0b00000001) << 7));
20000b96:	79fb      	ldrb	r3, [r7, #7]
20000b98:	f003 0308 	and.w	r3, r3, #8
20000b9c:	ea4f 0343 	mov.w	r3, r3, lsl #1

int int_count;
// Function reverses bits in the byte
uint8_t byte_reverse(uint8_t x)
{
	return  0xFF & (((x & 0b10000000) >> 7) | ((x & 0b01000000) >> 5) | ((x & 0b00100000) >> 3) | ((x & 0b00010000) >> 1) |
20000ba0:	b2db      	uxtb	r3, r3
20000ba2:	ea42 0303 	orr.w	r3, r2, r3
20000ba6:	b2da      	uxtb	r2, r3
		((x & 0b00001000) << 1) | ((x & 0b000000100) << 3) | ((x & 0b000000010) << 5) | ((x & 0b00000001) << 7));
20000ba8:	79fb      	ldrb	r3, [r7, #7]
20000baa:	f003 0304 	and.w	r3, r3, #4
20000bae:	ea4f 03c3 	mov.w	r3, r3, lsl #3

int int_count;
// Function reverses bits in the byte
uint8_t byte_reverse(uint8_t x)
{
	return  0xFF & (((x & 0b10000000) >> 7) | ((x & 0b01000000) >> 5) | ((x & 0b00100000) >> 3) | ((x & 0b00010000) >> 1) |
20000bb2:	b2db      	uxtb	r3, r3
20000bb4:	ea42 0303 	orr.w	r3, r2, r3
20000bb8:	b2da      	uxtb	r2, r3
		((x & 0b00001000) << 1) | ((x & 0b000000100) << 3) | ((x & 0b000000010) << 5) | ((x & 0b00000001) << 7));
20000bba:	79fb      	ldrb	r3, [r7, #7]
20000bbc:	f003 0302 	and.w	r3, r3, #2
20000bc0:	ea4f 1343 	mov.w	r3, r3, lsl #5

int int_count;
// Function reverses bits in the byte
uint8_t byte_reverse(uint8_t x)
{
	return  0xFF & (((x & 0b10000000) >> 7) | ((x & 0b01000000) >> 5) | ((x & 0b00100000) >> 3) | ((x & 0b00010000) >> 1) |
20000bc4:	b2db      	uxtb	r3, r3
20000bc6:	ea42 0303 	orr.w	r3, r2, r3
20000bca:	b2da      	uxtb	r2, r3
20000bcc:	79fb      	ldrb	r3, [r7, #7]
20000bce:	ea4f 13c3 	mov.w	r3, r3, lsl #7
20000bd2:	b2db      	uxtb	r3, r3
20000bd4:	ea42 0303 	orr.w	r3, r2, r3
20000bd8:	b2db      	uxtb	r3, r3
20000bda:	b2db      	uxtb	r3, r3
		((x & 0b00001000) << 1) | ((x & 0b000000100) << 3) | ((x & 0b000000010) << 5) | ((x & 0b00000001) << 7));
}
20000bdc:	4618      	mov	r0, r3
20000bde:	f107 070c 	add.w	r7, r7, #12
20000be2:	46bd      	mov	sp, r7
20000be4:	bc80      	pop	{r7}
20000be6:	4770      	bx	lr

20000be8 <scale_brightness_dist>:


// Function scales brightness based on distance
uint32_t scale_brightness_dist(int32_t color, float in_dist){
20000be8:	b590      	push	{r4, r7, lr}
20000bea:	b089      	sub	sp, #36	; 0x24
20000bec:	af00      	add	r7, sp, #0
20000bee:	6078      	str	r0, [r7, #4]
20000bf0:	6039      	str	r1, [r7, #0]
	uint i;
	uint32_t result = 0;
20000bf2:	f04f 0300 	mov.w	r3, #0
20000bf6:	60fb      	str	r3, [r7, #12]
	double scale_factor;

	for (i = 0; i<3; ++i)
20000bf8:	f04f 0300 	mov.w	r3, #0
20000bfc:	60bb      	str	r3, [r7, #8]
20000bfe:	e088      	b.n	20000d12 <scale_brightness_dist+0x12a>
	{
		uint8_t ind_value = byte_reverse((color >> 8*(i)) & 0xFF);
20000c00:	68bb      	ldr	r3, [r7, #8]
20000c02:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20000c06:	687a      	ldr	r2, [r7, #4]
20000c08:	fa42 f303 	asr.w	r3, r2, r3
20000c0c:	b2db      	uxtb	r3, r3
20000c0e:	4618      	mov	r0, r3
20000c10:	f7ff ff9c 	bl	20000b4c <byte_reverse>
20000c14:	4603      	mov	r3, r0
20000c16:	77fb      	strb	r3, [r7, #31]
		scale_factor = 2.17 - 0.332*log(in_dist);
20000c18:	6838      	ldr	r0, [r7, #0]
20000c1a:	f001 fd7f 	bl	2000271c <__aeabi_f2d>
20000c1e:	4602      	mov	r2, r0
20000c20:	460b      	mov	r3, r1
20000c22:	4610      	mov	r0, r2
20000c24:	4619      	mov	r1, r3
20000c26:	f002 fc29 	bl	2000347c <log>
20000c2a:	4602      	mov	r2, r0
20000c2c:	460b      	mov	r3, r1
20000c2e:	4610      	mov	r0, r2
20000c30:	4619      	mov	r1, r3
20000c32:	a33d      	add	r3, pc, #244	; (adr r3, 20000d28 <scale_brightness_dist+0x140>)
20000c34:	e9d3 2300 	ldrd	r2, r3, [r3]
20000c38:	f001 fdc4 	bl	200027c4 <__aeabi_dmul>
20000c3c:	4602      	mov	r2, r0
20000c3e:	460b      	mov	r3, r1
20000c40:	4610      	mov	r0, r2
20000c42:	4619      	mov	r1, r3
20000c44:	a33a      	add	r3, pc, #232	; (adr r3, 20000d30 <scale_brightness_dist+0x148>)
20000c46:	e9d3 2300 	ldrd	r2, r3, [r3]
20000c4a:	f001 fc09 	bl	20002460 <__adddf3>
20000c4e:	4602      	mov	r2, r0
20000c50:	460b      	mov	r3, r1
20000c52:	e9c7 2304 	strd	r2, r3, [r7, #16]
		if (scale_factor > 1) scale_factor = 1;
20000c56:	f04f 0300 	mov.w	r3, #0
20000c5a:	461c      	mov	r4, r3
20000c5c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
20000c60:	f04f 0200 	mov.w	r2, #0
20000c64:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
20000c68:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
20000c6c:	f002 f83a 	bl	20002ce4 <__aeabi_dcmpgt>
20000c70:	4603      	mov	r3, r0
20000c72:	2b00      	cmp	r3, #0
20000c74:	d002      	beq.n	20000c7c <scale_brightness_dist+0x94>
20000c76:	f04f 0301 	mov.w	r3, #1
20000c7a:	461c      	mov	r4, r3
20000c7c:	b2e3      	uxtb	r3, r4
20000c7e:	2b00      	cmp	r3, #0
20000c80:	d007      	beq.n	20000c92 <scale_brightness_dist+0xaa>
20000c82:	f04f 0200 	mov.w	r2, #0
20000c86:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
20000c8a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
20000c8e:	e9c7 2304 	strd	r2, r3, [r7, #16]
		if (scale_factor < 0) scale_factor = 0;
20000c92:	f04f 0300 	mov.w	r3, #0
20000c96:	461c      	mov	r4, r3
20000c98:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
20000c9c:	f04f 0200 	mov.w	r2, #0
20000ca0:	f04f 0300 	mov.w	r3, #0
20000ca4:	f002 f800 	bl	20002ca8 <__aeabi_dcmplt>
20000ca8:	4603      	mov	r3, r0
20000caa:	2b00      	cmp	r3, #0
20000cac:	d002      	beq.n	20000cb4 <scale_brightness_dist+0xcc>
20000cae:	f04f 0301 	mov.w	r3, #1
20000cb2:	461c      	mov	r4, r3
20000cb4:	b2e3      	uxtb	r3, r4
20000cb6:	2b00      	cmp	r3, #0
20000cb8:	d005      	beq.n	20000cc6 <scale_brightness_dist+0xde>
20000cba:	f04f 0200 	mov.w	r2, #0
20000cbe:	f04f 0300 	mov.w	r3, #0
20000cc2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		result = result | (byte_reverse(ind_value*scale_factor) << 8*(i));
20000cc6:	7ffb      	ldrb	r3, [r7, #31]
20000cc8:	4618      	mov	r0, r3
20000cca:	f001 fd15 	bl	200026f8 <__aeabi_i2d>
20000cce:	4602      	mov	r2, r0
20000cd0:	460b      	mov	r3, r1
20000cd2:	4610      	mov	r0, r2
20000cd4:	4619      	mov	r1, r3
20000cd6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
20000cda:	f001 fd73 	bl	200027c4 <__aeabi_dmul>
20000cde:	4602      	mov	r2, r0
20000ce0:	460b      	mov	r3, r1
20000ce2:	4610      	mov	r0, r2
20000ce4:	4619      	mov	r1, r3
20000ce6:	f002 f82f 	bl	20002d48 <__aeabi_d2uiz>
20000cea:	4603      	mov	r3, r0
20000cec:	b2db      	uxtb	r3, r3
20000cee:	4618      	mov	r0, r3
20000cf0:	f7ff ff2c 	bl	20000b4c <byte_reverse>
20000cf4:	4603      	mov	r3, r0
20000cf6:	461a      	mov	r2, r3
20000cf8:	68bb      	ldr	r3, [r7, #8]
20000cfa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20000cfe:	fa02 f303 	lsl.w	r3, r2, r3
20000d02:	68fa      	ldr	r2, [r7, #12]
20000d04:	ea42 0303 	orr.w	r3, r2, r3
20000d08:	60fb      	str	r3, [r7, #12]
uint32_t scale_brightness_dist(int32_t color, float in_dist){
	uint i;
	uint32_t result = 0;
	double scale_factor;

	for (i = 0; i<3; ++i)
20000d0a:	68bb      	ldr	r3, [r7, #8]
20000d0c:	f103 0301 	add.w	r3, r3, #1
20000d10:	60bb      	str	r3, [r7, #8]
20000d12:	68bb      	ldr	r3, [r7, #8]
20000d14:	2b02      	cmp	r3, #2
20000d16:	f67f af73 	bls.w	20000c00 <scale_brightness_dist+0x18>
		scale_factor = 2.17 - 0.332*log(in_dist);
		if (scale_factor > 1) scale_factor = 1;
		if (scale_factor < 0) scale_factor = 0;
		result = result | (byte_reverse(ind_value*scale_factor) << 8*(i));
	}
	return result;
20000d1a:	68fb      	ldr	r3, [r7, #12]
}
20000d1c:	4618      	mov	r0, r3
20000d1e:	f107 0724 	add.w	r7, r7, #36	; 0x24
20000d22:	46bd      	mov	sp, r7
20000d24:	bd90      	pop	{r4, r7, pc}
20000d26:	bf00      	nop
20000d28:	ed916873 	.word	0xed916873
20000d2c:	bfd53f7c 	.word	0xbfd53f7c
20000d30:	f5c28f5c 	.word	0xf5c28f5c
20000d34:	40015c28 	.word	0x40015c28

20000d38 <GPIO0_IRQHandler>:
int dist_to_LED(float in_dist){

	return (int)in_dist / 3;
}
// Interrupts for Gyroscope reset functionality (Pin J20)
void GPIO0_IRQHandler (void){
20000d38:	b580      	push	{r7, lr}
20000d3a:	af00      	add	r7, sp, #0

	IMU_offset = IMU_temp_offset;
20000d3c:	f643 4348 	movw	r3, #15432	; 0x3c48
20000d40:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d44:	e9d3 0100 	ldrd	r0, r1, [r3]
20000d48:	f643 5360 	movw	r3, #15712	; 0x3d60
20000d4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d50:	e9c3 0100 	strd	r0, r1, [r3]
	MSS_GPIO_clear_irq(MSS_GPIO_0);
20000d54:	f04f 0000 	mov.w	r0, #0
20000d58:	f001 fb32 	bl	200023c0 <MSS_GPIO_clear_irq>
}
20000d5c:	bd80      	pop	{r7, pc}
20000d5e:	bf00      	nop

20000d60 <GPIO1_IRQHandler>:

// Interrupts for Mode cycling (Pin J21)
void GPIO1_IRQHandler (void){
20000d60:	b580      	push	{r7, lr}
20000d62:	af00      	add	r7, sp, #0

	current_mode += 1;
20000d64:	f643 4338 	movw	r3, #15416	; 0x3c38
20000d68:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d6c:	781b      	ldrb	r3, [r3, #0]
20000d6e:	f103 0301 	add.w	r3, r3, #1
20000d72:	b2da      	uxtb	r2, r3
20000d74:	f643 4338 	movw	r3, #15416	; 0x3c38
20000d78:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d7c:	701a      	strb	r2, [r3, #0]
	current_mode %= 3;
20000d7e:	f643 4338 	movw	r3, #15416	; 0x3c38
20000d82:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d86:	781a      	ldrb	r2, [r3, #0]
20000d88:	f64a 23ab 	movw	r3, #43691	; 0xaaab
20000d8c:	f6ca 23aa 	movt	r3, #43690	; 0xaaaa
20000d90:	fba3 1302 	umull	r1, r3, r3, r2
20000d94:	ea4f 0153 	mov.w	r1, r3, lsr #1
20000d98:	460b      	mov	r3, r1
20000d9a:	ea4f 0343 	mov.w	r3, r3, lsl #1
20000d9e:	440b      	add	r3, r1
20000da0:	ebc3 0302 	rsb	r3, r3, r2
20000da4:	b2da      	uxtb	r2, r3
20000da6:	f643 4338 	movw	r3, #15416	; 0x3c38
20000daa:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000dae:	701a      	strb	r2, [r3, #0]
	MSS_GPIO_clear_irq(MSS_GPIO_1);
20000db0:	f04f 0001 	mov.w	r0, #1
20000db4:	f001 fb04 	bl	200023c0 <MSS_GPIO_clear_irq>
}
20000db8:	bd80      	pop	{r7, pc}
20000dba:	bf00      	nop

20000dbc <write_scaled_LEDs>:


// Write to LEDs with brightness scaled on the distance
void write_scaled_LEDs(){
20000dbc:	b590      	push	{r4, r7, lr}
20000dbe:	b083      	sub	sp, #12
20000dc0:	af00      	add	r7, sp, #0
	// Write to LEDs
	int i;
	for(i = 0; i < NUMLEDS; ++i){
20000dc2:	f04f 0300 	mov.w	r3, #0
20000dc6:	607b      	str	r3, [r7, #4]
20000dc8:	e03d      	b.n	20000e46 <write_scaled_LEDs+0x8a>
		if (i >= LED_num && i < LED_num + DISPLAY_POINT_WIDTH)
20000dca:	f643 4330 	movw	r3, #15408	; 0x3c30
20000dce:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000dd2:	681b      	ldr	r3, [r3, #0]
20000dd4:	687a      	ldr	r2, [r7, #4]
20000dd6:	429a      	cmp	r2, r3
20000dd8:	db25      	blt.n	20000e26 <write_scaled_LEDs+0x6a>
20000dda:	f643 4330 	movw	r3, #15408	; 0x3c30
20000dde:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000de2:	681b      	ldr	r3, [r3, #0]
20000de4:	f103 0202 	add.w	r2, r3, #2
20000de8:	687b      	ldr	r3, [r7, #4]
20000dea:	429a      	cmp	r2, r3
20000dec:	dd1b      	ble.n	20000e26 <write_scaled_LEDs+0x6a>
			LED[i] = scale_brightness_dist(color, cm_dist);
20000dee:	f643 3310 	movw	r3, #15120	; 0x3b10
20000df2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000df6:	681a      	ldr	r2, [r3, #0]
20000df8:	687b      	ldr	r3, [r7, #4]
20000dfa:	ea4f 0383 	mov.w	r3, r3, lsl #2
20000dfe:	eb02 0403 	add.w	r4, r2, r3
20000e02:	f643 5358 	movw	r3, #15704	; 0x3d58
20000e06:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e0a:	681b      	ldr	r3, [r3, #0]
20000e0c:	461a      	mov	r2, r3
20000e0e:	f643 4340 	movw	r3, #15424	; 0x3c40
20000e12:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e16:	681b      	ldr	r3, [r3, #0]
20000e18:	4610      	mov	r0, r2
20000e1a:	4619      	mov	r1, r3
20000e1c:	f7ff fee4 	bl	20000be8 <scale_brightness_dist>
20000e20:	4603      	mov	r3, r0
20000e22:	6023      	str	r3, [r4, #0]
// Write to LEDs with brightness scaled on the distance
void write_scaled_LEDs(){
	// Write to LEDs
	int i;
	for(i = 0; i < NUMLEDS; ++i){
		if (i >= LED_num && i < LED_num + DISPLAY_POINT_WIDTH)
20000e24:	e00b      	b.n	20000e3e <write_scaled_LEDs+0x82>
			LED[i] = scale_brightness_dist(color, cm_dist);
		else
			LED[i] = off;
20000e26:	f643 3310 	movw	r3, #15120	; 0x3b10
20000e2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e2e:	681a      	ldr	r2, [r3, #0]
20000e30:	687b      	ldr	r3, [r7, #4]
20000e32:	ea4f 0383 	mov.w	r3, r3, lsl #2
20000e36:	4413      	add	r3, r2
20000e38:	f04f 0200 	mov.w	r2, #0
20000e3c:	601a      	str	r2, [r3, #0]

// Write to LEDs with brightness scaled on the distance
void write_scaled_LEDs(){
	// Write to LEDs
	int i;
	for(i = 0; i < NUMLEDS; ++i){
20000e3e:	687b      	ldr	r3, [r7, #4]
20000e40:	f103 0301 	add.w	r3, r3, #1
20000e44:	607b      	str	r3, [r7, #4]
20000e46:	687b      	ldr	r3, [r7, #4]
20000e48:	2b17      	cmp	r3, #23
20000e4a:	ddbe      	ble.n	20000dca <write_scaled_LEDs+0xe>
		if (i >= LED_num && i < LED_num + DISPLAY_POINT_WIDTH)
			LED[i] = scale_brightness_dist(color, cm_dist);
		else
			LED[i] = off;
	}
}
20000e4c:	f107 070c 	add.w	r7, r7, #12
20000e50:	46bd      	mov	sp, r7
20000e52:	bd90      	pop	{r4, r7, pc}

20000e54 <standard_execute>:

// Standard cane style behavior
void standard_execute(){
20000e54:	b598      	push	{r3, r4, r7, lr}
20000e56:	af00      	add	r7, sp, #0

	if(get_max_temp(temps) > 42.00)
20000e58:	f643 4050 	movw	r0, #15440	; 0x3c50
20000e5c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000e60:	f7ff fc46 	bl	200006f0 <get_max_temp>
20000e64:	4603      	mov	r3, r0
20000e66:	f04f 0200 	mov.w	r2, #0
20000e6a:	4614      	mov	r4, r2
20000e6c:	4618      	mov	r0, r3
20000e6e:	498f      	ldr	r1, [pc, #572]	; (200010ac <standard_execute+0x258>)
20000e70:	f002 fa54 	bl	2000331c <__aeabi_fcmpgt>
20000e74:	4603      	mov	r3, r0
20000e76:	2b00      	cmp	r3, #0
20000e78:	d002      	beq.n	20000e80 <standard_execute+0x2c>
20000e7a:	f04f 0301 	mov.w	r3, #1
20000e7e:	461c      	mov	r4, r3
20000e80:	b2e3      	uxtb	r3, r4
20000e82:	2b00      	cmp	r3, #0
20000e84:	d007      	beq.n	20000e96 <standard_execute+0x42>
		color = red;
20000e86:	f643 5358 	movw	r3, #15704	; 0x3d58
20000e8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e8e:	f44f 427f 	mov.w	r2, #65280	; 0xff00
20000e92:	601a      	str	r2, [r3, #0]
20000e94:	e064      	b.n	20000f60 <standard_execute+0x10c>
	else if((temps[3][3] > 26.00 || temps[4][4] > 26.00) && (temps[3][3] < 35.00 || temps[4][4] < 35.00))
20000e96:	f643 4350 	movw	r3, #15440	; 0x3c50
20000e9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
20000ea0:	f04f 0200 	mov.w	r2, #0
20000ea4:	4614      	mov	r4, r2
20000ea6:	4618      	mov	r0, r3
20000ea8:	4981      	ldr	r1, [pc, #516]	; (200010b0 <standard_execute+0x25c>)
20000eaa:	f002 fa37 	bl	2000331c <__aeabi_fcmpgt>
20000eae:	4603      	mov	r3, r0
20000eb0:	2b00      	cmp	r3, #0
20000eb2:	d002      	beq.n	20000eba <standard_execute+0x66>
20000eb4:	f04f 0301 	mov.w	r3, #1
20000eb8:	461c      	mov	r4, r3
20000eba:	b2e3      	uxtb	r3, r4
20000ebc:	2b00      	cmp	r3, #0
20000ebe:	d115      	bne.n	20000eec <standard_execute+0x98>
20000ec0:	f643 4350 	movw	r3, #15440	; 0x3c50
20000ec4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
20000ecc:	f04f 0200 	mov.w	r2, #0
20000ed0:	4614      	mov	r4, r2
20000ed2:	4618      	mov	r0, r3
20000ed4:	4976      	ldr	r1, [pc, #472]	; (200010b0 <standard_execute+0x25c>)
20000ed6:	f002 fa21 	bl	2000331c <__aeabi_fcmpgt>
20000eda:	4603      	mov	r3, r0
20000edc:	2b00      	cmp	r3, #0
20000ede:	d002      	beq.n	20000ee6 <standard_execute+0x92>
20000ee0:	f04f 0301 	mov.w	r3, #1
20000ee4:	461c      	mov	r4, r3
20000ee6:	b2e3      	uxtb	r3, r4
20000ee8:	2b00      	cmp	r3, #0
20000eea:	d032      	beq.n	20000f52 <standard_execute+0xfe>
20000eec:	f643 4350 	movw	r3, #15440	; 0x3c50
20000ef0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ef4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
20000ef6:	f04f 0200 	mov.w	r2, #0
20000efa:	4614      	mov	r4, r2
20000efc:	4618      	mov	r0, r3
20000efe:	496d      	ldr	r1, [pc, #436]	; (200010b4 <standard_execute+0x260>)
20000f00:	f002 f9ee 	bl	200032e0 <__aeabi_fcmplt>
20000f04:	4603      	mov	r3, r0
20000f06:	2b00      	cmp	r3, #0
20000f08:	d002      	beq.n	20000f10 <standard_execute+0xbc>
20000f0a:	f04f 0301 	mov.w	r3, #1
20000f0e:	461c      	mov	r4, r3
20000f10:	b2e3      	uxtb	r3, r4
20000f12:	2b00      	cmp	r3, #0
20000f14:	d115      	bne.n	20000f42 <standard_execute+0xee>
20000f16:	f643 4350 	movw	r3, #15440	; 0x3c50
20000f1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
20000f22:	f04f 0200 	mov.w	r2, #0
20000f26:	4614      	mov	r4, r2
20000f28:	4618      	mov	r0, r3
20000f2a:	4962      	ldr	r1, [pc, #392]	; (200010b4 <standard_execute+0x260>)
20000f2c:	f002 f9d8 	bl	200032e0 <__aeabi_fcmplt>
20000f30:	4603      	mov	r3, r0
20000f32:	2b00      	cmp	r3, #0
20000f34:	d002      	beq.n	20000f3c <standard_execute+0xe8>
20000f36:	f04f 0301 	mov.w	r3, #1
20000f3a:	461c      	mov	r4, r3
20000f3c:	b2e3      	uxtb	r3, r4
20000f3e:	2b00      	cmp	r3, #0
20000f40:	d007      	beq.n	20000f52 <standard_execute+0xfe>
		color = yellow;
20000f42:	f643 5358 	movw	r3, #15704	; 0x3d58
20000f46:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000f4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
20000f4e:	601a      	str	r2, [r3, #0]
// Standard cane style behavior
void standard_execute(){

	if(get_max_temp(temps) > 42.00)
		color = red;
	else if((temps[3][3] > 26.00 || temps[4][4] > 26.00) && (temps[3][3] < 35.00 || temps[4][4] < 35.00))
20000f50:	e006      	b.n	20000f60 <standard_execute+0x10c>
		color = yellow;
	else
		color = green;
20000f52:	f643 5358 	movw	r3, #15704	; 0x3d58
20000f56:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000f5a:	f04f 02ff 	mov.w	r2, #255	; 0xff
20000f5e:	601a      	str	r2, [r3, #0]

	// IMUs: read and calculate angle at which to display
	set_heading_baseline = 0;
20000f60:	f643 3318 	movw	r3, #15128	; 0x3b18
20000f64:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000f68:	f04f 0200 	mov.w	r2, #0
20000f6c:	701a      	strb	r2, [r3, #0]
	if (display_angle < -DISPLAY_FOV/2 || display_angle >= DISPLAY_FOV/2){
20000f6e:	f643 5350 	movw	r3, #15696	; 0x3d50
20000f72:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000f76:	e9d3 2300 	ldrd	r2, r3, [r3]
20000f7a:	f04f 0100 	mov.w	r1, #0
20000f7e:	460c      	mov	r4, r1
20000f80:	4610      	mov	r0, r2
20000f82:	4619      	mov	r1, r3
20000f84:	f04f 0200 	mov.w	r2, #0
20000f88:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
20000f8c:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
20000f90:	f001 fe8a 	bl	20002ca8 <__aeabi_dcmplt>
20000f94:	4603      	mov	r3, r0
20000f96:	2b00      	cmp	r3, #0
20000f98:	d002      	beq.n	20000fa0 <standard_execute+0x14c>
20000f9a:	f04f 0301 	mov.w	r3, #1
20000f9e:	461c      	mov	r4, r3
20000fa0:	b2e3      	uxtb	r3, r4
20000fa2:	2b00      	cmp	r3, #0
20000fa4:	d11b      	bne.n	20000fde <standard_execute+0x18a>
20000fa6:	f643 5350 	movw	r3, #15696	; 0x3d50
20000faa:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000fae:	e9d3 2300 	ldrd	r2, r3, [r3]
20000fb2:	f04f 0100 	mov.w	r1, #0
20000fb6:	460c      	mov	r4, r1
20000fb8:	4610      	mov	r0, r2
20000fba:	4619      	mov	r1, r3
20000fbc:	f04f 0200 	mov.w	r2, #0
20000fc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
20000fc4:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
20000fc8:	f001 fe82 	bl	20002cd0 <__aeabi_dcmpge>
20000fcc:	4603      	mov	r3, r0
20000fce:	2b00      	cmp	r3, #0
20000fd0:	d002      	beq.n	20000fd8 <standard_execute+0x184>
20000fd2:	f04f 0301 	mov.w	r3, #1
20000fd6:	461c      	mov	r4, r3
20000fd8:	b2e3      	uxtb	r3, r4
20000fda:	2b00      	cmp	r3, #0
20000fdc:	d02b      	beq.n	20001036 <standard_execute+0x1e2>
		LED_num = display_angle < 0 ? NUMLEDS-1 : 0 - (DISPLAY_POINT_WIDTH-1);
20000fde:	f643 5350 	movw	r3, #15696	; 0x3d50
20000fe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
20000fea:	f04f 0100 	mov.w	r1, #0
20000fee:	460c      	mov	r4, r1
20000ff0:	4610      	mov	r0, r2
20000ff2:	4619      	mov	r1, r3
20000ff4:	f04f 0200 	mov.w	r2, #0
20000ff8:	f04f 0300 	mov.w	r3, #0
20000ffc:	f001 fe54 	bl	20002ca8 <__aeabi_dcmplt>
20001000:	4603      	mov	r3, r0
20001002:	2b00      	cmp	r3, #0
20001004:	d002      	beq.n	2000100c <standard_execute+0x1b8>
20001006:	f04f 0301 	mov.w	r3, #1
2000100a:	461c      	mov	r4, r3
2000100c:	b2e3      	uxtb	r3, r4
2000100e:	2b00      	cmp	r3, #0
20001010:	d002      	beq.n	20001018 <standard_execute+0x1c4>
20001012:	f04f 0217 	mov.w	r2, #23
20001016:	e001      	b.n	2000101c <standard_execute+0x1c8>
20001018:	f04f 32ff 	mov.w	r2, #4294967295
2000101c:	f643 4330 	movw	r3, #15408	; 0x3c30
20001020:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001024:	601a      	str	r2, [r3, #0]
		color = red;
20001026:	f643 5358 	movw	r3, #15704	; 0x3d58
2000102a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000102e:	f44f 427f 	mov.w	r2, #65280	; 0xff00
20001032:	601a      	str	r2, [r3, #0]
	else
		color = green;

	// IMUs: read and calculate angle at which to display
	set_heading_baseline = 0;
	if (display_angle < -DISPLAY_FOV/2 || display_angle >= DISPLAY_FOV/2){
20001034:	e029      	b.n	2000108a <standard_execute+0x236>
		LED_num = display_angle < 0 ? NUMLEDS-1 : 0 - (DISPLAY_POINT_WIDTH-1);
		color = red;
	}
	else
		LED_num = (NUMLEDS-1) - (int)(display_angle/(DISPLAY_FOV/NUMLEDS) + NUMLEDS/2);
20001036:	f643 5350 	movw	r3, #15696	; 0x3d50
2000103a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000103e:	e9d3 2300 	ldrd	r2, r3, [r3]
20001042:	4610      	mov	r0, r2
20001044:	4619      	mov	r1, r3
20001046:	f04f 0200 	mov.w	r2, #0
2000104a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
2000104e:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
20001052:	f001 fce1 	bl	20002a18 <__aeabi_ddiv>
20001056:	4602      	mov	r2, r0
20001058:	460b      	mov	r3, r1
2000105a:	4610      	mov	r0, r2
2000105c:	4619      	mov	r1, r3
2000105e:	f04f 0200 	mov.w	r2, #0
20001062:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
20001066:	f503 1320 	add.w	r3, r3, #2621440	; 0x280000
2000106a:	f001 f9f9 	bl	20002460 <__adddf3>
2000106e:	4602      	mov	r2, r0
20001070:	460b      	mov	r3, r1
20001072:	4610      	mov	r0, r2
20001074:	4619      	mov	r1, r3
20001076:	f001 fe3f 	bl	20002cf8 <__aeabi_d2iz>
2000107a:	4603      	mov	r3, r0
2000107c:	f1c3 0217 	rsb	r2, r3, #23
20001080:	f643 4330 	movw	r3, #15408	; 0x3c30
20001084:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001088:	601a      	str	r2, [r3, #0]

	cm_dist = data_to_cm(SONIC_DATA);
2000108a:	f643 433c 	movw	r3, #15420	; 0x3c3c
2000108e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001092:	681b      	ldr	r3, [r3, #0]
20001094:	4618      	mov	r0, r3
20001096:	f7ff fb8d 	bl	200007b4 <data_to_cm>
2000109a:	4602      	mov	r2, r0
2000109c:	f643 4340 	movw	r3, #15424	; 0x3c40
200010a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200010a4:	601a      	str	r2, [r3, #0]

	write_scaled_LEDs();
200010a6:	f7ff fe89 	bl	20000dbc <write_scaled_LEDs>

}
200010aa:	bd98      	pop	{r3, r4, r7, pc}
200010ac:	42280000 	.word	0x42280000
200010b0:	41d00000 	.word	0x41d00000
200010b4:	420c0000 	.word	0x420c0000

200010b8 <main>:
void compass_execute(){

}


int main(){
200010b8:	b580      	push	{r7, lr}
200010ba:	b0a2      	sub	sp, #136	; 0x88
200010bc:	af00      	add	r7, sp, #0
	// Setup
	LED_reset(LED);
200010be:	f643 3310 	movw	r3, #15120	; 0x3b10
200010c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200010c6:	681b      	ldr	r3, [r3, #0]
200010c8:	4618      	mov	r0, r3
200010ca:	f7ff fb57 	bl	2000077c <LED_reset>
	current_mode = STANDARD;
200010ce:	f643 4338 	movw	r3, #15416	; 0x3c38
200010d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200010d6:	f04f 0200 	mov.w	r2, #0
200010da:	701a      	strb	r2, [r3, #0]
	// Initialize GPIO for interrupts
	MSS_GPIO_init();
200010dc:	f001 f8ea 	bl	200022b4 <MSS_GPIO_init>
	MSS_GPIO_config( MSS_GPIO_0, MSS_GPIO_INPUT_MODE | MSS_GPIO_IRQ_EDGE_POSITIVE );
200010e0:	f04f 0000 	mov.w	r0, #0
200010e4:	f04f 0142 	mov.w	r1, #66	; 0x42
200010e8:	f001 f91a 	bl	20002320 <MSS_GPIO_config>
	MSS_GPIO_config( MSS_GPIO_1, MSS_GPIO_INPUT_MODE | MSS_GPIO_IRQ_EDGE_POSITIVE );
200010ec:	f04f 0001 	mov.w	r0, #1
200010f0:	f04f 0142 	mov.w	r1, #66	; 0x42
200010f4:	f001 f914 	bl	20002320 <MSS_GPIO_config>
	MSS_GPIO_enable_irq( MSS_GPIO_0 );
200010f8:	f04f 0000 	mov.w	r0, #0
200010fc:	f001 f92e 	bl	2000235c <MSS_GPIO_enable_irq>
	MSS_GPIO_enable_irq( MSS_GPIO_1 );
20001100:	f04f 0001 	mov.w	r0, #1
20001104:	f001 f92a 	bl	2000235c <MSS_GPIO_enable_irq>
	// Initialize with a clock frequency of ~ 400kHz
	MSS_I2C_init(&g_mss_i2c1 , 0x0, MSS_I2C_PCLK_DIV_256 );
20001108:	f643 602c 	movw	r0, #15916	; 0x3e2c
2000110c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001110:	f04f 0100 	mov.w	r1, #0
20001114:	f04f 0200 	mov.w	r2, #0
20001118:	f000 f9ca 	bl	200014b0 <MSS_I2C_init>
	gridEYE_init();
2000111c:	f7ff fa6e 	bl	200005fc <gridEYE_init>
	if (init_BNO055(WAND_IMU_ADDR)) assert("IMU init error");
20001120:	f04f 0028 	mov.w	r0, #40	; 0x28
20001124:	f7ff fc0c 	bl	20000940 <init_BNO055>
	if (init_BNO055(GLASSES_IMU_ADDR)) assert("IMU init error");
20001128:	f04f 0029 	mov.w	r0, #41	; 0x29
2000112c:	f7ff fc08 	bl	20000940 <init_BNO055>
	IMU_offset = 0;
20001130:	f643 5360 	movw	r3, #15712	; 0x3d60
20001134:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001138:	f04f 0000 	mov.w	r0, #0
2000113c:	f04f 0100 	mov.w	r1, #0
20001140:	e9c3 0100 	strd	r0, r1, [r3]


	// Base pixel register is 0x80
	uint8_t pixel_addr[] = {0x80};
20001144:	f06f 037f 	mvn.w	r3, #127	; 0x7f
20001148:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
	uint8_t pixel_data[128] = {0};
2000114c:	f107 0204 	add.w	r2, r7, #4
20001150:	f04f 0380 	mov.w	r3, #128	; 0x80
20001154:	4610      	mov	r0, r2
20001156:	f04f 0100 	mov.w	r1, #0
2000115a:	461a      	mov	r2, r3
2000115c:	f002 f916 	bl	2000338c <memset>


	// Loop variables
	while( 1 ) {
		// Hold off interrupts during I2C communication
		NVIC_DisableIRQ(32);
20001160:	f04f 0020 	mov.w	r0, #32
20001164:	f7ff f9b8 	bl	200004d8 <NVIC_DisableIRQ>
		NVIC_DisableIRQ(33);
20001168:	f04f 0021 	mov.w	r0, #33	; 0x21
2000116c:	f7ff f9b4 	bl	200004d8 <NVIC_DisableIRQ>

		// Get data from all sensors
		gridEYE_read(pixel_addr, pixel_data);
20001170:	f107 0284 	add.w	r2, r7, #132	; 0x84
20001174:	f107 0304 	add.w	r3, r7, #4
20001178:	4610      	mov	r0, r2
2000117a:	4619      	mov	r1, r3
2000117c:	f7ff f9f2 	bl	20000564 <gridEYE_read>
		display_angle = calc_display_angle(GLASSES_IMU_ADDR, WAND_IMU_ADDR, set_heading_baseline) - IMU_offset;
20001180:	f643 3318 	movw	r3, #15128	; 0x3b18
20001184:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001188:	781b      	ldrb	r3, [r3, #0]
2000118a:	b2db      	uxtb	r3, r3
2000118c:	f04f 0029 	mov.w	r0, #41	; 0x29
20001190:	f04f 0128 	mov.w	r1, #40	; 0x28
20001194:	461a      	mov	r2, r3
20001196:	f7ff fc79 	bl	20000a8c <calc_display_angle>
2000119a:	f643 5360 	movw	r3, #15712	; 0x3d60
2000119e:	f2c2 0300 	movt	r3, #8192	; 0x2000
200011a2:	e9d3 2300 	ldrd	r2, r3, [r3]
200011a6:	f001 f959 	bl	2000245c <__aeabi_dsub>
200011aa:	4602      	mov	r2, r0
200011ac:	460b      	mov	r3, r1
200011ae:	4610      	mov	r0, r2
200011b0:	4619      	mov	r1, r3
200011b2:	f643 5350 	movw	r3, #15696	; 0x3d50
200011b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200011ba:	e9c3 0100 	strd	r0, r1, [r3]


		NVIC_EnableIRQ(32);
200011be:	f04f 0020 	mov.w	r0, #32
200011c2:	f7ff f96d 	bl	200004a0 <NVIC_EnableIRQ>
		NVIC_EnableIRQ(33);
200011c6:	f04f 0021 	mov.w	r0, #33	; 0x21
200011ca:	f7ff f969 	bl	200004a0 <NVIC_EnableIRQ>

		IMU_temp_offset = display_angle + IMU_offset;
200011ce:	f643 5350 	movw	r3, #15696	; 0x3d50
200011d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200011d6:	e9d3 0100 	ldrd	r0, r1, [r3]
200011da:	f643 5360 	movw	r3, #15712	; 0x3d60
200011de:	f2c2 0300 	movt	r3, #8192	; 0x2000
200011e2:	e9d3 2300 	ldrd	r2, r3, [r3]
200011e6:	f001 f93b 	bl	20002460 <__adddf3>
200011ea:	4602      	mov	r2, r0
200011ec:	460b      	mov	r3, r1
200011ee:	4610      	mov	r0, r2
200011f0:	4619      	mov	r1, r3
200011f2:	f643 4348 	movw	r3, #15432	; 0x3c48
200011f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200011fa:	e9c3 0100 	strd	r0, r1, [r3]
		SONIC_DATA = *SONIC_READ;
200011fe:	f643 3314 	movw	r3, #15124	; 0x3b14
20001202:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001206:	681b      	ldr	r3, [r3, #0]
20001208:	681a      	ldr	r2, [r3, #0]
2000120a:	f643 433c 	movw	r3, #15420	; 0x3c3c
2000120e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001212:	601a      	str	r2, [r3, #0]

		get_temps_forward(pixel_data, temps);
20001214:	f107 0304 	add.w	r3, r7, #4
20001218:	4618      	mov	r0, r3
2000121a:	f643 4150 	movw	r1, #15440	; 0x3c50
2000121e:	f2c2 0100 	movt	r1, #8192	; 0x2000
20001222:	f7ff fa1d 	bl	20000660 <get_temps_forward>

		switch(current_mode){
20001226:	f643 4338 	movw	r3, #15416	; 0x3c38
2000122a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000122e:	781b      	ldrb	r3, [r3, #0]
20001230:	2b01      	cmp	r3, #1
20001232:	d006      	beq.n	20001242 <main+0x18a>
20001234:	2b02      	cmp	r3, #2
20001236:	d005      	beq.n	20001244 <main+0x18c>
20001238:	2b00      	cmp	r3, #0
2000123a:	d104      	bne.n	20001246 <main+0x18e>
			case STANDARD:
				standard_execute();
2000123c:	f7ff fe0a 	bl	20000e54 <standard_execute>
				break;
20001240:	e004      	b.n	2000124c <main+0x194>
			case SPECTRUM:
				break;
20001242:	e003      	b.n	2000124c <main+0x194>
			case COMPASS:
				break;
20001244:	e002      	b.n	2000124c <main+0x194>
			default:
				standard_execute();
20001246:	f7ff fe05 	bl	20000e54 <standard_execute>
		}


		//gridEYE_print(temps);

	}//while(1)
2000124a:	e789      	b.n	20001160 <main+0xa8>
2000124c:	e788      	b.n	20001160 <main+0xa8>
2000124e:	bf00      	nop

20001250 <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20001250:	b480      	push	{r7}
20001252:	b083      	sub	sp, #12
20001254:	af00      	add	r7, sp, #0
20001256:	4603      	mov	r3, r0
20001258:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
2000125a:	f24e 1300 	movw	r3, #57600	; 0xe100
2000125e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001262:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20001266:	ea4f 1252 	mov.w	r2, r2, lsr #5
2000126a:	88f9      	ldrh	r1, [r7, #6]
2000126c:	f001 011f 	and.w	r1, r1, #31
20001270:	f04f 0001 	mov.w	r0, #1
20001274:	fa00 f101 	lsl.w	r1, r0, r1
20001278:	f102 0260 	add.w	r2, r2, #96	; 0x60
2000127c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20001280:	f107 070c 	add.w	r7, r7, #12
20001284:	46bd      	mov	sp, r7
20001286:	bc80      	pop	{r7}
20001288:	4770      	bx	lr
2000128a:	bf00      	nop

2000128c <MSS_UART_isr>:
static void
MSS_UART_isr
(
    mss_uart_instance_t * this_uart
)
{
2000128c:	b580      	push	{r7, lr}
2000128e:	b084      	sub	sp, #16
20001290:	af00      	add	r7, sp, #0
20001292:	6078      	str	r0, [r7, #4]
    uint8_t iirf;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20001294:	687a      	ldr	r2, [r7, #4]
20001296:	f643 5390 	movw	r3, #15760	; 0x3d90
2000129a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000129e:	429a      	cmp	r2, r3
200012a0:	d007      	beq.n	200012b2 <MSS_UART_isr+0x26>
200012a2:	687a      	ldr	r2, [r7, #4]
200012a4:	f643 5368 	movw	r3, #15720	; 0x3d68
200012a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200012ac:	429a      	cmp	r2, r3
200012ae:	d000      	beq.n	200012b2 <MSS_UART_isr+0x26>
200012b0:	be00      	bkpt	0x0000

    if ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) )
200012b2:	687a      	ldr	r2, [r7, #4]
200012b4:	f643 5390 	movw	r3, #15760	; 0x3d90
200012b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200012bc:	429a      	cmp	r2, r3
200012be:	d006      	beq.n	200012ce <MSS_UART_isr+0x42>
200012c0:	687a      	ldr	r2, [r7, #4]
200012c2:	f643 5368 	movw	r3, #15720	; 0x3d68
200012c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200012ca:	429a      	cmp	r2, r3
200012cc:	d167      	bne.n	2000139e <MSS_UART_isr+0x112>
    {
        iirf = this_uart->hw_reg->IIR & IIRF_MASK;
200012ce:	687b      	ldr	r3, [r7, #4]
200012d0:	681b      	ldr	r3, [r3, #0]
200012d2:	7a1b      	ldrb	r3, [r3, #8]
200012d4:	b2db      	uxtb	r3, r3
200012d6:	f003 030f 	and.w	r3, r3, #15
200012da:	73fb      	strb	r3, [r7, #15]

        switch ( iirf )
200012dc:	7bfb      	ldrb	r3, [r7, #15]
200012de:	2b0c      	cmp	r3, #12
200012e0:	d854      	bhi.n	2000138c <MSS_UART_isr+0x100>
200012e2:	a201      	add	r2, pc, #4	; (adr r2, 200012e8 <MSS_UART_isr+0x5c>)
200012e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
200012e8:	2000131d 	.word	0x2000131d
200012ec:	2000138d 	.word	0x2000138d
200012f0:	20001339 	.word	0x20001339
200012f4:	2000138d 	.word	0x2000138d
200012f8:	20001355 	.word	0x20001355
200012fc:	2000138d 	.word	0x2000138d
20001300:	20001371 	.word	0x20001371
20001304:	2000138d 	.word	0x2000138d
20001308:	2000138d 	.word	0x2000138d
2000130c:	2000138d 	.word	0x2000138d
20001310:	2000138d 	.word	0x2000138d
20001314:	2000138d 	.word	0x2000138d
20001318:	20001355 	.word	0x20001355
        {
            case IIRF_MODEM_STATUS:  /* Modem status interrupt */
            {
                ASSERT( NULL_HANDLER != this_uart->modemsts_handler );
2000131c:	687b      	ldr	r3, [r7, #4]
2000131e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001320:	2b00      	cmp	r3, #0
20001322:	d100      	bne.n	20001326 <MSS_UART_isr+0x9a>
20001324:	be00      	bkpt	0x0000
                if( NULL_HANDLER != this_uart->modemsts_handler )
20001326:	687b      	ldr	r3, [r7, #4]
20001328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000132a:	2b00      	cmp	r3, #0
2000132c:	d030      	beq.n	20001390 <MSS_UART_isr+0x104>
                {
                   (*(this_uart->modemsts_handler))( this_uart );
2000132e:	687b      	ldr	r3, [r7, #4]
20001330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001332:	6878      	ldr	r0, [r7, #4]
20001334:	4798      	blx	r3
                }
            }
            break;
20001336:	e032      	b.n	2000139e <MSS_UART_isr+0x112>

            case IIRF_THRE: /* Transmitter Holding Register Empty */
            {
                ASSERT( NULL_HANDLER != this_uart->tx_handler );
20001338:	687b      	ldr	r3, [r7, #4]
2000133a:	6a1b      	ldr	r3, [r3, #32]
2000133c:	2b00      	cmp	r3, #0
2000133e:	d100      	bne.n	20001342 <MSS_UART_isr+0xb6>
20001340:	be00      	bkpt	0x0000
                if ( NULL_HANDLER != this_uart->tx_handler )
20001342:	687b      	ldr	r3, [r7, #4]
20001344:	6a1b      	ldr	r3, [r3, #32]
20001346:	2b00      	cmp	r3, #0
20001348:	d024      	beq.n	20001394 <MSS_UART_isr+0x108>
                {
                    (*(this_uart->tx_handler))( this_uart );
2000134a:	687b      	ldr	r3, [r7, #4]
2000134c:	6a1b      	ldr	r3, [r3, #32]
2000134e:	6878      	ldr	r0, [r7, #4]
20001350:	4798      	blx	r3
                }
            }
            break;
20001352:	e024      	b.n	2000139e <MSS_UART_isr+0x112>

            case IIRF_RX_DATA:      /* Received Data Available */
            case IIRF_DATA_TIMEOUT: /* Received Data Timed-out */
            {
                ASSERT( NULL_HANDLER != this_uart->rx_handler );
20001354:	687b      	ldr	r3, [r7, #4]
20001356:	69db      	ldr	r3, [r3, #28]
20001358:	2b00      	cmp	r3, #0
2000135a:	d100      	bne.n	2000135e <MSS_UART_isr+0xd2>
2000135c:	be00      	bkpt	0x0000
                if ( NULL_HANDLER != this_uart->rx_handler )
2000135e:	687b      	ldr	r3, [r7, #4]
20001360:	69db      	ldr	r3, [r3, #28]
20001362:	2b00      	cmp	r3, #0
20001364:	d018      	beq.n	20001398 <MSS_UART_isr+0x10c>
                {
                    (*(this_uart->rx_handler))( this_uart );
20001366:	687b      	ldr	r3, [r7, #4]
20001368:	69db      	ldr	r3, [r3, #28]
2000136a:	6878      	ldr	r0, [r7, #4]
2000136c:	4798      	blx	r3
                }
            }
            break;
2000136e:	e016      	b.n	2000139e <MSS_UART_isr+0x112>

            case IIRF_RX_LINE_STATUS:  /* Line Status Interrupt */
            {
                ASSERT( NULL_HANDLER != this_uart->linests_handler );
20001370:	687b      	ldr	r3, [r7, #4]
20001372:	699b      	ldr	r3, [r3, #24]
20001374:	2b00      	cmp	r3, #0
20001376:	d100      	bne.n	2000137a <MSS_UART_isr+0xee>
20001378:	be00      	bkpt	0x0000
                if ( NULL_HANDLER != this_uart->linests_handler )
2000137a:	687b      	ldr	r3, [r7, #4]
2000137c:	699b      	ldr	r3, [r3, #24]
2000137e:	2b00      	cmp	r3, #0
20001380:	d00c      	beq.n	2000139c <MSS_UART_isr+0x110>
                {
                   (*(this_uart->linests_handler))( this_uart );
20001382:	687b      	ldr	r3, [r7, #4]
20001384:	699b      	ldr	r3, [r3, #24]
20001386:	6878      	ldr	r0, [r7, #4]
20001388:	4798      	blx	r3
                }
            }
            break;
2000138a:	e008      	b.n	2000139e <MSS_UART_isr+0x112>

            default:
            {
                ASSERT( INVALID_INTERRUPT );
2000138c:	be00      	bkpt	0x0000
2000138e:	e006      	b.n	2000139e <MSS_UART_isr+0x112>
                if( NULL_HANDLER != this_uart->modemsts_handler )
                {
                   (*(this_uart->modemsts_handler))( this_uart );
                }
            }
            break;
20001390:	bf00      	nop
20001392:	e004      	b.n	2000139e <MSS_UART_isr+0x112>
                if ( NULL_HANDLER != this_uart->tx_handler )
                {
                    (*(this_uart->tx_handler))( this_uart );
                }
            }
            break;
20001394:	bf00      	nop
20001396:	e002      	b.n	2000139e <MSS_UART_isr+0x112>
                if ( NULL_HANDLER != this_uart->rx_handler )
                {
                    (*(this_uart->rx_handler))( this_uart );
                }
            }
            break;
20001398:	bf00      	nop
2000139a:	e000      	b.n	2000139e <MSS_UART_isr+0x112>
                if ( NULL_HANDLER != this_uart->linests_handler )
                {
                   (*(this_uart->linests_handler))( this_uart );
                }
            }
            break;
2000139c:	bf00      	nop
                ASSERT( INVALID_INTERRUPT );
            }
            break;
        }
    }
}
2000139e:	f107 0710 	add.w	r7, r7, #16
200013a2:	46bd      	mov	sp, r7
200013a4:	bd80      	pop	{r7, pc}
200013a6:	bf00      	nop

200013a8 <UART0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART0_IRQHandler( void )
#else
void UART0_IRQHandler( void )
#endif
{
200013a8:	4668      	mov	r0, sp
200013aa:	f020 0107 	bic.w	r1, r0, #7
200013ae:	468d      	mov	sp, r1
200013b0:	b589      	push	{r0, r3, r7, lr}
200013b2:	af00      	add	r7, sp, #0
    MSS_UART_isr( &g_mss_uart0 );
200013b4:	f643 5090 	movw	r0, #15760	; 0x3d90
200013b8:	f2c2 0000 	movt	r0, #8192	; 0x2000
200013bc:	f7ff ff66 	bl	2000128c <MSS_UART_isr>
    NVIC_ClearPendingIRQ( UART0_IRQn );
200013c0:	f04f 000a 	mov.w	r0, #10
200013c4:	f7ff ff44 	bl	20001250 <NVIC_ClearPendingIRQ>
}
200013c8:	46bd      	mov	sp, r7
200013ca:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200013ce:	4685      	mov	sp, r0
200013d0:	4770      	bx	lr
200013d2:	bf00      	nop

200013d4 <UART1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART1_IRQHandler( void )
#else
void UART1_IRQHandler( void )
#endif
{
200013d4:	4668      	mov	r0, sp
200013d6:	f020 0107 	bic.w	r1, r0, #7
200013da:	468d      	mov	sp, r1
200013dc:	b589      	push	{r0, r3, r7, lr}
200013de:	af00      	add	r7, sp, #0
    MSS_UART_isr( &g_mss_uart1 );
200013e0:	f643 5068 	movw	r0, #15720	; 0x3d68
200013e4:	f2c2 0000 	movt	r0, #8192	; 0x2000
200013e8:	f7ff ff50 	bl	2000128c <MSS_UART_isr>
    NVIC_ClearPendingIRQ( UART1_IRQn );
200013ec:	f04f 000b 	mov.w	r0, #11
200013f0:	f7ff ff2e 	bl	20001250 <NVIC_ClearPendingIRQ>
}
200013f4:	46bd      	mov	sp, r7
200013f6:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200013fa:	4685      	mov	sp, r0
200013fc:	4770      	bx	lr
200013fe:	bf00      	nop

20001400 <NVIC_EnableIRQ>:
 *
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
20001400:	b480      	push	{r7}
20001402:	b083      	sub	sp, #12
20001404:	af00      	add	r7, sp, #0
20001406:	4603      	mov	r3, r0
20001408:	80fb      	strh	r3, [r7, #6]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
2000140a:	f24e 1300 	movw	r3, #57600	; 0xe100
2000140e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001412:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20001416:	ea4f 1252 	mov.w	r2, r2, lsr #5
2000141a:	88f9      	ldrh	r1, [r7, #6]
2000141c:	f001 011f 	and.w	r1, r1, #31
20001420:	f04f 0001 	mov.w	r0, #1
20001424:	fa00 f101 	lsl.w	r1, r0, r1
20001428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
2000142c:	f107 070c 	add.w	r7, r7, #12
20001430:	46bd      	mov	sp, r7
20001432:	bc80      	pop	{r7}
20001434:	4770      	bx	lr
20001436:	bf00      	nop

20001438 <NVIC_DisableIRQ>:
 * 
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
20001438:	b480      	push	{r7}
2000143a:	b083      	sub	sp, #12
2000143c:	af00      	add	r7, sp, #0
2000143e:	4603      	mov	r3, r0
20001440:	80fb      	strh	r3, [r7, #6]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
20001442:	f24e 1300 	movw	r3, #57600	; 0xe100
20001446:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000144a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
2000144e:	ea4f 1252 	mov.w	r2, r2, lsr #5
20001452:	88f9      	ldrh	r1, [r7, #6]
20001454:	f001 011f 	and.w	r1, r1, #31
20001458:	f04f 0001 	mov.w	r0, #1
2000145c:	fa00 f101 	lsl.w	r1, r0, r1
20001460:	f102 0220 	add.w	r2, r2, #32
20001464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20001468:	f107 070c 	add.w	r7, r7, #12
2000146c:	46bd      	mov	sp, r7
2000146e:	bc80      	pop	{r7}
20001470:	4770      	bx	lr
20001472:	bf00      	nop

20001474 <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20001474:	b480      	push	{r7}
20001476:	b083      	sub	sp, #12
20001478:	af00      	add	r7, sp, #0
2000147a:	4603      	mov	r3, r0
2000147c:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
2000147e:	f24e 1300 	movw	r3, #57600	; 0xe100
20001482:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001486:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
2000148a:	ea4f 1252 	mov.w	r2, r2, lsr #5
2000148e:	88f9      	ldrh	r1, [r7, #6]
20001490:	f001 011f 	and.w	r1, r1, #31
20001494:	f04f 0001 	mov.w	r0, #1
20001498:	fa00 f101 	lsl.w	r1, r0, r1
2000149c:	f102 0260 	add.w	r2, r2, #96	; 0x60
200014a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
200014a4:	f107 070c 	add.w	r7, r7, #12
200014a8:	46bd      	mov	sp, r7
200014aa:	bc80      	pop	{r7}
200014ac:	4770      	bx	lr
200014ae:	bf00      	nop

200014b0 <MSS_I2C_init>:
(
    mss_i2c_instance_t * this_i2c,
    uint8_t ser_address,
    mss_i2c_clock_divider_t ser_clock_speed
)
{
200014b0:	b580      	push	{r7, lr}
200014b2:	b084      	sub	sp, #16
200014b4:	af00      	add	r7, sp, #0
200014b6:	6078      	str	r0, [r7, #4]
200014b8:	4613      	mov	r3, r2
200014ba:	460a      	mov	r2, r1
200014bc:	70fa      	strb	r2, [r7, #3]
200014be:	70bb      	strb	r3, [r7, #2]
    uint32_t primask;
    uint_fast16_t clock_speed = (uint_fast16_t)ser_clock_speed;
200014c0:	78bb      	ldrb	r3, [r7, #2]
200014c2:	60fb      	str	r3, [r7, #12]
    
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
200014c4:	687a      	ldr	r2, [r7, #4]
200014c6:	f643 53b8 	movw	r3, #15800	; 0x3db8
200014ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
200014ce:	429a      	cmp	r2, r3
200014d0:	d007      	beq.n	200014e2 <MSS_I2C_init+0x32>
200014d2:	687a      	ldr	r2, [r7, #4]
200014d4:	f643 632c 	movw	r3, #15916	; 0x3e2c
200014d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200014dc:	429a      	cmp	r2, r3
200014de:	d000      	beq.n	200014e2 <MSS_I2C_init+0x32>
200014e0:	be00      	bkpt	0x0000
     * Initialize all items of the this_i2c data structure to zero. This
     * initializes all state variables to their init value. It relies on
     * the fact that NO_TRANSACTION, I2C_SUCCESS and I2C_RELEASE_BUS all
     * have an actual value of zero.
     */
    primask = disable_interrupts();
200014e2:	f000 fe63 	bl	200021ac <disable_interrupts>
200014e6:	4603      	mov	r3, r0
200014e8:	60bb      	str	r3, [r7, #8]
    memset(this_i2c, 0, sizeof(mss_i2c_instance_t));
200014ea:	6878      	ldr	r0, [r7, #4]
200014ec:	f04f 0100 	mov.w	r1, #0
200014f0:	f04f 0274 	mov.w	r2, #116	; 0x74
200014f4:	f001 ff4a 	bl	2000338c <memset>
    
    if ( this_i2c == &g_mss_i2c0 )
200014f8:	687a      	ldr	r2, [r7, #4]
200014fa:	f643 53b8 	movw	r3, #15800	; 0x3db8
200014fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001502:	429a      	cmp	r2, r3
20001504:	d12c      	bne.n	20001560 <MSS_I2C_init+0xb0>
    {
        this_i2c->irqn = I2C0_IRQn;
20001506:	687b      	ldr	r3, [r7, #4]
20001508:	f04f 020e 	mov.w	r2, #14
2000150c:	825a      	strh	r2, [r3, #18]
        this_i2c->hw_reg = I2C0;
2000150e:	687a      	ldr	r2, [r7, #4]
20001510:	f242 0300 	movw	r3, #8192	; 0x2000
20001514:	f2c4 0300 	movt	r3, #16384	; 0x4000
20001518:	6153      	str	r3, [r2, #20]
        this_i2c->hw_reg_bit = I2C0_BITBAND;
2000151a:	687a      	ldr	r2, [r7, #4]
2000151c:	f240 0300 	movw	r3, #0
20001520:	f2c4 2304 	movt	r3, #16900	; 0x4204
20001524:	6193      	str	r3, [r2, #24]
        
        /* reset I2C0 */
        SYSREG->SOFT_RST_CR |= SYSREG_I2C0_SOFTRESET_MASK;
20001526:	f242 0300 	movw	r3, #8192	; 0x2000
2000152a:	f2ce 0304 	movt	r3, #57348	; 0xe004
2000152e:	f242 0200 	movw	r2, #8192	; 0x2000
20001532:	f2ce 0204 	movt	r2, #57348	; 0xe004
20001536:	6b12      	ldr	r2, [r2, #48]	; 0x30
20001538:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
2000153c:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended I2C0 interrupt */
        NVIC_ClearPendingIRQ( I2C0_IRQn );
2000153e:	f04f 000e 	mov.w	r0, #14
20001542:	f7ff ff97 	bl	20001474 <NVIC_ClearPendingIRQ>
        /* Take I2C0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C0_SOFTRESET_MASK;
20001546:	f242 0300 	movw	r3, #8192	; 0x2000
2000154a:	f2ce 0304 	movt	r3, #57348	; 0xe004
2000154e:	f242 0200 	movw	r2, #8192	; 0x2000
20001552:	f2ce 0204 	movt	r2, #57348	; 0xe004
20001556:	6b12      	ldr	r2, [r2, #48]	; 0x30
20001558:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
2000155c:	631a      	str	r2, [r3, #48]	; 0x30
2000155e:	e02b      	b.n	200015b8 <MSS_I2C_init+0x108>
    }
    else
    {
        this_i2c->irqn = I2C1_IRQn;
20001560:	687b      	ldr	r3, [r7, #4]
20001562:	f04f 0211 	mov.w	r2, #17
20001566:	825a      	strh	r2, [r3, #18]
        this_i2c->hw_reg = I2C1;
20001568:	687a      	ldr	r2, [r7, #4]
2000156a:	f242 0300 	movw	r3, #8192	; 0x2000
2000156e:	f2c4 0301 	movt	r3, #16385	; 0x4001
20001572:	6153      	str	r3, [r2, #20]
        this_i2c->hw_reg_bit = I2C1_BITBAND;
20001574:	687a      	ldr	r2, [r7, #4]
20001576:	f240 0300 	movw	r3, #0
2000157a:	f2c4 2324 	movt	r3, #16932	; 0x4224
2000157e:	6193      	str	r3, [r2, #24]
        
        /* reset I2C1 */
        SYSREG->SOFT_RST_CR |= SYSREG_I2C1_SOFTRESET_MASK;
20001580:	f242 0300 	movw	r3, #8192	; 0x2000
20001584:	f2ce 0304 	movt	r3, #57348	; 0xe004
20001588:	f242 0200 	movw	r2, #8192	; 0x2000
2000158c:	f2ce 0204 	movt	r2, #57348	; 0xe004
20001590:	6b12      	ldr	r2, [r2, #48]	; 0x30
20001592:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
20001596:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended I2C1 interrupt */
        NVIC_ClearPendingIRQ( I2C1_IRQn );
20001598:	f04f 0011 	mov.w	r0, #17
2000159c:	f7ff ff6a 	bl	20001474 <NVIC_ClearPendingIRQ>
        /* Take I2C1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C1_SOFTRESET_MASK;
200015a0:	f242 0300 	movw	r3, #8192	; 0x2000
200015a4:	f2ce 0304 	movt	r3, #57348	; 0xe004
200015a8:	f242 0200 	movw	r2, #8192	; 0x2000
200015ac:	f2ce 0204 	movt	r2, #57348	; 0xe004
200015b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
200015b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
200015b6:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Use same base address for SMBus bitband access */
    this_i2c->hw_smb_reg_bit = (I2C_SMBus_BitBand_TypeDef *)this_i2c->hw_reg_bit;
200015b8:	687b      	ldr	r3, [r7, #4]
200015ba:	699b      	ldr	r3, [r3, #24]
200015bc:	461a      	mov	r2, r3
200015be:	687b      	ldr	r3, [r7, #4]
200015c0:	61da      	str	r2, [r3, #28]

    /* Update Serial address of the device */
    this_i2c->ser_address = (uint_fast8_t)ser_address << 1u;
200015c2:	78fb      	ldrb	r3, [r7, #3]
200015c4:	ea4f 0243 	mov.w	r2, r3, lsl #1
200015c8:	687b      	ldr	r3, [r7, #4]
200015ca:	601a      	str	r2, [r3, #0]

    this_i2c->hw_reg_bit->CTRL_CR2 = (uint32_t)((clock_speed >> 2u) & 0x01u);
200015cc:	687b      	ldr	r3, [r7, #4]
200015ce:	699b      	ldr	r3, [r3, #24]
200015d0:	68fa      	ldr	r2, [r7, #12]
200015d2:	ea4f 0292 	mov.w	r2, r2, lsr #2
200015d6:	f002 0201 	and.w	r2, r2, #1
200015da:	61da      	str	r2, [r3, #28]
    this_i2c->hw_reg_bit->CTRL_CR1 = (uint32_t)((clock_speed >> 1u) & 0x01u);
200015dc:	687b      	ldr	r3, [r7, #4]
200015de:	699b      	ldr	r3, [r3, #24]
200015e0:	68fa      	ldr	r2, [r7, #12]
200015e2:	ea4f 0252 	mov.w	r2, r2, lsr #1
200015e6:	f002 0201 	and.w	r2, r2, #1
200015ea:	605a      	str	r2, [r3, #4]
    this_i2c->hw_reg_bit->CTRL_CR0 = (uint32_t)(clock_speed & 0x01u);
200015ec:	687b      	ldr	r3, [r7, #4]
200015ee:	699b      	ldr	r3, [r3, #24]
200015f0:	68fa      	ldr	r2, [r7, #12]
200015f2:	f002 0201 	and.w	r2, r2, #1
200015f6:	601a      	str	r2, [r3, #0]
    this_i2c->hw_reg->ADDR = (uint8_t)this_i2c->ser_address;
200015f8:	687b      	ldr	r3, [r7, #4]
200015fa:	695b      	ldr	r3, [r3, #20]
200015fc:	687a      	ldr	r2, [r7, #4]
200015fe:	6812      	ldr	r2, [r2, #0]
20001600:	b2d2      	uxtb	r2, r2
20001602:	731a      	strb	r2, [r3, #12]
    this_i2c->hw_reg_bit->CTRL_ENS1 = 0x01u; /* set enable bit */
20001604:	687b      	ldr	r3, [r7, #4]
20001606:	699b      	ldr	r3, [r3, #24]
20001608:	f04f 0201 	mov.w	r2, #1
2000160c:	619a      	str	r2, [r3, #24]
    restore_interrupts( primask );
2000160e:	68b8      	ldr	r0, [r7, #8]
20001610:	f000 fdde 	bl	200021d0 <restore_interrupts>
}
20001614:	f107 0710 	add.w	r7, r7, #16
20001618:	46bd      	mov	sp, r7
2000161a:	bd80      	pop	{r7, pc}

2000161c <MSS_I2C_write>:
    uint8_t serial_addr,
    const uint8_t * write_buffer,
    uint16_t write_size,
    uint8_t options
)
{
2000161c:	b580      	push	{r7, lr}
2000161e:	b086      	sub	sp, #24
20001620:	af00      	add	r7, sp, #0
20001622:	60f8      	str	r0, [r7, #12]
20001624:	607a      	str	r2, [r7, #4]
20001626:	460a      	mov	r2, r1
20001628:	72fa      	strb	r2, [r7, #11]
2000162a:	807b      	strh	r3, [r7, #2]
    uint32_t primask;
    volatile uint8_t stat_ctrl;

    ASSERT((this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1));
2000162c:	68fa      	ldr	r2, [r7, #12]
2000162e:	f643 53b8 	movw	r3, #15800	; 0x3db8
20001632:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001636:	429a      	cmp	r2, r3
20001638:	d007      	beq.n	2000164a <MSS_I2C_write+0x2e>
2000163a:	68fa      	ldr	r2, [r7, #12]
2000163c:	f643 632c 	movw	r3, #15916	; 0x3e2c
20001640:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001644:	429a      	cmp	r2, r3
20001646:	d000      	beq.n	2000164a <MSS_I2C_write+0x2e>
20001648:	be00      	bkpt	0x0000

    primask = disable_interrupts();
2000164a:	f000 fdaf 	bl	200021ac <disable_interrupts>
2000164e:	4603      	mov	r3, r0
20001650:	617b      	str	r3, [r7, #20]

    /* Update the transaction only when there is no transaction going on I2C */
    if( this_i2c->transaction == NO_TRANSACTION)
20001652:	68fb      	ldr	r3, [r7, #12]
20001654:	7a1b      	ldrb	r3, [r3, #8]
20001656:	2b00      	cmp	r3, #0
20001658:	d103      	bne.n	20001662 <MSS_I2C_write+0x46>
    {
      this_i2c->transaction = MASTER_WRITE_TRANSACTION;
2000165a:	68fb      	ldr	r3, [r7, #12]
2000165c:	f04f 0201 	mov.w	r2, #1
20001660:	721a      	strb	r2, [r3, #8]
    }

    /* Update the Pending transaction information so that transaction can restarted */
    this_i2c->pending_transaction = MASTER_WRITE_TRANSACTION ;
20001662:	68fb      	ldr	r3, [r7, #12]
20001664:	f04f 0201 	mov.w	r2, #1
20001668:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

    /* Update target address */
    this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
2000166c:	7afb      	ldrb	r3, [r7, #11]
2000166e:	ea4f 0243 	mov.w	r2, r3, lsl #1
20001672:	68fb      	ldr	r3, [r7, #12]
20001674:	605a      	str	r2, [r3, #4]

    this_i2c->dir = WRITE_DIR;
20001676:	68fb      	ldr	r3, [r7, #12]
20001678:	f04f 0200 	mov.w	r2, #0
2000167c:	62da      	str	r2, [r3, #44]	; 0x2c

    this_i2c->master_tx_buffer = write_buffer;
2000167e:	68fb      	ldr	r3, [r7, #12]
20001680:	687a      	ldr	r2, [r7, #4]
20001682:	621a      	str	r2, [r3, #32]
    this_i2c->master_tx_size = write_size;
20001684:	887a      	ldrh	r2, [r7, #2]
20001686:	68fb      	ldr	r3, [r7, #12]
20001688:	625a      	str	r2, [r3, #36]	; 0x24
    this_i2c->master_tx_idx = 0u;
2000168a:	68fb      	ldr	r3, [r7, #12]
2000168c:	f04f 0200 	mov.w	r2, #0
20001690:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set I2C status in progress */
    this_i2c->master_status = MSS_I2C_IN_PROGRESS;
20001692:	68fb      	ldr	r3, [r7, #12]
20001694:	f04f 0201 	mov.w	r2, #1
20001698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    this_i2c->options = options;
2000169c:	68fb      	ldr	r3, [r7, #12]
2000169e:	f897 2020 	ldrb.w	r2, [r7, #32]
200016a2:	741a      	strb	r2, [r3, #16]

    if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
200016a4:	68fb      	ldr	r3, [r7, #12]
200016a6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
200016aa:	b2db      	uxtb	r3, r3
200016ac:	2b01      	cmp	r3, #1
200016ae:	d105      	bne.n	200016bc <MSS_I2C_write+0xa0>
    {
        this_i2c->is_transaction_pending = 1u;
200016b0:	68fb      	ldr	r3, [r7, #12]
200016b2:	f04f 0201 	mov.w	r2, #1
200016b6:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
200016ba:	e004      	b.n	200016c6 <MSS_I2C_write+0xaa>
    }
    else
    {
        this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
200016bc:	68fb      	ldr	r3, [r7, #12]
200016be:	699b      	ldr	r3, [r3, #24]
200016c0:	f04f 0201 	mov.w	r2, #1
200016c4:	615a      	str	r2, [r3, #20]
    /*
     * Clear interrupts if required (depends on repeated starts).
     * Since the Bus is on hold, only then prior status needs to
     * be cleared.
     */
    if ( MSS_I2C_HOLD_BUS == this_i2c->bus_status )
200016c6:	68fb      	ldr	r3, [r7, #12]
200016c8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
200016cc:	2b01      	cmp	r3, #1
200016ce:	d111      	bne.n	200016f4 <MSS_I2C_write+0xd8>
    {
        this_i2c->hw_reg_bit->CTRL_SI = 0u;
200016d0:	68fb      	ldr	r3, [r7, #12]
200016d2:	699b      	ldr	r3, [r3, #24]
200016d4:	f04f 0200 	mov.w	r2, #0
200016d8:	60da      	str	r2, [r3, #12]
        stat_ctrl = this_i2c->hw_reg->STATUS;
200016da:	68fb      	ldr	r3, [r7, #12]
200016dc:	695b      	ldr	r3, [r3, #20]
200016de:	791b      	ldrb	r3, [r3, #4]
200016e0:	74fb      	strb	r3, [r7, #19]
        stat_ctrl = stat_ctrl;  /* Avoids Lint warning */
200016e2:	7cfb      	ldrb	r3, [r7, #19]
200016e4:	b2db      	uxtb	r3, r3
200016e6:	74fb      	strb	r3, [r7, #19]
        NVIC_ClearPendingIRQ( this_i2c->irqn );
200016e8:	68fb      	ldr	r3, [r7, #12]
200016ea:	8a5b      	ldrh	r3, [r3, #18]
200016ec:	b21b      	sxth	r3, r3
200016ee:	4618      	mov	r0, r3
200016f0:	f7ff fec0 	bl	20001474 <NVIC_ClearPendingIRQ>
    }

    /* Enable the interrupt. ( Re-enable) */
    NVIC_EnableIRQ( this_i2c->irqn );
200016f4:	68fb      	ldr	r3, [r7, #12]
200016f6:	8a5b      	ldrh	r3, [r3, #18]
200016f8:	b21b      	sxth	r3, r3
200016fa:	4618      	mov	r0, r3
200016fc:	f7ff fe80 	bl	20001400 <NVIC_EnableIRQ>

    restore_interrupts( primask );
20001700:	6978      	ldr	r0, [r7, #20]
20001702:	f000 fd65 	bl	200021d0 <restore_interrupts>
}
20001706:	f107 0718 	add.w	r7, r7, #24
2000170a:	46bd      	mov	sp, r7
2000170c:	bd80      	pop	{r7, pc}
2000170e:	bf00      	nop

20001710 <MSS_I2C_write_read>:
    uint16_t offset_size,
    uint8_t * read_buffer,
    uint16_t read_size,
    uint8_t options
)
{
20001710:	b580      	push	{r7, lr}
20001712:	b086      	sub	sp, #24
20001714:	af00      	add	r7, sp, #0
20001716:	60f8      	str	r0, [r7, #12]
20001718:	607a      	str	r2, [r7, #4]
2000171a:	460a      	mov	r2, r1
2000171c:	72fa      	strb	r2, [r7, #11]
2000171e:	807b      	strh	r3, [r7, #2]
    ASSERT((this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1));
20001720:	68fa      	ldr	r2, [r7, #12]
20001722:	f643 53b8 	movw	r3, #15800	; 0x3db8
20001726:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000172a:	429a      	cmp	r2, r3
2000172c:	d007      	beq.n	2000173e <MSS_I2C_write_read+0x2e>
2000172e:	68fa      	ldr	r2, [r7, #12]
20001730:	f643 632c 	movw	r3, #15916	; 0x3e2c
20001734:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001738:	429a      	cmp	r2, r3
2000173a:	d000      	beq.n	2000173e <MSS_I2C_write_read+0x2e>
2000173c:	be00      	bkpt	0x0000
    ASSERT(offset_size > 0u);
2000173e:	887b      	ldrh	r3, [r7, #2]
20001740:	2b00      	cmp	r3, #0
20001742:	d100      	bne.n	20001746 <MSS_I2C_write_read+0x36>
20001744:	be00      	bkpt	0x0000
    ASSERT(addr_offset != (const uint8_t *)0);
20001746:	687b      	ldr	r3, [r7, #4]
20001748:	2b00      	cmp	r3, #0
2000174a:	d100      	bne.n	2000174e <MSS_I2C_write_read+0x3e>
2000174c:	be00      	bkpt	0x0000
    ASSERT(read_size > 0u);
2000174e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
20001750:	2b00      	cmp	r3, #0
20001752:	d100      	bne.n	20001756 <MSS_I2C_write_read+0x46>
20001754:	be00      	bkpt	0x0000
    ASSERT(read_buffer != (uint8_t *)0);
20001756:	6a3b      	ldr	r3, [r7, #32]
20001758:	2b00      	cmp	r3, #0
2000175a:	d100      	bne.n	2000175e <MSS_I2C_write_read+0x4e>
2000175c:	be00      	bkpt	0x0000

    if((read_size > 0u) && (offset_size > 0u))
2000175e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
20001760:	2b00      	cmp	r3, #0
20001762:	d06a      	beq.n	2000183a <MSS_I2C_write_read+0x12a>
20001764:	887b      	ldrh	r3, [r7, #2]
20001766:	2b00      	cmp	r3, #0
20001768:	d067      	beq.n	2000183a <MSS_I2C_write_read+0x12a>
    {
        uint32_t primask;
        volatile uint8_t stat_ctrl;

        primask = disable_interrupts();
2000176a:	f000 fd1f 	bl	200021ac <disable_interrupts>
2000176e:	4603      	mov	r3, r0
20001770:	617b      	str	r3, [r7, #20]

        /* Update the transaction only when there is no transaction going on I2C */
        if( this_i2c->transaction == NO_TRANSACTION)
20001772:	68fb      	ldr	r3, [r7, #12]
20001774:	7a1b      	ldrb	r3, [r3, #8]
20001776:	2b00      	cmp	r3, #0
20001778:	d103      	bne.n	20001782 <MSS_I2C_write_read+0x72>
        {
            this_i2c->transaction = MASTER_RANDOM_READ_TRANSACTION;
2000177a:	68fb      	ldr	r3, [r7, #12]
2000177c:	f04f 0203 	mov.w	r2, #3
20001780:	721a      	strb	r2, [r3, #8]
        }

        /* Update the Pending transaction information so that transaction can restarted */
        this_i2c->pending_transaction = MASTER_RANDOM_READ_TRANSACTION ;
20001782:	68fb      	ldr	r3, [r7, #12]
20001784:	f04f 0203 	mov.w	r2, #3
20001788:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

        /* Update target address */
        this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
2000178c:	7afb      	ldrb	r3, [r7, #11]
2000178e:	ea4f 0243 	mov.w	r2, r3, lsl #1
20001792:	68fb      	ldr	r3, [r7, #12]
20001794:	605a      	str	r2, [r3, #4]

        this_i2c->dir = WRITE_DIR;
20001796:	68fb      	ldr	r3, [r7, #12]
20001798:	f04f 0200 	mov.w	r2, #0
2000179c:	62da      	str	r2, [r3, #44]	; 0x2c
        this_i2c->master_tx_buffer = addr_offset;
2000179e:	68fb      	ldr	r3, [r7, #12]
200017a0:	687a      	ldr	r2, [r7, #4]
200017a2:	621a      	str	r2, [r3, #32]
        this_i2c->master_tx_size = offset_size;
200017a4:	887a      	ldrh	r2, [r7, #2]
200017a6:	68fb      	ldr	r3, [r7, #12]
200017a8:	625a      	str	r2, [r3, #36]	; 0x24
        this_i2c->master_tx_idx = 0u;
200017aa:	68fb      	ldr	r3, [r7, #12]
200017ac:	f04f 0200 	mov.w	r2, #0
200017b0:	629a      	str	r2, [r3, #40]	; 0x28

        this_i2c->master_rx_buffer = read_buffer;
200017b2:	68fb      	ldr	r3, [r7, #12]
200017b4:	6a3a      	ldr	r2, [r7, #32]
200017b6:	631a      	str	r2, [r3, #48]	; 0x30
        this_i2c->master_rx_size = read_size;
200017b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
200017ba:	68fb      	ldr	r3, [r7, #12]
200017bc:	635a      	str	r2, [r3, #52]	; 0x34
        this_i2c->master_rx_idx = 0u;
200017be:	68fb      	ldr	r3, [r7, #12]
200017c0:	f04f 0200 	mov.w	r2, #0
200017c4:	639a      	str	r2, [r3, #56]	; 0x38

        /* Set I2C status in progress */
        this_i2c->master_status = MSS_I2C_IN_PROGRESS;
200017c6:	68fb      	ldr	r3, [r7, #12]
200017c8:	f04f 0201 	mov.w	r2, #1
200017cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        this_i2c->options = options;
200017d0:	68fb      	ldr	r3, [r7, #12]
200017d2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
200017d6:	741a      	strb	r2, [r3, #16]

        if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
200017d8:	68fb      	ldr	r3, [r7, #12]
200017da:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
200017de:	b2db      	uxtb	r3, r3
200017e0:	2b01      	cmp	r3, #1
200017e2:	d105      	bne.n	200017f0 <MSS_I2C_write_read+0xe0>
        {
            this_i2c->is_transaction_pending = 1u;
200017e4:	68fb      	ldr	r3, [r7, #12]
200017e6:	f04f 0201 	mov.w	r2, #1
200017ea:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
200017ee:	e004      	b.n	200017fa <MSS_I2C_write_read+0xea>
        }
        else
        {
            this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
200017f0:	68fb      	ldr	r3, [r7, #12]
200017f2:	699b      	ldr	r3, [r3, #24]
200017f4:	f04f 0201 	mov.w	r2, #1
200017f8:	615a      	str	r2, [r3, #20]
        /*
         * Clear interrupts if required (depends on repeated starts).
         * Since the Bus is on hold, only then prior status needs to
         * be cleared.
         */
        if ( MSS_I2C_HOLD_BUS == this_i2c->bus_status )
200017fa:	68fb      	ldr	r3, [r7, #12]
200017fc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
20001800:	2b01      	cmp	r3, #1
20001802:	d111      	bne.n	20001828 <MSS_I2C_write_read+0x118>
        {
            this_i2c->hw_reg_bit->CTRL_SI = 0u;
20001804:	68fb      	ldr	r3, [r7, #12]
20001806:	699b      	ldr	r3, [r3, #24]
20001808:	f04f 0200 	mov.w	r2, #0
2000180c:	60da      	str	r2, [r3, #12]
            stat_ctrl = this_i2c->hw_reg->STATUS;
2000180e:	68fb      	ldr	r3, [r7, #12]
20001810:	695b      	ldr	r3, [r3, #20]
20001812:	791b      	ldrb	r3, [r3, #4]
20001814:	74fb      	strb	r3, [r7, #19]
            stat_ctrl = stat_ctrl;  /* Avoids Lint warning */
20001816:	7cfb      	ldrb	r3, [r7, #19]
20001818:	b2db      	uxtb	r3, r3
2000181a:	74fb      	strb	r3, [r7, #19]
            NVIC_ClearPendingIRQ( this_i2c->irqn );
2000181c:	68fb      	ldr	r3, [r7, #12]
2000181e:	8a5b      	ldrh	r3, [r3, #18]
20001820:	b21b      	sxth	r3, r3
20001822:	4618      	mov	r0, r3
20001824:	f7ff fe26 	bl	20001474 <NVIC_ClearPendingIRQ>
        }

        /* Enable the interrupt. ( Re-enable) */
        NVIC_EnableIRQ( this_i2c->irqn );
20001828:	68fb      	ldr	r3, [r7, #12]
2000182a:	8a5b      	ldrh	r3, [r3, #18]
2000182c:	b21b      	sxth	r3, r3
2000182e:	4618      	mov	r0, r3
20001830:	f7ff fde6 	bl	20001400 <NVIC_EnableIRQ>

        restore_interrupts( primask );
20001834:	6978      	ldr	r0, [r7, #20]
20001836:	f000 fccb 	bl	200021d0 <restore_interrupts>
    }
}
2000183a:	f107 0718 	add.w	r7, r7, #24
2000183e:	46bd      	mov	sp, r7
20001840:	bd80      	pop	{r7, pc}
20001842:	bf00      	nop

20001844 <MSS_I2C_wait_complete>:
mss_i2c_status_t MSS_I2C_wait_complete
(
    mss_i2c_instance_t * this_i2c,
    uint32_t timeout_ms
)
{
20001844:	b480      	push	{r7}
20001846:	b085      	sub	sp, #20
20001848:	af00      	add	r7, sp, #0
2000184a:	6078      	str	r0, [r7, #4]
2000184c:	6039      	str	r1, [r7, #0]
	mss_i2c_status_t i2c_status;
    
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
2000184e:	687a      	ldr	r2, [r7, #4]
20001850:	f643 53b8 	movw	r3, #15800	; 0x3db8
20001854:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001858:	429a      	cmp	r2, r3
2000185a:	d007      	beq.n	2000186c <MSS_I2C_wait_complete+0x28>
2000185c:	687a      	ldr	r2, [r7, #4]
2000185e:	f643 632c 	movw	r3, #15916	; 0x3e2c
20001862:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001866:	429a      	cmp	r2, r3
20001868:	d000      	beq.n	2000186c <MSS_I2C_wait_complete+0x28>
2000186a:	be00      	bkpt	0x0000
    
    this_i2c->master_timeout_ms = timeout_ms;
2000186c:	687b      	ldr	r3, [r7, #4]
2000186e:	683a      	ldr	r2, [r7, #0]
20001870:	641a      	str	r2, [r3, #64]	; 0x40

    /* Run the loop until state returns I2C_FAILED  or I2C_SUCESS*/
    do {
        i2c_status = this_i2c->master_status;
20001872:	687b      	ldr	r3, [r7, #4]
20001874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
20001878:	73fb      	strb	r3, [r7, #15]
    } while(MSS_I2C_IN_PROGRESS == i2c_status);
2000187a:	7bfb      	ldrb	r3, [r7, #15]
2000187c:	2b01      	cmp	r3, #1
2000187e:	d0f8      	beq.n	20001872 <MSS_I2C_wait_complete+0x2e>

    return i2c_status;
20001880:	7bfb      	ldrb	r3, [r7, #15]
}
20001882:	4618      	mov	r0, r3
20001884:	f107 0714 	add.w	r7, r7, #20
20001888:	46bd      	mov	sp, r7
2000188a:	bc80      	pop	{r7}
2000188c:	4770      	bx	lr
2000188e:	bf00      	nop

20001890 <enable_slave_if_required>:
 */
static void enable_slave_if_required
(
    mss_i2c_instance_t * this_i2c
)
{
20001890:	b480      	push	{r7}
20001892:	b083      	sub	sp, #12
20001894:	af00      	add	r7, sp, #0
20001896:	6078      	str	r0, [r7, #4]
    if( this_i2c->is_slave_enabled )
20001898:	687b      	ldr	r3, [r7, #4]
2000189a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
2000189e:	2b00      	cmp	r3, #0
200018a0:	d004      	beq.n	200018ac <enable_slave_if_required+0x1c>
    {
        this_i2c->hw_reg_bit->CTRL_AA = 1u;
200018a2:	687b      	ldr	r3, [r7, #4]
200018a4:	699b      	ldr	r3, [r3, #24]
200018a6:	f04f 0201 	mov.w	r2, #1
200018aa:	609a      	str	r2, [r3, #8]
    }
}
200018ac:	f107 070c 	add.w	r7, r7, #12
200018b0:	46bd      	mov	sp, r7
200018b2:	bc80      	pop	{r7}
200018b4:	4770      	bx	lr
200018b6:	bf00      	nop

200018b8 <mss_i2c_isr>:
 */
static void mss_i2c_isr
(
    mss_i2c_instance_t * this_i2c
)
{
200018b8:	b580      	push	{r7, lr}
200018ba:	b084      	sub	sp, #16
200018bc:	af00      	add	r7, sp, #0
200018be:	6078      	str	r0, [r7, #4]
    volatile uint8_t status;
    uint8_t data;
    uint8_t hold_bus;
    uint8_t clear_irq = 1u;
200018c0:	f04f 0301 	mov.w	r3, #1
200018c4:	73bb      	strb	r3, [r7, #14]
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
200018c6:	687a      	ldr	r2, [r7, #4]
200018c8:	f643 53b8 	movw	r3, #15800	; 0x3db8
200018cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200018d0:	429a      	cmp	r2, r3
200018d2:	d007      	beq.n	200018e4 <mss_i2c_isr+0x2c>
200018d4:	687a      	ldr	r2, [r7, #4]
200018d6:	f643 632c 	movw	r3, #15916	; 0x3e2c
200018da:	f2c2 0300 	movt	r3, #8192	; 0x2000
200018de:	429a      	cmp	r2, r3
200018e0:	d000      	beq.n	200018e4 <mss_i2c_isr+0x2c>
200018e2:	be00      	bkpt	0x0000

    status = this_i2c->hw_reg->STATUS;
200018e4:	687b      	ldr	r3, [r7, #4]
200018e6:	695b      	ldr	r3, [r3, #20]
200018e8:	791b      	ldrb	r3, [r3, #4]
200018ea:	72fb      	strb	r3, [r7, #11]

    switch( status )
200018ec:	7afb      	ldrb	r3, [r7, #11]
200018ee:	b2db      	uxtb	r3, r3
200018f0:	f1a3 0308 	sub.w	r3, r3, #8
200018f4:	2bd0      	cmp	r3, #208	; 0xd0
200018f6:	f200 841c 	bhi.w	20002132 <mss_i2c_isr+0x87a>
200018fa:	a201      	add	r2, pc, #4	; (adr r2, 20001900 <mss_i2c_isr+0x48>)
200018fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20001900:	20001c45 	.word	0x20001c45
20001904:	20002133 	.word	0x20002133
20001908:	20002133 	.word	0x20002133
2000190c:	20002133 	.word	0x20002133
20001910:	20002133 	.word	0x20002133
20001914:	20002133 	.word	0x20002133
20001918:	20002133 	.word	0x20002133
2000191c:	20002133 	.word	0x20002133
20001920:	20001c45 	.word	0x20001c45
20001924:	20002133 	.word	0x20002133
20001928:	20002133 	.word	0x20002133
2000192c:	20002133 	.word	0x20002133
20001930:	20002133 	.word	0x20002133
20001934:	20002133 	.word	0x20002133
20001938:	20002133 	.word	0x20002133
2000193c:	20002133 	.word	0x20002133
20001940:	20001ce9 	.word	0x20001ce9
20001944:	20002133 	.word	0x20002133
20001948:	20002133 	.word	0x20002133
2000194c:	20002133 	.word	0x20002133
20001950:	20002133 	.word	0x20002133
20001954:	20002133 	.word	0x20002133
20001958:	20002133 	.word	0x20002133
2000195c:	20002133 	.word	0x20002133
20001960:	20001cc5 	.word	0x20001cc5
20001964:	20002133 	.word	0x20002133
20001968:	20002133 	.word	0x20002133
2000196c:	20002133 	.word	0x20002133
20001970:	20002133 	.word	0x20002133
20001974:	20002133 	.word	0x20002133
20001978:	20002133 	.word	0x20002133
2000197c:	20002133 	.word	0x20002133
20001980:	20001ce9 	.word	0x20001ce9
20001984:	20002133 	.word	0x20002133
20001988:	20002133 	.word	0x20002133
2000198c:	20002133 	.word	0x20002133
20001990:	20002133 	.word	0x20002133
20001994:	20002133 	.word	0x20002133
20001998:	20002133 	.word	0x20002133
2000199c:	20002133 	.word	0x20002133
200019a0:	20001d7d 	.word	0x20001d7d
200019a4:	20002133 	.word	0x20002133
200019a8:	20002133 	.word	0x20002133
200019ac:	20002133 	.word	0x20002133
200019b0:	20002133 	.word	0x20002133
200019b4:	20002133 	.word	0x20002133
200019b8:	20002133 	.word	0x20002133
200019bc:	20002133 	.word	0x20002133
200019c0:	20001cb9 	.word	0x20001cb9
200019c4:	20002133 	.word	0x20002133
200019c8:	20002133 	.word	0x20002133
200019cc:	20002133 	.word	0x20002133
200019d0:	20002133 	.word	0x20002133
200019d4:	20002133 	.word	0x20002133
200019d8:	20002133 	.word	0x20002133
200019dc:	20002133 	.word	0x20002133
200019e0:	20001da1 	.word	0x20001da1
200019e4:	20002133 	.word	0x20002133
200019e8:	20002133 	.word	0x20002133
200019ec:	20002133 	.word	0x20002133
200019f0:	20002133 	.word	0x20002133
200019f4:	20002133 	.word	0x20002133
200019f8:	20002133 	.word	0x20002133
200019fc:	20002133 	.word	0x20002133
20001a00:	20001df1 	.word	0x20001df1
20001a04:	20002133 	.word	0x20002133
20001a08:	20002133 	.word	0x20002133
20001a0c:	20002133 	.word	0x20002133
20001a10:	20002133 	.word	0x20002133
20001a14:	20002133 	.word	0x20002133
20001a18:	20002133 	.word	0x20002133
20001a1c:	20002133 	.word	0x20002133
20001a20:	20001e15 	.word	0x20001e15
20001a24:	20002133 	.word	0x20002133
20001a28:	20002133 	.word	0x20002133
20001a2c:	20002133 	.word	0x20002133
20001a30:	20002133 	.word	0x20002133
20001a34:	20002133 	.word	0x20002133
20001a38:	20002133 	.word	0x20002133
20001a3c:	20002133 	.word	0x20002133
20001a40:	20001e4f 	.word	0x20001e4f
20001a44:	20002133 	.word	0x20002133
20001a48:	20002133 	.word	0x20002133
20001a4c:	20002133 	.word	0x20002133
20001a50:	20002133 	.word	0x20002133
20001a54:	20002133 	.word	0x20002133
20001a58:	20002133 	.word	0x20002133
20001a5c:	20002133 	.word	0x20002133
20001a60:	20001ef1 	.word	0x20001ef1
20001a64:	20002133 	.word	0x20002133
20001a68:	20002133 	.word	0x20002133
20001a6c:	20002133 	.word	0x20002133
20001a70:	20002133 	.word	0x20002133
20001a74:	20002133 	.word	0x20002133
20001a78:	20002133 	.word	0x20002133
20001a7c:	20002133 	.word	0x20002133
20001a80:	20001ee7 	.word	0x20001ee7
20001a84:	20002133 	.word	0x20002133
20001a88:	20002133 	.word	0x20002133
20001a8c:	20002133 	.word	0x20002133
20001a90:	20002133 	.word	0x20002133
20001a94:	20002133 	.word	0x20002133
20001a98:	20002133 	.word	0x20002133
20001a9c:	20002133 	.word	0x20002133
20001aa0:	20001ef1 	.word	0x20001ef1
20001aa4:	20002133 	.word	0x20002133
20001aa8:	20002133 	.word	0x20002133
20001aac:	20002133 	.word	0x20002133
20001ab0:	20002133 	.word	0x20002133
20001ab4:	20002133 	.word	0x20002133
20001ab8:	20002133 	.word	0x20002133
20001abc:	20002133 	.word	0x20002133
20001ac0:	20001ee7 	.word	0x20001ee7
20001ac4:	20002133 	.word	0x20002133
20001ac8:	20002133 	.word	0x20002133
20001acc:	20002133 	.word	0x20002133
20001ad0:	20002133 	.word	0x20002133
20001ad4:	20002133 	.word	0x20002133
20001ad8:	20002133 	.word	0x20002133
20001adc:	20002133 	.word	0x20002133
20001ae0:	20001f33 	.word	0x20001f33
20001ae4:	20002133 	.word	0x20002133
20001ae8:	20002133 	.word	0x20002133
20001aec:	20002133 	.word	0x20002133
20001af0:	20002133 	.word	0x20002133
20001af4:	20002133 	.word	0x20002133
20001af8:	20002133 	.word	0x20002133
20001afc:	20002133 	.word	0x20002133
20001b00:	20001eb3 	.word	0x20001eb3
20001b04:	20002133 	.word	0x20002133
20001b08:	20002133 	.word	0x20002133
20001b0c:	20002133 	.word	0x20002133
20001b10:	20002133 	.word	0x20002133
20001b14:	20002133 	.word	0x20002133
20001b18:	20002133 	.word	0x20002133
20001b1c:	20002133 	.word	0x20002133
20001b20:	20001f33 	.word	0x20001f33
20001b24:	20002133 	.word	0x20002133
20001b28:	20002133 	.word	0x20002133
20001b2c:	20002133 	.word	0x20002133
20001b30:	20002133 	.word	0x20002133
20001b34:	20002133 	.word	0x20002133
20001b38:	20002133 	.word	0x20002133
20001b3c:	20002133 	.word	0x20002133
20001b40:	20001eb3 	.word	0x20001eb3
20001b44:	20002133 	.word	0x20002133
20001b48:	20002133 	.word	0x20002133
20001b4c:	20002133 	.word	0x20002133
20001b50:	20002133 	.word	0x20002133
20001b54:	20002133 	.word	0x20002133
20001b58:	20002133 	.word	0x20002133
20001b5c:	20002133 	.word	0x20002133
20001b60:	20001f8f 	.word	0x20001f8f
20001b64:	20002133 	.word	0x20002133
20001b68:	20002133 	.word	0x20002133
20001b6c:	20002133 	.word	0x20002133
20001b70:	20002133 	.word	0x20002133
20001b74:	20002133 	.word	0x20002133
20001b78:	20002133 	.word	0x20002133
20001b7c:	20002133 	.word	0x20002133
20001b80:	20002067 	.word	0x20002067
20001b84:	20002133 	.word	0x20002133
20001b88:	20002133 	.word	0x20002133
20001b8c:	20002133 	.word	0x20002133
20001b90:	20002133 	.word	0x20002133
20001b94:	20002133 	.word	0x20002133
20001b98:	20002133 	.word	0x20002133
20001b9c:	20002133 	.word	0x20002133
20001ba0:	20002067 	.word	0x20002067
20001ba4:	20002133 	.word	0x20002133
20001ba8:	20002133 	.word	0x20002133
20001bac:	20002133 	.word	0x20002133
20001bb0:	20002133 	.word	0x20002133
20001bb4:	20002133 	.word	0x20002133
20001bb8:	20002133 	.word	0x20002133
20001bbc:	20002133 	.word	0x20002133
20001bc0:	20002067 	.word	0x20002067
20001bc4:	20002133 	.word	0x20002133
20001bc8:	20002133 	.word	0x20002133
20001bcc:	20002133 	.word	0x20002133
20001bd0:	20002133 	.word	0x20002133
20001bd4:	20002133 	.word	0x20002133
20001bd8:	20002133 	.word	0x20002133
20001bdc:	20002133 	.word	0x20002133
20001be0:	200020f9 	.word	0x200020f9
20001be4:	20002133 	.word	0x20002133
20001be8:	20002133 	.word	0x20002133
20001bec:	20002133 	.word	0x20002133
20001bf0:	20002133 	.word	0x20002133
20001bf4:	20002133 	.word	0x20002133
20001bf8:	20002133 	.word	0x20002133
20001bfc:	20002133 	.word	0x20002133
20001c00:	200020f9 	.word	0x200020f9
20001c04:	20002133 	.word	0x20002133
20001c08:	20002133 	.word	0x20002133
20001c0c:	20002133 	.word	0x20002133
20001c10:	20002133 	.word	0x20002133
20001c14:	20002133 	.word	0x20002133
20001c18:	20002133 	.word	0x20002133
20001c1c:	20002133 	.word	0x20002133
20001c20:	20002133 	.word	0x20002133
20001c24:	20002133 	.word	0x20002133
20001c28:	20002133 	.word	0x20002133
20001c2c:	20002133 	.word	0x20002133
20001c30:	20002133 	.word	0x20002133
20001c34:	20002133 	.word	0x20002133
20001c38:	20002133 	.word	0x20002133
20001c3c:	20002133 	.word	0x20002133
20001c40:	20002039 	.word	0x20002039
    {
        /************** MASTER TRANSMITTER / RECEIVER *******************/
      
        case ST_START: /* start has been xmt'd */
        case ST_RESTART: /* repeated start has been xmt'd */
            this_i2c->hw_reg_bit->CTRL_STA = 0u;
20001c44:	687b      	ldr	r3, [r7, #4]
20001c46:	699b      	ldr	r3, [r3, #24]
20001c48:	f04f 0200 	mov.w	r2, #0
20001c4c:	615a      	str	r2, [r3, #20]
            this_i2c->hw_reg->DATA = (uint8_t)this_i2c->target_addr;
20001c4e:	687b      	ldr	r3, [r7, #4]
20001c50:	695b      	ldr	r3, [r3, #20]
20001c52:	687a      	ldr	r2, [r7, #4]
20001c54:	6852      	ldr	r2, [r2, #4]
20001c56:	b2d2      	uxtb	r2, r2
20001c58:	721a      	strb	r2, [r3, #8]
            this_i2c->hw_reg_bit->DATA_DIR = this_i2c->dir;
20001c5a:	687b      	ldr	r3, [r7, #4]
20001c5c:	699b      	ldr	r3, [r3, #24]
20001c5e:	687a      	ldr	r2, [r7, #4]
20001c60:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
20001c62:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
            if ( this_i2c->dir == WRITE_DIR )
20001c66:	687b      	ldr	r3, [r7, #4]
20001c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20001c6a:	2b00      	cmp	r3, #0
20001c6c:	d104      	bne.n	20001c78 <mss_i2c_isr+0x3c0>
            {
                this_i2c->master_tx_idx = 0u;
20001c6e:	687b      	ldr	r3, [r7, #4]
20001c70:	f04f 0200 	mov.w	r2, #0
20001c74:	629a      	str	r2, [r3, #40]	; 0x28
20001c76:	e007      	b.n	20001c88 <mss_i2c_isr+0x3d0>
            }
            else if ( this_i2c->dir == READ_DIR)
20001c78:	687b      	ldr	r3, [r7, #4]
20001c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20001c7c:	2b01      	cmp	r3, #1
20001c7e:	d103      	bne.n	20001c88 <mss_i2c_isr+0x3d0>
            {
                this_i2c->master_rx_idx = 0u;
20001c80:	687b      	ldr	r3, [r7, #4]
20001c82:	f04f 0200 	mov.w	r2, #0
20001c86:	639a      	str	r2, [r3, #56]	; 0x38
            /*
             * Clear the pending transaction. This condition will be true if the slave 
             * has acquired the bus to carry out pending master transaction which 
             * it had received during its slave transmission or reception mode. 
             */
            if(this_i2c->is_transaction_pending)
20001c88:	687b      	ldr	r3, [r7, #4]
20001c8a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
20001c8e:	2b00      	cmp	r3, #0
20001c90:	d004      	beq.n	20001c9c <mss_i2c_isr+0x3e4>
            {
                this_i2c->is_transaction_pending = 0u;
20001c92:	687b      	ldr	r3, [r7, #4]
20001c94:	f04f 0200 	mov.w	r2, #0
20001c98:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

            /*
             * Make sure to update proper transaction after master START
             * or RESTART
             */
            if(this_i2c->transaction != this_i2c->pending_transaction)
20001c9c:	687b      	ldr	r3, [r7, #4]
20001c9e:	7a1a      	ldrb	r2, [r3, #8]
20001ca0:	687b      	ldr	r3, [r7, #4]
20001ca2:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
20001ca6:	429a      	cmp	r2, r3
20001ca8:	f000 8267 	beq.w	2000217a <mss_i2c_isr+0x8c2>
            {
                this_i2c->transaction = this_i2c->pending_transaction;
20001cac:	687b      	ldr	r3, [r7, #4]
20001cae:	f893 2072 	ldrb.w	r2, [r3, #114]	; 0x72
20001cb2:	687b      	ldr	r3, [r7, #4]
20001cb4:	721a      	strb	r2, [r3, #8]
            }
            break;
20001cb6:	e269      	b.n	2000218c <mss_i2c_isr+0x8d4>
            
        case ST_LOST_ARB:
            /* Set start bit.  Let's keep trying!  Don't give up! */
            this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
20001cb8:	687b      	ldr	r3, [r7, #4]
20001cba:	699b      	ldr	r3, [r3, #24]
20001cbc:	f04f 0201 	mov.w	r2, #1
20001cc0:	615a      	str	r2, [r3, #20]
            break;
20001cc2:	e263      	b.n	2000218c <mss_i2c_isr+0x8d4>
            
        /******************* MASTER TRANSMITTER *************************/
        case ST_SLAW_NACK:
            /* SLA+W has been transmitted; not ACK has been received - let's stop. */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
20001cc4:	687b      	ldr	r3, [r7, #4]
20001cc6:	699b      	ldr	r3, [r3, #24]
20001cc8:	f04f 0201 	mov.w	r2, #1
20001ccc:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
20001cce:	687b      	ldr	r3, [r7, #4]
20001cd0:	f04f 0202 	mov.w	r2, #2
20001cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            this_i2c->transaction = NO_TRANSACTION;
20001cd8:	687b      	ldr	r3, [r7, #4]
20001cda:	f04f 0200 	mov.w	r2, #0
20001cde:	721a      	strb	r2, [r3, #8]
            enable_slave_if_required(this_i2c);
20001ce0:	6878      	ldr	r0, [r7, #4]
20001ce2:	f7ff fdd5 	bl	20001890 <enable_slave_if_required>
            break;
20001ce6:	e251      	b.n	2000218c <mss_i2c_isr+0x8d4>
            
        case ST_SLAW_ACK:
        case ST_TX_DATA_ACK:
            /* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
            if (this_i2c->master_tx_idx < this_i2c->master_tx_size)
20001ce8:	687b      	ldr	r3, [r7, #4]
20001cea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
20001cec:	687b      	ldr	r3, [r7, #4]
20001cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001cf0:	429a      	cmp	r2, r3
20001cf2:	d20d      	bcs.n	20001d10 <mss_i2c_isr+0x458>
            {    
                this_i2c->hw_reg->DATA = this_i2c->master_tx_buffer[this_i2c->master_tx_idx++];
20001cf4:	687b      	ldr	r3, [r7, #4]
20001cf6:	695a      	ldr	r2, [r3, #20]
20001cf8:	687b      	ldr	r3, [r7, #4]
20001cfa:	6a19      	ldr	r1, [r3, #32]
20001cfc:	687b      	ldr	r3, [r7, #4]
20001cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20001d00:	4419      	add	r1, r3
20001d02:	7809      	ldrb	r1, [r1, #0]
20001d04:	7211      	strb	r1, [r2, #8]
20001d06:	f103 0201 	add.w	r2, r3, #1
20001d0a:	687b      	ldr	r3, [r7, #4]
20001d0c:	629a      	str	r2, [r3, #40]	; 0x28
                    NVIC_DisableIRQ( this_i2c->irqn );
                    clear_irq = 0u;
                }
                this_i2c->master_status = MSS_I2C_SUCCESS;
            }
            break;
20001d0e:	e23d      	b.n	2000218c <mss_i2c_isr+0x8d4>
            /* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
            if (this_i2c->master_tx_idx < this_i2c->master_tx_size)
            {    
                this_i2c->hw_reg->DATA = this_i2c->master_tx_buffer[this_i2c->master_tx_idx++];
            }
            else if ( this_i2c->transaction == MASTER_RANDOM_READ_TRANSACTION )
20001d10:	687b      	ldr	r3, [r7, #4]
20001d12:	7a1b      	ldrb	r3, [r3, #8]
20001d14:	2b03      	cmp	r3, #3
20001d16:	d109      	bne.n	20001d2c <mss_i2c_isr+0x474>
            {
                /* We are finished sending the address offset part of a random read transaction.
                 * It is is time to send a restart in order to change direction. */
                 this_i2c->dir = READ_DIR;
20001d18:	687b      	ldr	r3, [r7, #4]
20001d1a:	f04f 0201 	mov.w	r2, #1
20001d1e:	62da      	str	r2, [r3, #44]	; 0x2c
                 this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
20001d20:	687b      	ldr	r3, [r7, #4]
20001d22:	699b      	ldr	r3, [r3, #24]
20001d24:	f04f 0201 	mov.w	r2, #1
20001d28:	615a      	str	r2, [r3, #20]
                    NVIC_DisableIRQ( this_i2c->irqn );
                    clear_irq = 0u;
                }
                this_i2c->master_status = MSS_I2C_SUCCESS;
            }
            break;
20001d2a:	e22f      	b.n	2000218c <mss_i2c_isr+0x8d4>
            {
                /*
                 * Set the transaction back to NO_TRANSACTION to allow user to do further
                 * transaction
                 */
                this_i2c->transaction = NO_TRANSACTION;
20001d2c:	687b      	ldr	r3, [r7, #4]
20001d2e:	f04f 0200 	mov.w	r2, #0
20001d32:	721a      	strb	r2, [r3, #8]
                hold_bus = this_i2c->options & MSS_I2C_HOLD_BUS;
20001d34:	687b      	ldr	r3, [r7, #4]
20001d36:	7c1b      	ldrb	r3, [r3, #16]
20001d38:	f003 0301 	and.w	r3, r3, #1
20001d3c:	737b      	strb	r3, [r7, #13]

                /* Store the information of current I2C bus status in the bus_status*/
                this_i2c->bus_status  = hold_bus;
20001d3e:	687b      	ldr	r3, [r7, #4]
20001d40:	7b7a      	ldrb	r2, [r7, #13]
20001d42:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                if ( hold_bus == 0u )
20001d46:	7b7b      	ldrb	r3, [r7, #13]
20001d48:	2b00      	cmp	r3, #0
20001d4a:	d108      	bne.n	20001d5e <mss_i2c_isr+0x4a6>
                { 
                    this_i2c->hw_reg_bit->CTRL_STO = 0x01u; /*xmt stop condition */
20001d4c:	687b      	ldr	r3, [r7, #4]
20001d4e:	699b      	ldr	r3, [r3, #24]
20001d50:	f04f 0201 	mov.w	r2, #1
20001d54:	611a      	str	r2, [r3, #16]
                    enable_slave_if_required(this_i2c);
20001d56:	6878      	ldr	r0, [r7, #4]
20001d58:	f7ff fd9a 	bl	20001890 <enable_slave_if_required>
20001d5c:	e008      	b.n	20001d70 <mss_i2c_isr+0x4b8>
                }
                else
                {
                    NVIC_DisableIRQ( this_i2c->irqn );
20001d5e:	687b      	ldr	r3, [r7, #4]
20001d60:	8a5b      	ldrh	r3, [r3, #18]
20001d62:	b21b      	sxth	r3, r3
20001d64:	4618      	mov	r0, r3
20001d66:	f7ff fb67 	bl	20001438 <NVIC_DisableIRQ>
                    clear_irq = 0u;
20001d6a:	f04f 0300 	mov.w	r3, #0
20001d6e:	73bb      	strb	r3, [r7, #14]
                }
                this_i2c->master_status = MSS_I2C_SUCCESS;
20001d70:	687b      	ldr	r3, [r7, #4]
20001d72:	f04f 0200 	mov.w	r2, #0
20001d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            }
            break;
20001d7a:	e207      	b.n	2000218c <mss_i2c_isr+0x8d4>
            /* data byte SENT, ACK to be received
             * In fact, this means we've received a NACK (This may not be 
             * obvious, but if we've rec'd an ACK then we would be in state 
             * 0x28!) hence, let's send a stop bit
             */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
20001d7c:	687b      	ldr	r3, [r7, #4]
20001d7e:	699b      	ldr	r3, [r3, #24]
20001d80:	f04f 0201 	mov.w	r2, #1
20001d84:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
20001d86:	687b      	ldr	r3, [r7, #4]
20001d88:	f04f 0202 	mov.w	r2, #2
20001d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20001d90:	687b      	ldr	r3, [r7, #4]
20001d92:	f04f 0200 	mov.w	r2, #0
20001d96:	721a      	strb	r2, [r3, #8]
            enable_slave_if_required(this_i2c);
20001d98:	6878      	ldr	r0, [r7, #4]
20001d9a:	f7ff fd79 	bl	20001890 <enable_slave_if_required>

            break;
20001d9e:	e1f5      	b.n	2000218c <mss_i2c_isr+0x8d4>
      /* STATUS codes 08H, 10H, 38H are all covered in MTX mode */
        case ST_SLAR_ACK: /* SLA+R tx'ed. */
            /* Let's make sure we ACK the first data byte received (set AA bit in CTRL) unless
             * the next byte is the last byte of the read transaction.
             */
            if(this_i2c->master_rx_size > 1u)
20001da0:	687b      	ldr	r3, [r7, #4]
20001da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20001da4:	2b01      	cmp	r3, #1
20001da6:	d905      	bls.n	20001db4 <mss_i2c_isr+0x4fc>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20001da8:	687b      	ldr	r3, [r7, #4]
20001daa:	699b      	ldr	r3, [r3, #24]
20001dac:	f04f 0201 	mov.w	r2, #1
20001db0:	609a      	str	r2, [r3, #8]
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
                this_i2c->master_status = MSS_I2C_SUCCESS;
                this_i2c->transaction = NO_TRANSACTION;
            }
            break;
20001db2:	e1eb      	b.n	2000218c <mss_i2c_isr+0x8d4>
             */
            if(this_i2c->master_rx_size > 1u)
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
            }
            else if(1u == this_i2c->master_rx_size)
20001db4:	687b      	ldr	r3, [r7, #4]
20001db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20001db8:	2b01      	cmp	r3, #1
20001dba:	d105      	bne.n	20001dc8 <mss_i2c_isr+0x510>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
20001dbc:	687b      	ldr	r3, [r7, #4]
20001dbe:	699b      	ldr	r3, [r3, #24]
20001dc0:	f04f 0200 	mov.w	r2, #0
20001dc4:	609a      	str	r2, [r3, #8]
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
                this_i2c->master_status = MSS_I2C_SUCCESS;
                this_i2c->transaction = NO_TRANSACTION;
            }
            break;
20001dc6:	e1e1      	b.n	2000218c <mss_i2c_isr+0x8d4>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
            }
            else /* this_i2c->master_rx_size == 0u */
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20001dc8:	687b      	ldr	r3, [r7, #4]
20001dca:	699b      	ldr	r3, [r3, #24]
20001dcc:	f04f 0201 	mov.w	r2, #1
20001dd0:	609a      	str	r2, [r3, #8]
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
20001dd2:	687b      	ldr	r3, [r7, #4]
20001dd4:	699b      	ldr	r3, [r3, #24]
20001dd6:	f04f 0201 	mov.w	r2, #1
20001dda:	611a      	str	r2, [r3, #16]
                this_i2c->master_status = MSS_I2C_SUCCESS;
20001ddc:	687b      	ldr	r3, [r7, #4]
20001dde:	f04f 0200 	mov.w	r2, #0
20001de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
                this_i2c->transaction = NO_TRANSACTION;
20001de6:	687b      	ldr	r3, [r7, #4]
20001de8:	f04f 0200 	mov.w	r2, #0
20001dec:	721a      	strb	r2, [r3, #8]
            }
            break;
20001dee:	e1cd      	b.n	2000218c <mss_i2c_isr+0x8d4>
            
        case ST_SLAR_NACK: /* SLA+R tx'ed; let's release the bus (send a stop condition) */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
20001df0:	687b      	ldr	r3, [r7, #4]
20001df2:	699b      	ldr	r3, [r3, #24]
20001df4:	f04f 0201 	mov.w	r2, #1
20001df8:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
20001dfa:	687b      	ldr	r3, [r7, #4]
20001dfc:	f04f 0202 	mov.w	r2, #2
20001e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20001e04:	687b      	ldr	r3, [r7, #4]
20001e06:	f04f 0200 	mov.w	r2, #0
20001e0a:	721a      	strb	r2, [r3, #8]
            enable_slave_if_required(this_i2c);
20001e0c:	6878      	ldr	r0, [r7, #4]
20001e0e:	f7ff fd3f 	bl	20001890 <enable_slave_if_required>
            break;
20001e12:	e1bb      	b.n	2000218c <mss_i2c_isr+0x8d4>
          
        case ST_RX_DATA_ACK: /* Data byte received, ACK returned */
            /* First, get the data */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx++] = this_i2c->hw_reg->DATA;
20001e14:	687b      	ldr	r3, [r7, #4]
20001e16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20001e18:	687b      	ldr	r3, [r7, #4]
20001e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001e1c:	441a      	add	r2, r3
20001e1e:	6879      	ldr	r1, [r7, #4]
20001e20:	6949      	ldr	r1, [r1, #20]
20001e22:	7a09      	ldrb	r1, [r1, #8]
20001e24:	b2c9      	uxtb	r1, r1
20001e26:	7011      	strb	r1, [r2, #0]
20001e28:	f103 0201 	add.w	r2, r3, #1
20001e2c:	687b      	ldr	r3, [r7, #4]
20001e2e:	639a      	str	r2, [r3, #56]	; 0x38

            if( this_i2c->master_rx_idx >= (this_i2c->master_rx_size - 1u))
20001e30:	687b      	ldr	r3, [r7, #4]
20001e32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20001e34:	687b      	ldr	r3, [r7, #4]
20001e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20001e38:	f103 33ff 	add.w	r3, r3, #4294967295
20001e3c:	429a      	cmp	r2, r3
20001e3e:	f0c0 819e 	bcc.w	2000217e <mss_i2c_isr+0x8c6>
            {
                /* If we're at the second last byte, let's set AA to 0 so
                 * we return a NACK at the last byte. */
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
20001e42:	687b      	ldr	r3, [r7, #4]
20001e44:	699b      	ldr	r3, [r3, #24]
20001e46:	f04f 0200 	mov.w	r2, #0
20001e4a:	609a      	str	r2, [r3, #8]
            }
            break;
20001e4c:	e19e      	b.n	2000218c <mss_i2c_isr+0x8d4>
            
        case ST_RX_DATA_NACK: /* Data byte received, NACK returned */
            /* Get the data, then send a stop condition */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx] = this_i2c->hw_reg->DATA;
20001e4e:	687b      	ldr	r3, [r7, #4]
20001e50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20001e52:	687b      	ldr	r3, [r7, #4]
20001e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001e56:	4413      	add	r3, r2
20001e58:	687a      	ldr	r2, [r7, #4]
20001e5a:	6952      	ldr	r2, [r2, #20]
20001e5c:	7a12      	ldrb	r2, [r2, #8]
20001e5e:	b2d2      	uxtb	r2, r2
20001e60:	701a      	strb	r2, [r3, #0]
          
            hold_bus = this_i2c->options &  MSS_I2C_HOLD_BUS; 
20001e62:	687b      	ldr	r3, [r7, #4]
20001e64:	7c1b      	ldrb	r3, [r3, #16]
20001e66:	f003 0301 	and.w	r3, r3, #1
20001e6a:	737b      	strb	r3, [r7, #13]

            /* Store the information of current I2C bus status in the bus_status*/
            this_i2c->bus_status  = hold_bus;
20001e6c:	687b      	ldr	r3, [r7, #4]
20001e6e:	7b7a      	ldrb	r2, [r7, #13]
20001e70:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
            if ( hold_bus == 0u )
20001e74:	7b7b      	ldrb	r3, [r7, #13]
20001e76:	2b00      	cmp	r3, #0
20001e78:	d108      	bne.n	20001e8c <mss_i2c_isr+0x5d4>
            { 
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;  /*xmt stop condition */
20001e7a:	687b      	ldr	r3, [r7, #4]
20001e7c:	699b      	ldr	r3, [r3, #24]
20001e7e:	f04f 0201 	mov.w	r2, #1
20001e82:	611a      	str	r2, [r3, #16]

                /* Bus is released, now we can start listening to bus, if it is slave */
                   enable_slave_if_required(this_i2c);
20001e84:	6878      	ldr	r0, [r7, #4]
20001e86:	f7ff fd03 	bl	20001890 <enable_slave_if_required>
20001e8a:	e008      	b.n	20001e9e <mss_i2c_isr+0x5e6>
            }
            else
            {
                NVIC_DisableIRQ( this_i2c->irqn );
20001e8c:	687b      	ldr	r3, [r7, #4]
20001e8e:	8a5b      	ldrh	r3, [r3, #18]
20001e90:	b21b      	sxth	r3, r3
20001e92:	4618      	mov	r0, r3
20001e94:	f7ff fad0 	bl	20001438 <NVIC_DisableIRQ>
                clear_irq = 0u;
20001e98:	f04f 0300 	mov.w	r3, #0
20001e9c:	73bb      	strb	r3, [r7, #14]

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20001e9e:	687b      	ldr	r3, [r7, #4]
20001ea0:	f04f 0200 	mov.w	r2, #0
20001ea4:	721a      	strb	r2, [r3, #8]
            this_i2c->master_status = MSS_I2C_SUCCESS;
20001ea6:	687b      	ldr	r3, [r7, #4]
20001ea8:	f04f 0200 	mov.w	r2, #0
20001eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            break;
20001eb0:	e16c      	b.n	2000218c <mss_i2c_isr+0x8d4>
        
        /******************** SLAVE RECEIVER **************************/
        case ST_GCA_NACK: /* NACK after, GCA addressing */
        case ST_SLA_NACK: /* Re-enable AA (assert ack) bit for future transmissions */
            this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20001eb2:	687b      	ldr	r3, [r7, #4]
20001eb4:	699b      	ldr	r3, [r3, #24]
20001eb6:	f04f 0201 	mov.w	r2, #1
20001eba:	609a      	str	r2, [r3, #8]
            
            this_i2c->transaction = NO_TRANSACTION;
20001ebc:	687b      	ldr	r3, [r7, #4]
20001ebe:	f04f 0200 	mov.w	r2, #0
20001ec2:	721a      	strb	r2, [r3, #8]
            this_i2c->slave_status = MSS_I2C_SUCCESS;
20001ec4:	687b      	ldr	r3, [r7, #4]
20001ec6:	f04f 0200 	mov.w	r2, #0
20001eca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
20001ece:	687b      	ldr	r3, [r7, #4]
20001ed0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
20001ed4:	2b00      	cmp	r3, #0
20001ed6:	f000 8154 	beq.w	20002182 <mss_i2c_isr+0x8ca>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
20001eda:	687b      	ldr	r3, [r7, #4]
20001edc:	699b      	ldr	r3, [r3, #24]
20001ede:	f04f 0201 	mov.w	r2, #1
20001ee2:	615a      	str	r2, [r3, #20]
            }
            break;
20001ee4:	e152      	b.n	2000218c <mss_i2c_isr+0x8d4>
        case ST_SLV_LA: /* Arbitr. lost (SLA rec'd) */
            /*
             *  We lost arbitration and either the GCE or our address was the
             *  one received so pend the master operation we were starting.
             */
            this_i2c->is_transaction_pending = 1u;
20001ee6:	687b      	ldr	r3, [r7, #4]
20001ee8:	f04f 0201 	mov.w	r2, #1
20001eec:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
            /* Fall through to normal ST processing as we are now in slave mode */

        case ST_GCA: /* General call address received, ACK returned */
        case ST_SLAVE_SLAW: /* SLA+W received, ACK returned */

            this_i2c->transaction = WRITE_SLAVE_TRANSACTION;
20001ef0:	687b      	ldr	r3, [r7, #4]
20001ef2:	f04f 0204 	mov.w	r2, #4
20001ef6:	721a      	strb	r2, [r3, #8]
            this_i2c->slave_rx_idx = 0u;
20001ef8:	687b      	ldr	r3, [r7, #4]
20001efa:	f04f 0200 	mov.w	r2, #0
20001efe:	659a      	str	r2, [r3, #88]	; 0x58
            this_i2c->random_read_addr = 0u;
20001f00:	687b      	ldr	r3, [r7, #4]
20001f02:	f04f 0200 	mov.w	r2, #0
20001f06:	60da      	str	r2, [r3, #12]

             /* If Start Bit is set, clear it, but store that information since it is because of
              * pending transaction
              */
            if(this_i2c->hw_reg_bit->CTRL_STA)
20001f08:	687b      	ldr	r3, [r7, #4]
20001f0a:	699b      	ldr	r3, [r3, #24]
20001f0c:	695b      	ldr	r3, [r3, #20]
20001f0e:	2b00      	cmp	r3, #0
20001f10:	d009      	beq.n	20001f26 <mss_i2c_isr+0x66e>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 0u ;
20001f12:	687b      	ldr	r3, [r7, #4]
20001f14:	699b      	ldr	r3, [r3, #24]
20001f16:	f04f 0200 	mov.w	r2, #0
20001f1a:	615a      	str	r2, [r3, #20]
                this_i2c->is_transaction_pending = 1u;
20001f1c:	687b      	ldr	r3, [r7, #4]
20001f1e:	f04f 0201 	mov.w	r2, #1
20001f22:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
            }
            this_i2c->slave_status = MSS_I2C_IN_PROGRESS;
20001f26:	687b      	ldr	r3, [r7, #4]
20001f28:	f04f 0201 	mov.w	r2, #1
20001f2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
#ifdef MSS_I2C_INCLUDE_SLA_IN_RX_PAYLOAD
            /* Fall through to put address as first byte in payload buffer */
#else
            /* Only break from this case if the slave address must NOT be included at the
             * beginning of the received write data. */
            break;
20001f30:	e12c      	b.n	2000218c <mss_i2c_isr+0x8d4>
#endif            
        case ST_GCA_ACK: /* DATA received; ACK sent after GCA */
        case ST_RDATA: /* DATA received; must clear DATA register */
            if((this_i2c->slave_rx_buffer != (uint8_t *)0)
20001f32:	687b      	ldr	r3, [r7, #4]
20001f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
20001f36:	2b00      	cmp	r3, #0
20001f38:	d01c      	beq.n	20001f74 <mss_i2c_isr+0x6bc>
               && (this_i2c->slave_rx_idx < this_i2c->slave_rx_size))
20001f3a:	687b      	ldr	r3, [r7, #4]
20001f3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
20001f3e:	687b      	ldr	r3, [r7, #4]
20001f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
             * beginning of the received write data. */
            break;
#endif            
        case ST_GCA_ACK: /* DATA received; ACK sent after GCA */
        case ST_RDATA: /* DATA received; must clear DATA register */
            if((this_i2c->slave_rx_buffer != (uint8_t *)0)
20001f42:	429a      	cmp	r2, r3
20001f44:	d216      	bcs.n	20001f74 <mss_i2c_isr+0x6bc>
               && (this_i2c->slave_rx_idx < this_i2c->slave_rx_size))
            {
                data = this_i2c->hw_reg->DATA;
20001f46:	687b      	ldr	r3, [r7, #4]
20001f48:	695b      	ldr	r3, [r3, #20]
20001f4a:	7a1b      	ldrb	r3, [r3, #8]
20001f4c:	733b      	strb	r3, [r7, #12]
                this_i2c->slave_rx_buffer[this_i2c->slave_rx_idx++] = data;
20001f4e:	687b      	ldr	r3, [r7, #4]
20001f50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
20001f52:	687b      	ldr	r3, [r7, #4]
20001f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
20001f56:	441a      	add	r2, r3
20001f58:	7b39      	ldrb	r1, [r7, #12]
20001f5a:	7011      	strb	r1, [r2, #0]
20001f5c:	f103 0201 	add.w	r2, r3, #1
20001f60:	687b      	ldr	r3, [r7, #4]
20001f62:	659a      	str	r2, [r3, #88]	; 0x58
                {
                    /* Ignore the slave address byte in the random read address
                       computation in the case where INCLUDE_SLA_IN_RX_PAYLOAD
                       is defined. */
#endif
                    this_i2c->random_read_addr = (this_i2c->random_read_addr << 8) + data;
20001f64:	687b      	ldr	r3, [r7, #4]
20001f66:	68db      	ldr	r3, [r3, #12]
20001f68:	ea4f 2203 	mov.w	r2, r3, lsl #8
20001f6c:	7b3b      	ldrb	r3, [r7, #12]
20001f6e:	441a      	add	r2, r3
20001f70:	687b      	ldr	r3, [r7, #4]
20001f72:	60da      	str	r2, [r3, #12]
#ifdef MSS_I2C_INCLUDE_SLA_IN_RX_PAYLOAD
                }
#endif
            }
            
            if (this_i2c->slave_rx_idx >= this_i2c->slave_rx_size)
20001f74:	687b      	ldr	r3, [r7, #4]
20001f76:	6d9a      	ldr	r2, [r3, #88]	; 0x58
20001f78:	687b      	ldr	r3, [r7, #4]
20001f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20001f7c:	429a      	cmp	r2, r3
20001f7e:	f0c0 8102 	bcc.w	20002186 <mss_i2c_isr+0x8ce>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;   /* send a NACK when done (next reception) */
20001f82:	687b      	ldr	r3, [r7, #4]
20001f84:	699b      	ldr	r3, [r3, #24]
20001f86:	f04f 0200 	mov.w	r2, #0
20001f8a:	609a      	str	r2, [r3, #8]
            }
            break;
20001f8c:	e0fe      	b.n	2000218c <mss_i2c_isr+0x8d4>
            /* STOP or repeated START occurred. */
            /* We cannot be sure if the transaction has actually completed as
             * this hardware state reports that either a STOP or repeated START
             * condition has occurred. We assume that this is a repeated START
             * if the transaction was a write from the master to this point.*/
            if ( this_i2c->transaction == WRITE_SLAVE_TRANSACTION )
20001f8e:	687b      	ldr	r3, [r7, #4]
20001f90:	7a1b      	ldrb	r3, [r3, #8]
20001f92:	2b04      	cmp	r3, #4
20001f94:	d135      	bne.n	20002002 <mss_i2c_isr+0x74a>
            {
                if ( this_i2c->slave_rx_idx == this_i2c->slave_mem_offset_length )
20001f96:	687b      	ldr	r3, [r7, #4]
20001f98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
20001f9a:	687b      	ldr	r3, [r7, #4]
20001f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
20001f9e:	429a      	cmp	r2, r3
20001fa0:	d103      	bne.n	20001faa <mss_i2c_isr+0x6f2>
                {
                    this_i2c->slave_tx_idx = this_i2c->random_read_addr;
20001fa2:	687b      	ldr	r3, [r7, #4]
20001fa4:	68da      	ldr	r2, [r3, #12]
20001fa6:	687b      	ldr	r3, [r7, #4]
20001fa8:	64da      	str	r2, [r3, #76]	; 0x4c
                }
                {
                    /* Call the slave's write transaction handler if it exists. */
                    if ( this_i2c->slave_write_handler != 0u )
20001faa:	687b      	ldr	r3, [r7, #4]
20001fac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
20001fae:	2b00      	cmp	r3, #0
20001fb0:	d021      	beq.n	20001ff6 <mss_i2c_isr+0x73e>
                    {
                        mss_i2c_slave_handler_ret_t h_ret;
                        h_ret = this_i2c->slave_write_handler( this_i2c, this_i2c->slave_rx_buffer, (uint16_t)this_i2c->slave_rx_idx );
20001fb2:	687b      	ldr	r3, [r7, #4]
20001fb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
20001fb6:	687a      	ldr	r2, [r7, #4]
20001fb8:	6d11      	ldr	r1, [r2, #80]	; 0x50
20001fba:	687a      	ldr	r2, [r7, #4]
20001fbc:	6d92      	ldr	r2, [r2, #88]	; 0x58
20001fbe:	b292      	uxth	r2, r2
20001fc0:	6878      	ldr	r0, [r7, #4]
20001fc2:	4798      	blx	r3
20001fc4:	4603      	mov	r3, r0
20001fc6:	73fb      	strb	r3, [r7, #15]
                        if ( MSS_I2C_REENABLE_SLAVE_RX == h_ret )
20001fc8:	7bfb      	ldrb	r3, [r7, #15]
20001fca:	2b00      	cmp	r3, #0
20001fcc:	d108      	bne.n	20001fe0 <mss_i2c_isr+0x728>
                        {
                            /* There is a small risk that the write handler could
                             * call MSS_I2C_disable_slave() but return
                             * MSS_I2C_REENABLE_SLAVE_RX in error so we only
                             * enable ACKs if still in slave mode. */
                             enable_slave_if_required(this_i2c);
20001fce:	6878      	ldr	r0, [r7, #4]
20001fd0:	f7ff fc5e 	bl	20001890 <enable_slave_if_required>
                             this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20001fd4:	687b      	ldr	r3, [r7, #4]
20001fd6:	699b      	ldr	r3, [r3, #24]
20001fd8:	f04f 0201 	mov.w	r2, #1
20001fdc:	609a      	str	r2, [r3, #8]
                        }
                    }
                    else
                    {
                        /* Re-enable address acknowledge in case we were ready to nack the next received byte. */
                        this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20001fde:	e017      	b.n	20002010 <mss_i2c_isr+0x758>
                             enable_slave_if_required(this_i2c);
                             this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
                        }
                        else
                        {
                            this_i2c->hw_reg_bit->CTRL_AA = 0u;
20001fe0:	687b      	ldr	r3, [r7, #4]
20001fe2:	699b      	ldr	r3, [r3, #24]
20001fe4:	f04f 0200 	mov.w	r2, #0
20001fe8:	609a      	str	r2, [r3, #8]
                            /* Clear slave mode flag as well otherwise in mixed
                             * master/slave applications, the AA bit will get set by
                             * subsequent master operations. */
                            this_i2c->is_slave_enabled = 0u;
20001fea:	687b      	ldr	r3, [r7, #4]
20001fec:	f04f 0200 	mov.w	r2, #0
20001ff0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                        }
                    }
                    else
                    {
                        /* Re-enable address acknowledge in case we were ready to nack the next received byte. */
                        this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20001ff4:	e00c      	b.n	20002010 <mss_i2c_isr+0x758>
20001ff6:	687b      	ldr	r3, [r7, #4]
20001ff8:	699b      	ldr	r3, [r3, #24]
20001ffa:	f04f 0201 	mov.w	r2, #1
20001ffe:	609a      	str	r2, [r3, #8]
20002000:	e006      	b.n	20002010 <mss_i2c_isr+0x758>
            {
                /*
                 * Reset slave_tx_idx so that a subsequent read will result in the slave's
                 * transmit buffer being sent from the first byte.
                 */
                this_i2c->slave_tx_idx = 0u;
20002002:	687b      	ldr	r3, [r7, #4]
20002004:	f04f 0200 	mov.w	r2, #0
20002008:	64da      	str	r2, [r3, #76]	; 0x4c
                /*
                 * See if we need to re-enable acknowledgement as some error conditions, such
                 * as a master prematurely ending a transfer, can see us get here with AA set
                 * to 0 which will disable slave operation if we are not careful.
                 */
                enable_slave_if_required(this_i2c);
2000200a:	6878      	ldr	r0, [r7, #4]
2000200c:	f7ff fc40 	bl	20001890 <enable_slave_if_required>
            }

            /* Mark any previous master write transaction as complete. */
            this_i2c->slave_status = MSS_I2C_SUCCESS;
20002010:	687b      	ldr	r3, [r7, #4]
20002012:	f04f 0200 	mov.w	r2, #0
20002016:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
2000201a:	687b      	ldr	r3, [r7, #4]
2000201c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
20002020:	2b00      	cmp	r3, #0
20002022:	d004      	beq.n	2000202e <mss_i2c_isr+0x776>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
20002024:	687b      	ldr	r3, [r7, #4]
20002026:	699b      	ldr	r3, [r3, #24]
20002028:	f04f 0201 	mov.w	r2, #1
2000202c:	615a      	str	r2, [r3, #20]

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
2000202e:	687b      	ldr	r3, [r7, #4]
20002030:	f04f 0200 	mov.w	r2, #0
20002034:	721a      	strb	r2, [r3, #8]
            break;
20002036:	e0a9      	b.n	2000218c <mss_i2c_isr+0x8d4>
        case ST_SLV_RST: /* SMBUS ONLY: timeout state. must clear interrupt */
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction.
             */
            this_i2c->transaction = NO_TRANSACTION;
20002038:	687b      	ldr	r3, [r7, #4]
2000203a:	f04f 0200 	mov.w	r2, #0
2000203e:	721a      	strb	r2, [r3, #8]
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
20002040:	687b      	ldr	r3, [r7, #4]
20002042:	f04f 0200 	mov.w	r2, #0
20002046:	64da      	str	r2, [r3, #76]	; 0x4c
            /*
             * Clear status to I2C_FAILED only if there was an operation in progress.
             */
            if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
20002048:	687b      	ldr	r3, [r7, #4]
2000204a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
2000204e:	b2db      	uxtb	r3, r3
20002050:	2b01      	cmp	r3, #1
20002052:	d104      	bne.n	2000205e <mss_i2c_isr+0x7a6>
            {
                this_i2c->slave_status = MSS_I2C_FAILED;
20002054:	687b      	ldr	r3, [r7, #4]
20002056:	f04f 0202 	mov.w	r2, #2
2000205a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            }

            enable_slave_if_required(this_i2c); /* Make sure AA is set correctly */
2000205e:	6878      	ldr	r0, [r7, #4]
20002060:	f7ff fc16 	bl	20001890 <enable_slave_if_required>

            break;
20002064:	e092      	b.n	2000218c <mss_i2c_isr+0x8d4>
            
        /****************** SLAVE TRANSMITTER **************************/
        case ST_SLAVE_SLAR_ACK: /* SLA+R received, ACK returned */
        case ST_SLARW_LA:   /* Arbitration lost, SLA+R received, ACK returned */
        case ST_RACK: /* Data tx'ed, ACK received */
            if ( status == ST_SLAVE_SLAR_ACK )
20002066:	7afb      	ldrb	r3, [r7, #11]
20002068:	b2db      	uxtb	r3, r3
2000206a:	2ba8      	cmp	r3, #168	; 0xa8
2000206c:	d11b      	bne.n	200020a6 <mss_i2c_isr+0x7ee>
            {
                this_i2c->transaction = READ_SLAVE_TRANSACTION;
2000206e:	687b      	ldr	r3, [r7, #4]
20002070:	f04f 0205 	mov.w	r2, #5
20002074:	721a      	strb	r2, [r3, #8]
                this_i2c->random_read_addr = 0u;
20002076:	687b      	ldr	r3, [r7, #4]
20002078:	f04f 0200 	mov.w	r2, #0
2000207c:	60da      	str	r2, [r3, #12]

                this_i2c->slave_status = MSS_I2C_IN_PROGRESS;
2000207e:	687b      	ldr	r3, [r7, #4]
20002080:	f04f 0201 	mov.w	r2, #1
20002084:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

                /* If Start Bit is set, clear it, but store that information since it is because of
                 * pending transaction
                 */
                if(this_i2c->hw_reg_bit->CTRL_STA)
20002088:	687b      	ldr	r3, [r7, #4]
2000208a:	699b      	ldr	r3, [r3, #24]
2000208c:	695b      	ldr	r3, [r3, #20]
2000208e:	2b00      	cmp	r3, #0
20002090:	d009      	beq.n	200020a6 <mss_i2c_isr+0x7ee>
                {
                    this_i2c->hw_reg_bit->CTRL_STA = 0u ;
20002092:	687b      	ldr	r3, [r7, #4]
20002094:	699b      	ldr	r3, [r3, #24]
20002096:	f04f 0200 	mov.w	r2, #0
2000209a:	615a      	str	r2, [r3, #20]
                    this_i2c->is_transaction_pending = 1u;
2000209c:	687b      	ldr	r3, [r7, #4]
2000209e:	f04f 0201 	mov.w	r2, #1
200020a2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                }
            }
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size)
200020a6:	687b      	ldr	r3, [r7, #4]
200020a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
200020aa:	687b      	ldr	r3, [r7, #4]
200020ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
200020ae:	429a      	cmp	r2, r3
200020b0:	d305      	bcc.n	200020be <mss_i2c_isr+0x806>
            {
                /* Ensure 0xFF is returned to the master when the slave specifies
                 * an empty transmit buffer. */
                this_i2c->hw_reg->DATA = 0xFFu;
200020b2:	687b      	ldr	r3, [r7, #4]
200020b4:	695b      	ldr	r3, [r3, #20]
200020b6:	f04f 32ff 	mov.w	r2, #4294967295
200020ba:	721a      	strb	r2, [r3, #8]
200020bc:	e00c      	b.n	200020d8 <mss_i2c_isr+0x820>
            }
            else
            {
                /* Load the data the data byte to be sent to the master. */
                this_i2c->hw_reg->DATA = this_i2c->slave_tx_buffer[this_i2c->slave_tx_idx++];
200020be:	687b      	ldr	r3, [r7, #4]
200020c0:	695a      	ldr	r2, [r3, #20]
200020c2:	687b      	ldr	r3, [r7, #4]
200020c4:	6c59      	ldr	r1, [r3, #68]	; 0x44
200020c6:	687b      	ldr	r3, [r7, #4]
200020c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
200020ca:	4419      	add	r1, r3
200020cc:	7809      	ldrb	r1, [r1, #0]
200020ce:	7211      	strb	r1, [r2, #8]
200020d0:	f103 0201 	add.w	r2, r3, #1
200020d4:	687b      	ldr	r3, [r7, #4]
200020d6:	64da      	str	r2, [r3, #76]	; 0x4c
            }
            /* Determine if this is the last data byte to send to the master. */
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size) /* last byte? */
200020d8:	687b      	ldr	r3, [r7, #4]
200020da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
200020dc:	687b      	ldr	r3, [r7, #4]
200020de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
200020e0:	429a      	cmp	r2, r3
200020e2:	d352      	bcc.n	2000218a <mss_i2c_isr+0x8d2>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
200020e4:	687b      	ldr	r3, [r7, #4]
200020e6:	699b      	ldr	r3, [r3, #24]
200020e8:	f04f 0200 	mov.w	r2, #0
200020ec:	609a      	str	r2, [r3, #8]
                /* Next read transaction will result in slave's transmit buffer
                 * being sent from the first byte. */
                this_i2c->slave_tx_idx = 0u;
200020ee:	687b      	ldr	r3, [r7, #4]
200020f0:	f04f 0200 	mov.w	r2, #0
200020f4:	64da      	str	r2, [r3, #76]	; 0x4c
            }
            break;
200020f6:	e049      	b.n	2000218c <mss_i2c_isr+0x8d4>
        case ST_SLAVE_RNACK:    /* Data byte has been transmitted; not-ACK has been received. */
        case ST_FINAL: /* Last Data byte tx'ed, ACK received */
            /* We assume that the transaction will be stopped by the master.
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte. */
            this_i2c->slave_tx_idx = 0u;
200020f8:	687b      	ldr	r3, [r7, #4]
200020fa:	f04f 0200 	mov.w	r2, #0
200020fe:	64da      	str	r2, [r3, #76]	; 0x4c
            this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20002100:	687b      	ldr	r3, [r7, #4]
20002102:	699b      	ldr	r3, [r3, #24]
20002104:	f04f 0201 	mov.w	r2, #1
20002108:	609a      	str	r2, [r3, #8]

            /*  Mark previous state as complete */
            this_i2c->slave_status = MSS_I2C_SUCCESS;
2000210a:	687b      	ldr	r3, [r7, #4]
2000210c:	f04f 0200 	mov.w	r2, #0
20002110:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
20002114:	687b      	ldr	r3, [r7, #4]
20002116:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
2000211a:	2b00      	cmp	r3, #0
2000211c:	d004      	beq.n	20002128 <mss_i2c_isr+0x870>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
2000211e:	687b      	ldr	r3, [r7, #4]
20002120:	699b      	ldr	r3, [r3, #24]
20002122:	f04f 0201 	mov.w	r2, #1
20002126:	615a      	str	r2, [r3, #20]

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20002128:	687b      	ldr	r3, [r7, #4]
2000212a:	f04f 0200 	mov.w	r2, #0
2000212e:	721a      	strb	r2, [r3, #8]
            break;
20002130:	e02c      	b.n	2000218c <mss_i2c_isr+0x8d4>
        case ST_RESET_ACTIVATED:
        case ST_BUS_ERROR: /* Bus error during MST or selected slave modes */
        default:
            /* Some undefined state has encountered. Clear Start bit to make
             * sure, next good transaction happen */
            this_i2c->hw_reg_bit->CTRL_STA = 0x00u;
20002132:	687b      	ldr	r3, [r7, #4]
20002134:	699b      	ldr	r3, [r3, #24]
20002136:	f04f 0200 	mov.w	r2, #0
2000213a:	615a      	str	r2, [r3, #20]
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
2000213c:	687b      	ldr	r3, [r7, #4]
2000213e:	f04f 0200 	mov.w	r2, #0
20002142:	721a      	strb	r2, [r3, #8]
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
20002144:	687b      	ldr	r3, [r7, #4]
20002146:	f04f 0200 	mov.w	r2, #0
2000214a:	64da      	str	r2, [r3, #76]	; 0x4c
            /*
             * Clear statuses to I2C_FAILED only if there was an operation in progress.
             */
            if(MSS_I2C_IN_PROGRESS == this_i2c->master_status)
2000214c:	687b      	ldr	r3, [r7, #4]
2000214e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
20002152:	b2db      	uxtb	r3, r3
20002154:	2b01      	cmp	r3, #1
20002156:	d104      	bne.n	20002162 <mss_i2c_isr+0x8aa>
            {
                this_i2c->master_status = MSS_I2C_FAILED;
20002158:	687b      	ldr	r3, [r7, #4]
2000215a:	f04f 0202 	mov.w	r2, #2
2000215e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            }

            if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
20002162:	687b      	ldr	r3, [r7, #4]
20002164:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
20002168:	b2db      	uxtb	r3, r3
2000216a:	2b01      	cmp	r3, #1
2000216c:	d10e      	bne.n	2000218c <mss_i2c_isr+0x8d4>
            {
                this_i2c->slave_status = MSS_I2C_FAILED;
2000216e:	687b      	ldr	r3, [r7, #4]
20002170:	f04f 0202 	mov.w	r2, #2
20002174:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
20002178:	e008      	b.n	2000218c <mss_i2c_isr+0x8d4>
             */
            if(this_i2c->transaction != this_i2c->pending_transaction)
            {
                this_i2c->transaction = this_i2c->pending_transaction;
            }
            break;
2000217a:	bf00      	nop
2000217c:	e006      	b.n	2000218c <mss_i2c_isr+0x8d4>
            {
                /* If we're at the second last byte, let's set AA to 0 so
                 * we return a NACK at the last byte. */
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
            }
            break;
2000217e:	bf00      	nop
20002180:	e004      	b.n	2000218c <mss_i2c_isr+0x8d4>
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
            }
            break;
20002182:	bf00      	nop
20002184:	e002      	b.n	2000218c <mss_i2c_isr+0x8d4>
            
            if (this_i2c->slave_rx_idx >= this_i2c->slave_rx_size)
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;   /* send a NACK when done (next reception) */
            }
            break;
20002186:	bf00      	nop
20002188:	e000      	b.n	2000218c <mss_i2c_isr+0x8d4>
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
                /* Next read transaction will result in slave's transmit buffer
                 * being sent from the first byte. */
                this_i2c->slave_tx_idx = 0u;
            }
            break;
2000218a:	bf00      	nop


            break;
    }
    
    if ( clear_irq )
2000218c:	7bbb      	ldrb	r3, [r7, #14]
2000218e:	2b00      	cmp	r3, #0
20002190:	d004      	beq.n	2000219c <mss_i2c_isr+0x8e4>
    {
        /* clear interrupt. */
        this_i2c->hw_reg_bit->CTRL_SI = 0u;
20002192:	687b      	ldr	r3, [r7, #4]
20002194:	699b      	ldr	r3, [r3, #24]
20002196:	f04f 0200 	mov.w	r2, #0
2000219a:	60da      	str	r2, [r3, #12]
    }
    
    /* Read the status register to ensure the last I2C registers write took place
     * in a system built around a bus making use of posted writes. */
    status = this_i2c->hw_reg->STATUS;
2000219c:	687b      	ldr	r3, [r7, #4]
2000219e:	695b      	ldr	r3, [r3, #20]
200021a0:	791b      	ldrb	r3, [r3, #4]
200021a2:	72fb      	strb	r3, [r7, #11]
}
200021a4:	f107 0710 	add.w	r7, r7, #16
200021a8:	46bd      	mov	sp, r7
200021aa:	bd80      	pop	{r7, pc}

200021ac <disable_interrupts>:
}
/*------------------------------------------------------------------------------
 *
 */
static uint32_t disable_interrupts( void )
{
200021ac:	b580      	push	{r7, lr}
200021ae:	b082      	sub	sp, #8
200021b0:	af00      	add	r7, sp, #0
    uint32_t primask;
    primask = __get_PRIMASK();
200021b2:	f000 f92d 	bl	20002410 <__get_PRIMASK>
200021b6:	4603      	mov	r3, r0
200021b8:	607b      	str	r3, [r7, #4]
    __set_PRIMASK(1u);
200021ba:	f04f 0001 	mov.w	r0, #1
200021be:	f000 f937 	bl	20002430 <__set_PRIMASK>
    return primask;
200021c2:	687b      	ldr	r3, [r7, #4]
}
200021c4:	4618      	mov	r0, r3
200021c6:	f107 0708 	add.w	r7, r7, #8
200021ca:	46bd      	mov	sp, r7
200021cc:	bd80      	pop	{r7, pc}
200021ce:	bf00      	nop

200021d0 <restore_interrupts>:

/*------------------------------------------------------------------------------
 *
 */
static void restore_interrupts( uint32_t primask )
{
200021d0:	b580      	push	{r7, lr}
200021d2:	b082      	sub	sp, #8
200021d4:	af00      	add	r7, sp, #0
200021d6:	6078      	str	r0, [r7, #4]
    __set_PRIMASK( primask );
200021d8:	6878      	ldr	r0, [r7, #4]
200021da:	f000 f929 	bl	20002430 <__set_PRIMASK>
}
200021de:	f107 0708 	add.w	r7, r7, #8
200021e2:	46bd      	mov	sp, r7
200021e4:	bd80      	pop	{r7, pc}
200021e6:	bf00      	nop

200021e8 <I2C0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void I2C0_IRQHandler( void )
#else
void I2C0_IRQHandler( void )
#endif
{
200021e8:	4668      	mov	r0, sp
200021ea:	f020 0107 	bic.w	r1, r0, #7
200021ee:	468d      	mov	sp, r1
200021f0:	b589      	push	{r0, r3, r7, lr}
200021f2:	af00      	add	r7, sp, #0
    mss_i2c_isr( &g_mss_i2c0 );
200021f4:	f643 50b8 	movw	r0, #15800	; 0x3db8
200021f8:	f2c2 0000 	movt	r0, #8192	; 0x2000
200021fc:	f7ff fb5c 	bl	200018b8 <mss_i2c_isr>
    NVIC_ClearPendingIRQ( I2C0_IRQn );
20002200:	f04f 000e 	mov.w	r0, #14
20002204:	f7ff f936 	bl	20001474 <NVIC_ClearPendingIRQ>
}
20002208:	46bd      	mov	sp, r7
2000220a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
2000220e:	4685      	mov	sp, r0
20002210:	4770      	bx	lr
20002212:	bf00      	nop

20002214 <I2C1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void I2C1_IRQHandler( void )
#else
void I2C1_IRQHandler( void )
#endif
{
20002214:	4668      	mov	r0, sp
20002216:	f020 0107 	bic.w	r1, r0, #7
2000221a:	468d      	mov	sp, r1
2000221c:	b589      	push	{r0, r3, r7, lr}
2000221e:	af00      	add	r7, sp, #0
    mss_i2c_isr( &g_mss_i2c1 );
20002220:	f643 602c 	movw	r0, #15916	; 0x3e2c
20002224:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002228:	f7ff fb46 	bl	200018b8 <mss_i2c_isr>
    NVIC_ClearPendingIRQ( I2C1_IRQn );
2000222c:	f04f 0011 	mov.w	r0, #17
20002230:	f7ff f920 	bl	20001474 <NVIC_ClearPendingIRQ>
}
20002234:	46bd      	mov	sp, r7
20002236:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
2000223a:	4685      	mov	sp, r0
2000223c:	4770      	bx	lr
2000223e:	bf00      	nop

20002240 <NVIC_EnableIRQ>:
 *
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
20002240:	b480      	push	{r7}
20002242:	b083      	sub	sp, #12
20002244:	af00      	add	r7, sp, #0
20002246:	4603      	mov	r3, r0
20002248:	80fb      	strh	r3, [r7, #6]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
2000224a:	f24e 1300 	movw	r3, #57600	; 0xe100
2000224e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002252:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20002256:	ea4f 1252 	mov.w	r2, r2, lsr #5
2000225a:	88f9      	ldrh	r1, [r7, #6]
2000225c:	f001 011f 	and.w	r1, r1, #31
20002260:	f04f 0001 	mov.w	r0, #1
20002264:	fa00 f101 	lsl.w	r1, r0, r1
20002268:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
2000226c:	f107 070c 	add.w	r7, r7, #12
20002270:	46bd      	mov	sp, r7
20002272:	bc80      	pop	{r7}
20002274:	4770      	bx	lr
20002276:	bf00      	nop

20002278 <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20002278:	b480      	push	{r7}
2000227a:	b083      	sub	sp, #12
2000227c:	af00      	add	r7, sp, #0
2000227e:	4603      	mov	r3, r0
20002280:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20002282:	f24e 1300 	movw	r3, #57600	; 0xe100
20002286:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000228a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
2000228e:	ea4f 1252 	mov.w	r2, r2, lsr #5
20002292:	88f9      	ldrh	r1, [r7, #6]
20002294:	f001 011f 	and.w	r1, r1, #31
20002298:	f04f 0001 	mov.w	r0, #1
2000229c:	fa00 f101 	lsl.w	r1, r0, r1
200022a0:	f102 0260 	add.w	r2, r2, #96	; 0x60
200022a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
200022a8:	f107 070c 	add.w	r7, r7, #12
200022ac:	46bd      	mov	sp, r7
200022ae:	bc80      	pop	{r7}
200022b0:	4770      	bx	lr
200022b2:	bf00      	nop

200022b4 <MSS_GPIO_init>:
/*-------------------------------------------------------------------------*//**
 * MSS_GPIO_init
 * See "mss_gpio.h" for details of how to use this function.
 */
void MSS_GPIO_init( void )
{
200022b4:	b580      	push	{r7, lr}
200022b6:	b082      	sub	sp, #8
200022b8:	af00      	add	r7, sp, #0
    uint32_t i;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
200022ba:	f242 0300 	movw	r3, #8192	; 0x2000
200022be:	f2ce 0304 	movt	r3, #57348	; 0xe004
200022c2:	f242 0200 	movw	r2, #8192	; 0x2000
200022c6:	f2ce 0204 	movt	r2, #57348	; 0xe004
200022ca:	6b12      	ldr	r2, [r2, #48]	; 0x30
200022cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
200022d0:	631a      	str	r2, [r3, #48]	; 0x30
    /* Clear any previously pended MSS GPIO interrupt */
    for ( i = 0U; i < NB_OF_GPIO; ++i )
200022d2:	f04f 0300 	mov.w	r3, #0
200022d6:	607b      	str	r3, [r7, #4]
200022d8:	e00e      	b.n	200022f8 <MSS_GPIO_init+0x44>
    {
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[i] );
200022da:	687a      	ldr	r2, [r7, #4]
200022dc:	f643 2340 	movw	r3, #14912	; 0x3a40
200022e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200022e4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
200022e8:	b21b      	sxth	r3, r3
200022ea:	4618      	mov	r0, r3
200022ec:	f7ff ffc4 	bl	20002278 <NVIC_ClearPendingIRQ>
    uint32_t i;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
    /* Clear any previously pended MSS GPIO interrupt */
    for ( i = 0U; i < NB_OF_GPIO; ++i )
200022f0:	687b      	ldr	r3, [r7, #4]
200022f2:	f103 0301 	add.w	r3, r3, #1
200022f6:	607b      	str	r3, [r7, #4]
200022f8:	687b      	ldr	r3, [r7, #4]
200022fa:	2b1f      	cmp	r3, #31
200022fc:	d9ed      	bls.n	200022da <MSS_GPIO_init+0x26>
    {
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[i] );
    }
    /* Take MSS GPIO hardware out of reset. */
    SYSREG->SOFT_RST_CR &= ~SYSREG_GPIO_SOFTRESET_MASK;
200022fe:	f242 0300 	movw	r3, #8192	; 0x2000
20002302:	f2ce 0304 	movt	r3, #57348	; 0xe004
20002306:	f242 0200 	movw	r2, #8192	; 0x2000
2000230a:	f2ce 0204 	movt	r2, #57348	; 0xe004
2000230e:	6b12      	ldr	r2, [r2, #48]	; 0x30
20002310:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
20002314:	631a      	str	r2, [r3, #48]	; 0x30
}
20002316:	f107 0708 	add.w	r7, r7, #8
2000231a:	46bd      	mov	sp, r7
2000231c:	bd80      	pop	{r7, pc}
2000231e:	bf00      	nop

20002320 <MSS_GPIO_config>:
void MSS_GPIO_config
(
    mss_gpio_id_t port_id,
    uint32_t config
)
{
20002320:	b480      	push	{r7}
20002322:	b085      	sub	sp, #20
20002324:	af00      	add	r7, sp, #0
20002326:	4603      	mov	r3, r0
20002328:	6039      	str	r1, [r7, #0]
2000232a:	71fb      	strb	r3, [r7, #7]
    uint32_t gpio_idx = (uint32_t)port_id;
2000232c:	79fb      	ldrb	r3, [r7, #7]
2000232e:	60fb      	str	r3, [r7, #12]
    
    ASSERT( gpio_idx < NB_OF_GPIO );
20002330:	68fb      	ldr	r3, [r7, #12]
20002332:	2b1f      	cmp	r3, #31
20002334:	d900      	bls.n	20002338 <MSS_GPIO_config+0x18>
20002336:	be00      	bkpt	0x0000

    if ( gpio_idx < NB_OF_GPIO )
20002338:	68fb      	ldr	r3, [r7, #12]
2000233a:	2b1f      	cmp	r3, #31
2000233c:	d808      	bhi.n	20002350 <MSS_GPIO_config+0x30>
    {
        *(g_config_reg_lut[gpio_idx]) = config;
2000233e:	68fa      	ldr	r2, [r7, #12]
20002340:	f643 13c0 	movw	r3, #14784	; 0x39c0
20002344:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000234c:	683a      	ldr	r2, [r7, #0]
2000234e:	601a      	str	r2, [r3, #0]
    }
}
20002350:	f107 0714 	add.w	r7, r7, #20
20002354:	46bd      	mov	sp, r7
20002356:	bc80      	pop	{r7}
20002358:	4770      	bx	lr
2000235a:	bf00      	nop

2000235c <MSS_GPIO_enable_irq>:
 */
void MSS_GPIO_enable_irq
(
    mss_gpio_id_t port_id
)
{
2000235c:	b580      	push	{r7, lr}
2000235e:	b084      	sub	sp, #16
20002360:	af00      	add	r7, sp, #0
20002362:	4603      	mov	r3, r0
20002364:	71fb      	strb	r3, [r7, #7]
    uint32_t cfg_value;
    uint32_t gpio_idx = (uint32_t)port_id;
20002366:	79fb      	ldrb	r3, [r7, #7]
20002368:	60fb      	str	r3, [r7, #12]
    
    ASSERT( gpio_idx < NB_OF_GPIO );
2000236a:	68fb      	ldr	r3, [r7, #12]
2000236c:	2b1f      	cmp	r3, #31
2000236e:	d900      	bls.n	20002372 <MSS_GPIO_enable_irq+0x16>
20002370:	be00      	bkpt	0x0000
    
    if ( gpio_idx < NB_OF_GPIO )
20002372:	68fb      	ldr	r3, [r7, #12]
20002374:	2b1f      	cmp	r3, #31
20002376:	d81e      	bhi.n	200023b6 <MSS_GPIO_enable_irq+0x5a>
    {
        cfg_value = *(g_config_reg_lut[gpio_idx]);
20002378:	68fa      	ldr	r2, [r7, #12]
2000237a:	f643 13c0 	movw	r3, #14784	; 0x39c0
2000237e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20002386:	681b      	ldr	r3, [r3, #0]
20002388:	60bb      	str	r3, [r7, #8]
        *(g_config_reg_lut[gpio_idx]) = (cfg_value | GPIO_INT_ENABLE_MASK);
2000238a:	68fa      	ldr	r2, [r7, #12]
2000238c:	f643 13c0 	movw	r3, #14784	; 0x39c0
20002390:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20002398:	68ba      	ldr	r2, [r7, #8]
2000239a:	f042 0208 	orr.w	r2, r2, #8
2000239e:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ( g_gpio_irqn_lut[gpio_idx] );
200023a0:	68fa      	ldr	r2, [r7, #12]
200023a2:	f643 2340 	movw	r3, #14912	; 0x3a40
200023a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200023aa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
200023ae:	b21b      	sxth	r3, r3
200023b0:	4618      	mov	r0, r3
200023b2:	f7ff ff45 	bl	20002240 <NVIC_EnableIRQ>
    }
}
200023b6:	f107 0710 	add.w	r7, r7, #16
200023ba:	46bd      	mov	sp, r7
200023bc:	bd80      	pop	{r7, pc}
200023be:	bf00      	nop

200023c0 <MSS_GPIO_clear_irq>:
 */
void MSS_GPIO_clear_irq
(
    mss_gpio_id_t port_id
)
{
200023c0:	b580      	push	{r7, lr}
200023c2:	b084      	sub	sp, #16
200023c4:	af00      	add	r7, sp, #0
200023c6:	4603      	mov	r3, r0
200023c8:	71fb      	strb	r3, [r7, #7]
    uint32_t gpio_idx = (uint32_t)port_id;
200023ca:	79fb      	ldrb	r3, [r7, #7]
200023cc:	60fb      	str	r3, [r7, #12]
    
    ASSERT( gpio_idx < NB_OF_GPIO );
200023ce:	68fb      	ldr	r3, [r7, #12]
200023d0:	2b1f      	cmp	r3, #31
200023d2:	d900      	bls.n	200023d6 <MSS_GPIO_clear_irq+0x16>
200023d4:	be00      	bkpt	0x0000
    
    if ( gpio_idx < NB_OF_GPIO )
200023d6:	68fb      	ldr	r3, [r7, #12]
200023d8:	2b1f      	cmp	r3, #31
200023da:	d815      	bhi.n	20002408 <MSS_GPIO_clear_irq+0x48>
    {
        GPIO->GPIO_IRQ = ((uint32_t)1) << gpio_idx;
200023dc:	f243 0300 	movw	r3, #12288	; 0x3000
200023e0:	f2c4 0301 	movt	r3, #16385	; 0x4001
200023e4:	68fa      	ldr	r2, [r7, #12]
200023e6:	f04f 0101 	mov.w	r1, #1
200023ea:	fa01 f202 	lsl.w	r2, r1, r2
200023ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[gpio_idx] );
200023f2:	68fa      	ldr	r2, [r7, #12]
200023f4:	f643 2340 	movw	r3, #14912	; 0x3a40
200023f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200023fc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
20002400:	b21b      	sxth	r3, r3
20002402:	4618      	mov	r0, r3
20002404:	f7ff ff38 	bl	20002278 <NVIC_ClearPendingIRQ>
    }
}
20002408:	f107 0710 	add.w	r7, r7, #16
2000240c:	46bd      	mov	sp, r7
2000240e:	bd80      	pop	{r7, pc}

20002410 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
20002410:	b480      	push	{r7}
20002412:	b083      	sub	sp, #12
20002414:	af00      	add	r7, sp, #0
  uint32_t result=0;
20002416:	f04f 0300 	mov.w	r3, #0
2000241a:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
2000241c:	f3ef 8310 	mrs	r3, PRIMASK
20002420:	607b      	str	r3, [r7, #4]
  return(result);
20002422:	687b      	ldr	r3, [r7, #4]
}
20002424:	4618      	mov	r0, r3
20002426:	f107 070c 	add.w	r7, r7, #12
2000242a:	46bd      	mov	sp, r7
2000242c:	bc80      	pop	{r7}
2000242e:	4770      	bx	lr

20002430 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
20002430:	b480      	push	{r7}
20002432:	b083      	sub	sp, #12
20002434:	af00      	add	r7, sp, #0
20002436:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
20002438:	687b      	ldr	r3, [r7, #4]
2000243a:	f383 8810 	msr	PRIMASK, r3
}
2000243e:	f107 070c 	add.w	r7, r7, #12
20002442:	46bd      	mov	sp, r7
20002444:	bc80      	pop	{r7}
20002446:	4770      	bx	lr

20002448 <SystemInit>:

/***************************************************************************//**
 * See system_a2fxxxm3f.h for details.
 */
void SystemInit(void)
{
20002448:	b480      	push	{r7}
2000244a:	af00      	add	r7, sp, #0
    /*
     * Do not make use of global variables or make any asumptions regarding
     * memory content if modifying this function. The memory content has not been
     * initialised by the time this function is called by the start-up code.
     */
}
2000244c:	46bd      	mov	sp, r7
2000244e:	bc80      	pop	{r7}
20002450:	4770      	bx	lr
20002452:	bf00      	nop

20002454 <__aeabi_drsub>:
20002454:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
20002458:	e002      	b.n	20002460 <__adddf3>
2000245a:	bf00      	nop

2000245c <__aeabi_dsub>:
2000245c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

20002460 <__adddf3>:
20002460:	b530      	push	{r4, r5, lr}
20002462:	ea4f 0441 	mov.w	r4, r1, lsl #1
20002466:	ea4f 0543 	mov.w	r5, r3, lsl #1
2000246a:	ea94 0f05 	teq	r4, r5
2000246e:	bf08      	it	eq
20002470:	ea90 0f02 	teqeq	r0, r2
20002474:	bf1f      	itttt	ne
20002476:	ea54 0c00 	orrsne.w	ip, r4, r0
2000247a:	ea55 0c02 	orrsne.w	ip, r5, r2
2000247e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
20002482:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
20002486:	f000 80e2 	beq.w	2000264e <__adddf3+0x1ee>
2000248a:	ea4f 5454 	mov.w	r4, r4, lsr #21
2000248e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
20002492:	bfb8      	it	lt
20002494:	426d      	neglt	r5, r5
20002496:	dd0c      	ble.n	200024b2 <__adddf3+0x52>
20002498:	442c      	add	r4, r5
2000249a:	ea80 0202 	eor.w	r2, r0, r2
2000249e:	ea81 0303 	eor.w	r3, r1, r3
200024a2:	ea82 0000 	eor.w	r0, r2, r0
200024a6:	ea83 0101 	eor.w	r1, r3, r1
200024aa:	ea80 0202 	eor.w	r2, r0, r2
200024ae:	ea81 0303 	eor.w	r3, r1, r3
200024b2:	2d36      	cmp	r5, #54	; 0x36
200024b4:	bf88      	it	hi
200024b6:	bd30      	pophi	{r4, r5, pc}
200024b8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
200024bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
200024c0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
200024c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
200024c8:	d002      	beq.n	200024d0 <__adddf3+0x70>
200024ca:	4240      	negs	r0, r0
200024cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
200024d0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
200024d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
200024d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
200024dc:	d002      	beq.n	200024e4 <__adddf3+0x84>
200024de:	4252      	negs	r2, r2
200024e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
200024e4:	ea94 0f05 	teq	r4, r5
200024e8:	f000 80a7 	beq.w	2000263a <__adddf3+0x1da>
200024ec:	f1a4 0401 	sub.w	r4, r4, #1
200024f0:	f1d5 0e20 	rsbs	lr, r5, #32
200024f4:	db0d      	blt.n	20002512 <__adddf3+0xb2>
200024f6:	fa02 fc0e 	lsl.w	ip, r2, lr
200024fa:	fa22 f205 	lsr.w	r2, r2, r5
200024fe:	1880      	adds	r0, r0, r2
20002500:	f141 0100 	adc.w	r1, r1, #0
20002504:	fa03 f20e 	lsl.w	r2, r3, lr
20002508:	1880      	adds	r0, r0, r2
2000250a:	fa43 f305 	asr.w	r3, r3, r5
2000250e:	4159      	adcs	r1, r3
20002510:	e00e      	b.n	20002530 <__adddf3+0xd0>
20002512:	f1a5 0520 	sub.w	r5, r5, #32
20002516:	f10e 0e20 	add.w	lr, lr, #32
2000251a:	2a01      	cmp	r2, #1
2000251c:	fa03 fc0e 	lsl.w	ip, r3, lr
20002520:	bf28      	it	cs
20002522:	f04c 0c02 	orrcs.w	ip, ip, #2
20002526:	fa43 f305 	asr.w	r3, r3, r5
2000252a:	18c0      	adds	r0, r0, r3
2000252c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
20002530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
20002534:	d507      	bpl.n	20002546 <__adddf3+0xe6>
20002536:	f04f 0e00 	mov.w	lr, #0
2000253a:	f1dc 0c00 	rsbs	ip, ip, #0
2000253e:	eb7e 0000 	sbcs.w	r0, lr, r0
20002542:	eb6e 0101 	sbc.w	r1, lr, r1
20002546:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
2000254a:	d31b      	bcc.n	20002584 <__adddf3+0x124>
2000254c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
20002550:	d30c      	bcc.n	2000256c <__adddf3+0x10c>
20002552:	0849      	lsrs	r1, r1, #1
20002554:	ea5f 0030 	movs.w	r0, r0, rrx
20002558:	ea4f 0c3c 	mov.w	ip, ip, rrx
2000255c:	f104 0401 	add.w	r4, r4, #1
20002560:	ea4f 5244 	mov.w	r2, r4, lsl #21
20002564:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
20002568:	f080 809a 	bcs.w	200026a0 <__adddf3+0x240>
2000256c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
20002570:	bf08      	it	eq
20002572:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
20002576:	f150 0000 	adcs.w	r0, r0, #0
2000257a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
2000257e:	ea41 0105 	orr.w	r1, r1, r5
20002582:	bd30      	pop	{r4, r5, pc}
20002584:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
20002588:	4140      	adcs	r0, r0
2000258a:	eb41 0101 	adc.w	r1, r1, r1
2000258e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
20002592:	f1a4 0401 	sub.w	r4, r4, #1
20002596:	d1e9      	bne.n	2000256c <__adddf3+0x10c>
20002598:	f091 0f00 	teq	r1, #0
2000259c:	bf04      	itt	eq
2000259e:	4601      	moveq	r1, r0
200025a0:	2000      	moveq	r0, #0
200025a2:	fab1 f381 	clz	r3, r1
200025a6:	bf08      	it	eq
200025a8:	3320      	addeq	r3, #32
200025aa:	f1a3 030b 	sub.w	r3, r3, #11
200025ae:	f1b3 0220 	subs.w	r2, r3, #32
200025b2:	da0c      	bge.n	200025ce <__adddf3+0x16e>
200025b4:	320c      	adds	r2, #12
200025b6:	dd08      	ble.n	200025ca <__adddf3+0x16a>
200025b8:	f102 0c14 	add.w	ip, r2, #20
200025bc:	f1c2 020c 	rsb	r2, r2, #12
200025c0:	fa01 f00c 	lsl.w	r0, r1, ip
200025c4:	fa21 f102 	lsr.w	r1, r1, r2
200025c8:	e00c      	b.n	200025e4 <__adddf3+0x184>
200025ca:	f102 0214 	add.w	r2, r2, #20
200025ce:	bfd8      	it	le
200025d0:	f1c2 0c20 	rsble	ip, r2, #32
200025d4:	fa01 f102 	lsl.w	r1, r1, r2
200025d8:	fa20 fc0c 	lsr.w	ip, r0, ip
200025dc:	bfdc      	itt	le
200025de:	ea41 010c 	orrle.w	r1, r1, ip
200025e2:	4090      	lslle	r0, r2
200025e4:	1ae4      	subs	r4, r4, r3
200025e6:	bfa2      	ittt	ge
200025e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
200025ec:	4329      	orrge	r1, r5
200025ee:	bd30      	popge	{r4, r5, pc}
200025f0:	ea6f 0404 	mvn.w	r4, r4
200025f4:	3c1f      	subs	r4, #31
200025f6:	da1c      	bge.n	20002632 <__adddf3+0x1d2>
200025f8:	340c      	adds	r4, #12
200025fa:	dc0e      	bgt.n	2000261a <__adddf3+0x1ba>
200025fc:	f104 0414 	add.w	r4, r4, #20
20002600:	f1c4 0220 	rsb	r2, r4, #32
20002604:	fa20 f004 	lsr.w	r0, r0, r4
20002608:	fa01 f302 	lsl.w	r3, r1, r2
2000260c:	ea40 0003 	orr.w	r0, r0, r3
20002610:	fa21 f304 	lsr.w	r3, r1, r4
20002614:	ea45 0103 	orr.w	r1, r5, r3
20002618:	bd30      	pop	{r4, r5, pc}
2000261a:	f1c4 040c 	rsb	r4, r4, #12
2000261e:	f1c4 0220 	rsb	r2, r4, #32
20002622:	fa20 f002 	lsr.w	r0, r0, r2
20002626:	fa01 f304 	lsl.w	r3, r1, r4
2000262a:	ea40 0003 	orr.w	r0, r0, r3
2000262e:	4629      	mov	r1, r5
20002630:	bd30      	pop	{r4, r5, pc}
20002632:	fa21 f004 	lsr.w	r0, r1, r4
20002636:	4629      	mov	r1, r5
20002638:	bd30      	pop	{r4, r5, pc}
2000263a:	f094 0f00 	teq	r4, #0
2000263e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
20002642:	bf06      	itte	eq
20002644:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
20002648:	3401      	addeq	r4, #1
2000264a:	3d01      	subne	r5, #1
2000264c:	e74e      	b.n	200024ec <__adddf3+0x8c>
2000264e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
20002652:	bf18      	it	ne
20002654:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
20002658:	d029      	beq.n	200026ae <__adddf3+0x24e>
2000265a:	ea94 0f05 	teq	r4, r5
2000265e:	bf08      	it	eq
20002660:	ea90 0f02 	teqeq	r0, r2
20002664:	d005      	beq.n	20002672 <__adddf3+0x212>
20002666:	ea54 0c00 	orrs.w	ip, r4, r0
2000266a:	bf04      	itt	eq
2000266c:	4619      	moveq	r1, r3
2000266e:	4610      	moveq	r0, r2
20002670:	bd30      	pop	{r4, r5, pc}
20002672:	ea91 0f03 	teq	r1, r3
20002676:	bf1e      	ittt	ne
20002678:	2100      	movne	r1, #0
2000267a:	2000      	movne	r0, #0
2000267c:	bd30      	popne	{r4, r5, pc}
2000267e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
20002682:	d105      	bne.n	20002690 <__adddf3+0x230>
20002684:	0040      	lsls	r0, r0, #1
20002686:	4149      	adcs	r1, r1
20002688:	bf28      	it	cs
2000268a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
2000268e:	bd30      	pop	{r4, r5, pc}
20002690:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
20002694:	bf3c      	itt	cc
20002696:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
2000269a:	bd30      	popcc	{r4, r5, pc}
2000269c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
200026a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
200026a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
200026a8:	f04f 0000 	mov.w	r0, #0
200026ac:	bd30      	pop	{r4, r5, pc}
200026ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
200026b2:	bf1a      	itte	ne
200026b4:	4619      	movne	r1, r3
200026b6:	4610      	movne	r0, r2
200026b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
200026bc:	bf1c      	itt	ne
200026be:	460b      	movne	r3, r1
200026c0:	4602      	movne	r2, r0
200026c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
200026c6:	bf06      	itte	eq
200026c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
200026cc:	ea91 0f03 	teqeq	r1, r3
200026d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
200026d4:	bd30      	pop	{r4, r5, pc}
200026d6:	bf00      	nop

200026d8 <__aeabi_ui2d>:
200026d8:	f090 0f00 	teq	r0, #0
200026dc:	bf04      	itt	eq
200026de:	2100      	moveq	r1, #0
200026e0:	4770      	bxeq	lr
200026e2:	b530      	push	{r4, r5, lr}
200026e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
200026e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
200026ec:	f04f 0500 	mov.w	r5, #0
200026f0:	f04f 0100 	mov.w	r1, #0
200026f4:	e750      	b.n	20002598 <__adddf3+0x138>
200026f6:	bf00      	nop

200026f8 <__aeabi_i2d>:
200026f8:	f090 0f00 	teq	r0, #0
200026fc:	bf04      	itt	eq
200026fe:	2100      	moveq	r1, #0
20002700:	4770      	bxeq	lr
20002702:	b530      	push	{r4, r5, lr}
20002704:	f44f 6480 	mov.w	r4, #1024	; 0x400
20002708:	f104 0432 	add.w	r4, r4, #50	; 0x32
2000270c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
20002710:	bf48      	it	mi
20002712:	4240      	negmi	r0, r0
20002714:	f04f 0100 	mov.w	r1, #0
20002718:	e73e      	b.n	20002598 <__adddf3+0x138>
2000271a:	bf00      	nop

2000271c <__aeabi_f2d>:
2000271c:	0042      	lsls	r2, r0, #1
2000271e:	ea4f 01e2 	mov.w	r1, r2, asr #3
20002722:	ea4f 0131 	mov.w	r1, r1, rrx
20002726:	ea4f 7002 	mov.w	r0, r2, lsl #28
2000272a:	bf1f      	itttt	ne
2000272c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
20002730:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
20002734:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
20002738:	4770      	bxne	lr
2000273a:	f092 0f00 	teq	r2, #0
2000273e:	bf14      	ite	ne
20002740:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
20002744:	4770      	bxeq	lr
20002746:	b530      	push	{r4, r5, lr}
20002748:	f44f 7460 	mov.w	r4, #896	; 0x380
2000274c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
20002750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
20002754:	e720      	b.n	20002598 <__adddf3+0x138>
20002756:	bf00      	nop

20002758 <__aeabi_ul2d>:
20002758:	ea50 0201 	orrs.w	r2, r0, r1
2000275c:	bf08      	it	eq
2000275e:	4770      	bxeq	lr
20002760:	b530      	push	{r4, r5, lr}
20002762:	f04f 0500 	mov.w	r5, #0
20002766:	e00a      	b.n	2000277e <__aeabi_l2d+0x16>

20002768 <__aeabi_l2d>:
20002768:	ea50 0201 	orrs.w	r2, r0, r1
2000276c:	bf08      	it	eq
2000276e:	4770      	bxeq	lr
20002770:	b530      	push	{r4, r5, lr}
20002772:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
20002776:	d502      	bpl.n	2000277e <__aeabi_l2d+0x16>
20002778:	4240      	negs	r0, r0
2000277a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
2000277e:	f44f 6480 	mov.w	r4, #1024	; 0x400
20002782:	f104 0432 	add.w	r4, r4, #50	; 0x32
20002786:	ea5f 5c91 	movs.w	ip, r1, lsr #22
2000278a:	f43f aedc 	beq.w	20002546 <__adddf3+0xe6>
2000278e:	f04f 0203 	mov.w	r2, #3
20002792:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
20002796:	bf18      	it	ne
20002798:	3203      	addne	r2, #3
2000279a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
2000279e:	bf18      	it	ne
200027a0:	3203      	addne	r2, #3
200027a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
200027a6:	f1c2 0320 	rsb	r3, r2, #32
200027aa:	fa00 fc03 	lsl.w	ip, r0, r3
200027ae:	fa20 f002 	lsr.w	r0, r0, r2
200027b2:	fa01 fe03 	lsl.w	lr, r1, r3
200027b6:	ea40 000e 	orr.w	r0, r0, lr
200027ba:	fa21 f102 	lsr.w	r1, r1, r2
200027be:	4414      	add	r4, r2
200027c0:	e6c1      	b.n	20002546 <__adddf3+0xe6>
200027c2:	bf00      	nop

200027c4 <__aeabi_dmul>:
200027c4:	b570      	push	{r4, r5, r6, lr}
200027c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
200027ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
200027ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
200027d2:	bf1d      	ittte	ne
200027d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
200027d8:	ea94 0f0c 	teqne	r4, ip
200027dc:	ea95 0f0c 	teqne	r5, ip
200027e0:	f000 f8de 	bleq	200029a0 <__aeabi_dmul+0x1dc>
200027e4:	442c      	add	r4, r5
200027e6:	ea81 0603 	eor.w	r6, r1, r3
200027ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
200027ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
200027f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
200027f6:	bf18      	it	ne
200027f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
200027fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
20002800:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
20002804:	d038      	beq.n	20002878 <__aeabi_dmul+0xb4>
20002806:	fba0 ce02 	umull	ip, lr, r0, r2
2000280a:	f04f 0500 	mov.w	r5, #0
2000280e:	fbe1 e502 	umlal	lr, r5, r1, r2
20002812:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
20002816:	fbe0 e503 	umlal	lr, r5, r0, r3
2000281a:	f04f 0600 	mov.w	r6, #0
2000281e:	fbe1 5603 	umlal	r5, r6, r1, r3
20002822:	f09c 0f00 	teq	ip, #0
20002826:	bf18      	it	ne
20002828:	f04e 0e01 	orrne.w	lr, lr, #1
2000282c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
20002830:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
20002834:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
20002838:	d204      	bcs.n	20002844 <__aeabi_dmul+0x80>
2000283a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
2000283e:	416d      	adcs	r5, r5
20002840:	eb46 0606 	adc.w	r6, r6, r6
20002844:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
20002848:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
2000284c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
20002850:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
20002854:	ea4f 2ece 	mov.w	lr, lr, lsl #11
20002858:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
2000285c:	bf88      	it	hi
2000285e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
20002862:	d81e      	bhi.n	200028a2 <__aeabi_dmul+0xde>
20002864:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
20002868:	bf08      	it	eq
2000286a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
2000286e:	f150 0000 	adcs.w	r0, r0, #0
20002872:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
20002876:	bd70      	pop	{r4, r5, r6, pc}
20002878:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
2000287c:	ea46 0101 	orr.w	r1, r6, r1
20002880:	ea40 0002 	orr.w	r0, r0, r2
20002884:	ea81 0103 	eor.w	r1, r1, r3
20002888:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
2000288c:	bfc2      	ittt	gt
2000288e:	ebd4 050c 	rsbsgt	r5, r4, ip
20002892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
20002896:	bd70      	popgt	{r4, r5, r6, pc}
20002898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
2000289c:	f04f 0e00 	mov.w	lr, #0
200028a0:	3c01      	subs	r4, #1
200028a2:	f300 80ab 	bgt.w	200029fc <__aeabi_dmul+0x238>
200028a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
200028aa:	bfde      	ittt	le
200028ac:	2000      	movle	r0, #0
200028ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
200028b2:	bd70      	pople	{r4, r5, r6, pc}
200028b4:	f1c4 0400 	rsb	r4, r4, #0
200028b8:	3c20      	subs	r4, #32
200028ba:	da35      	bge.n	20002928 <__aeabi_dmul+0x164>
200028bc:	340c      	adds	r4, #12
200028be:	dc1b      	bgt.n	200028f8 <__aeabi_dmul+0x134>
200028c0:	f104 0414 	add.w	r4, r4, #20
200028c4:	f1c4 0520 	rsb	r5, r4, #32
200028c8:	fa00 f305 	lsl.w	r3, r0, r5
200028cc:	fa20 f004 	lsr.w	r0, r0, r4
200028d0:	fa01 f205 	lsl.w	r2, r1, r5
200028d4:	ea40 0002 	orr.w	r0, r0, r2
200028d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
200028dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
200028e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
200028e4:	fa21 f604 	lsr.w	r6, r1, r4
200028e8:	eb42 0106 	adc.w	r1, r2, r6
200028ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
200028f0:	bf08      	it	eq
200028f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
200028f6:	bd70      	pop	{r4, r5, r6, pc}
200028f8:	f1c4 040c 	rsb	r4, r4, #12
200028fc:	f1c4 0520 	rsb	r5, r4, #32
20002900:	fa00 f304 	lsl.w	r3, r0, r4
20002904:	fa20 f005 	lsr.w	r0, r0, r5
20002908:	fa01 f204 	lsl.w	r2, r1, r4
2000290c:	ea40 0002 	orr.w	r0, r0, r2
20002910:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
20002914:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
20002918:	f141 0100 	adc.w	r1, r1, #0
2000291c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
20002920:	bf08      	it	eq
20002922:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
20002926:	bd70      	pop	{r4, r5, r6, pc}
20002928:	f1c4 0520 	rsb	r5, r4, #32
2000292c:	fa00 f205 	lsl.w	r2, r0, r5
20002930:	ea4e 0e02 	orr.w	lr, lr, r2
20002934:	fa20 f304 	lsr.w	r3, r0, r4
20002938:	fa01 f205 	lsl.w	r2, r1, r5
2000293c:	ea43 0302 	orr.w	r3, r3, r2
20002940:	fa21 f004 	lsr.w	r0, r1, r4
20002944:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
20002948:	fa21 f204 	lsr.w	r2, r1, r4
2000294c:	ea20 0002 	bic.w	r0, r0, r2
20002950:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
20002954:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
20002958:	bf08      	it	eq
2000295a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
2000295e:	bd70      	pop	{r4, r5, r6, pc}
20002960:	f094 0f00 	teq	r4, #0
20002964:	d10f      	bne.n	20002986 <__aeabi_dmul+0x1c2>
20002966:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
2000296a:	0040      	lsls	r0, r0, #1
2000296c:	eb41 0101 	adc.w	r1, r1, r1
20002970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
20002974:	bf08      	it	eq
20002976:	3c01      	subeq	r4, #1
20002978:	d0f7      	beq.n	2000296a <__aeabi_dmul+0x1a6>
2000297a:	ea41 0106 	orr.w	r1, r1, r6
2000297e:	f095 0f00 	teq	r5, #0
20002982:	bf18      	it	ne
20002984:	4770      	bxne	lr
20002986:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
2000298a:	0052      	lsls	r2, r2, #1
2000298c:	eb43 0303 	adc.w	r3, r3, r3
20002990:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
20002994:	bf08      	it	eq
20002996:	3d01      	subeq	r5, #1
20002998:	d0f7      	beq.n	2000298a <__aeabi_dmul+0x1c6>
2000299a:	ea43 0306 	orr.w	r3, r3, r6
2000299e:	4770      	bx	lr
200029a0:	ea94 0f0c 	teq	r4, ip
200029a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
200029a8:	bf18      	it	ne
200029aa:	ea95 0f0c 	teqne	r5, ip
200029ae:	d00c      	beq.n	200029ca <__aeabi_dmul+0x206>
200029b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
200029b4:	bf18      	it	ne
200029b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
200029ba:	d1d1      	bne.n	20002960 <__aeabi_dmul+0x19c>
200029bc:	ea81 0103 	eor.w	r1, r1, r3
200029c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
200029c4:	f04f 0000 	mov.w	r0, #0
200029c8:	bd70      	pop	{r4, r5, r6, pc}
200029ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
200029ce:	bf06      	itte	eq
200029d0:	4610      	moveq	r0, r2
200029d2:	4619      	moveq	r1, r3
200029d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
200029d8:	d019      	beq.n	20002a0e <__aeabi_dmul+0x24a>
200029da:	ea94 0f0c 	teq	r4, ip
200029de:	d102      	bne.n	200029e6 <__aeabi_dmul+0x222>
200029e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
200029e4:	d113      	bne.n	20002a0e <__aeabi_dmul+0x24a>
200029e6:	ea95 0f0c 	teq	r5, ip
200029ea:	d105      	bne.n	200029f8 <__aeabi_dmul+0x234>
200029ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
200029f0:	bf1c      	itt	ne
200029f2:	4610      	movne	r0, r2
200029f4:	4619      	movne	r1, r3
200029f6:	d10a      	bne.n	20002a0e <__aeabi_dmul+0x24a>
200029f8:	ea81 0103 	eor.w	r1, r1, r3
200029fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
20002a00:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
20002a04:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
20002a08:	f04f 0000 	mov.w	r0, #0
20002a0c:	bd70      	pop	{r4, r5, r6, pc}
20002a0e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
20002a12:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
20002a16:	bd70      	pop	{r4, r5, r6, pc}

20002a18 <__aeabi_ddiv>:
20002a18:	b570      	push	{r4, r5, r6, lr}
20002a1a:	f04f 0cff 	mov.w	ip, #255	; 0xff
20002a1e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
20002a22:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
20002a26:	bf1d      	ittte	ne
20002a28:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
20002a2c:	ea94 0f0c 	teqne	r4, ip
20002a30:	ea95 0f0c 	teqne	r5, ip
20002a34:	f000 f8a7 	bleq	20002b86 <__aeabi_ddiv+0x16e>
20002a38:	eba4 0405 	sub.w	r4, r4, r5
20002a3c:	ea81 0e03 	eor.w	lr, r1, r3
20002a40:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
20002a44:	ea4f 3101 	mov.w	r1, r1, lsl #12
20002a48:	f000 8088 	beq.w	20002b5c <__aeabi_ddiv+0x144>
20002a4c:	ea4f 3303 	mov.w	r3, r3, lsl #12
20002a50:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
20002a54:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
20002a58:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
20002a5c:	ea4f 2202 	mov.w	r2, r2, lsl #8
20002a60:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
20002a64:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
20002a68:	ea4f 2600 	mov.w	r6, r0, lsl #8
20002a6c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
20002a70:	429d      	cmp	r5, r3
20002a72:	bf08      	it	eq
20002a74:	4296      	cmpeq	r6, r2
20002a76:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
20002a7a:	f504 7440 	add.w	r4, r4, #768	; 0x300
20002a7e:	d202      	bcs.n	20002a86 <__aeabi_ddiv+0x6e>
20002a80:	085b      	lsrs	r3, r3, #1
20002a82:	ea4f 0232 	mov.w	r2, r2, rrx
20002a86:	1ab6      	subs	r6, r6, r2
20002a88:	eb65 0503 	sbc.w	r5, r5, r3
20002a8c:	085b      	lsrs	r3, r3, #1
20002a8e:	ea4f 0232 	mov.w	r2, r2, rrx
20002a92:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
20002a96:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
20002a9a:	ebb6 0e02 	subs.w	lr, r6, r2
20002a9e:	eb75 0e03 	sbcs.w	lr, r5, r3
20002aa2:	bf22      	ittt	cs
20002aa4:	1ab6      	subcs	r6, r6, r2
20002aa6:	4675      	movcs	r5, lr
20002aa8:	ea40 000c 	orrcs.w	r0, r0, ip
20002aac:	085b      	lsrs	r3, r3, #1
20002aae:	ea4f 0232 	mov.w	r2, r2, rrx
20002ab2:	ebb6 0e02 	subs.w	lr, r6, r2
20002ab6:	eb75 0e03 	sbcs.w	lr, r5, r3
20002aba:	bf22      	ittt	cs
20002abc:	1ab6      	subcs	r6, r6, r2
20002abe:	4675      	movcs	r5, lr
20002ac0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
20002ac4:	085b      	lsrs	r3, r3, #1
20002ac6:	ea4f 0232 	mov.w	r2, r2, rrx
20002aca:	ebb6 0e02 	subs.w	lr, r6, r2
20002ace:	eb75 0e03 	sbcs.w	lr, r5, r3
20002ad2:	bf22      	ittt	cs
20002ad4:	1ab6      	subcs	r6, r6, r2
20002ad6:	4675      	movcs	r5, lr
20002ad8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
20002adc:	085b      	lsrs	r3, r3, #1
20002ade:	ea4f 0232 	mov.w	r2, r2, rrx
20002ae2:	ebb6 0e02 	subs.w	lr, r6, r2
20002ae6:	eb75 0e03 	sbcs.w	lr, r5, r3
20002aea:	bf22      	ittt	cs
20002aec:	1ab6      	subcs	r6, r6, r2
20002aee:	4675      	movcs	r5, lr
20002af0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
20002af4:	ea55 0e06 	orrs.w	lr, r5, r6
20002af8:	d018      	beq.n	20002b2c <__aeabi_ddiv+0x114>
20002afa:	ea4f 1505 	mov.w	r5, r5, lsl #4
20002afe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
20002b02:	ea4f 1606 	mov.w	r6, r6, lsl #4
20002b06:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20002b0a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
20002b0e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
20002b12:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
20002b16:	d1c0      	bne.n	20002a9a <__aeabi_ddiv+0x82>
20002b18:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
20002b1c:	d10b      	bne.n	20002b36 <__aeabi_ddiv+0x11e>
20002b1e:	ea41 0100 	orr.w	r1, r1, r0
20002b22:	f04f 0000 	mov.w	r0, #0
20002b26:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
20002b2a:	e7b6      	b.n	20002a9a <__aeabi_ddiv+0x82>
20002b2c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
20002b30:	bf04      	itt	eq
20002b32:	4301      	orreq	r1, r0
20002b34:	2000      	moveq	r0, #0
20002b36:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
20002b3a:	bf88      	it	hi
20002b3c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
20002b40:	f63f aeaf 	bhi.w	200028a2 <__aeabi_dmul+0xde>
20002b44:	ebb5 0c03 	subs.w	ip, r5, r3
20002b48:	bf04      	itt	eq
20002b4a:	ebb6 0c02 	subseq.w	ip, r6, r2
20002b4e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
20002b52:	f150 0000 	adcs.w	r0, r0, #0
20002b56:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
20002b5a:	bd70      	pop	{r4, r5, r6, pc}
20002b5c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
20002b60:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
20002b64:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
20002b68:	bfc2      	ittt	gt
20002b6a:	ebd4 050c 	rsbsgt	r5, r4, ip
20002b6e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
20002b72:	bd70      	popgt	{r4, r5, r6, pc}
20002b74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
20002b78:	f04f 0e00 	mov.w	lr, #0
20002b7c:	3c01      	subs	r4, #1
20002b7e:	e690      	b.n	200028a2 <__aeabi_dmul+0xde>
20002b80:	ea45 0e06 	orr.w	lr, r5, r6
20002b84:	e68d      	b.n	200028a2 <__aeabi_dmul+0xde>
20002b86:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
20002b8a:	ea94 0f0c 	teq	r4, ip
20002b8e:	bf08      	it	eq
20002b90:	ea95 0f0c 	teqeq	r5, ip
20002b94:	f43f af3b 	beq.w	20002a0e <__aeabi_dmul+0x24a>
20002b98:	ea94 0f0c 	teq	r4, ip
20002b9c:	d10a      	bne.n	20002bb4 <__aeabi_ddiv+0x19c>
20002b9e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
20002ba2:	f47f af34 	bne.w	20002a0e <__aeabi_dmul+0x24a>
20002ba6:	ea95 0f0c 	teq	r5, ip
20002baa:	f47f af25 	bne.w	200029f8 <__aeabi_dmul+0x234>
20002bae:	4610      	mov	r0, r2
20002bb0:	4619      	mov	r1, r3
20002bb2:	e72c      	b.n	20002a0e <__aeabi_dmul+0x24a>
20002bb4:	ea95 0f0c 	teq	r5, ip
20002bb8:	d106      	bne.n	20002bc8 <__aeabi_ddiv+0x1b0>
20002bba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
20002bbe:	f43f aefd 	beq.w	200029bc <__aeabi_dmul+0x1f8>
20002bc2:	4610      	mov	r0, r2
20002bc4:	4619      	mov	r1, r3
20002bc6:	e722      	b.n	20002a0e <__aeabi_dmul+0x24a>
20002bc8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
20002bcc:	bf18      	it	ne
20002bce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
20002bd2:	f47f aec5 	bne.w	20002960 <__aeabi_dmul+0x19c>
20002bd6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
20002bda:	f47f af0d 	bne.w	200029f8 <__aeabi_dmul+0x234>
20002bde:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
20002be2:	f47f aeeb 	bne.w	200029bc <__aeabi_dmul+0x1f8>
20002be6:	e712      	b.n	20002a0e <__aeabi_dmul+0x24a>

20002be8 <__gedf2>:
20002be8:	f04f 3cff 	mov.w	ip, #4294967295
20002bec:	e006      	b.n	20002bfc <__cmpdf2+0x4>
20002bee:	bf00      	nop

20002bf0 <__ledf2>:
20002bf0:	f04f 0c01 	mov.w	ip, #1
20002bf4:	e002      	b.n	20002bfc <__cmpdf2+0x4>
20002bf6:	bf00      	nop

20002bf8 <__cmpdf2>:
20002bf8:	f04f 0c01 	mov.w	ip, #1
20002bfc:	f84d cd04 	str.w	ip, [sp, #-4]!
20002c00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
20002c04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
20002c08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
20002c0c:	bf18      	it	ne
20002c0e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
20002c12:	d01b      	beq.n	20002c4c <__cmpdf2+0x54>
20002c14:	b001      	add	sp, #4
20002c16:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
20002c1a:	bf0c      	ite	eq
20002c1c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
20002c20:	ea91 0f03 	teqne	r1, r3
20002c24:	bf02      	ittt	eq
20002c26:	ea90 0f02 	teqeq	r0, r2
20002c2a:	2000      	moveq	r0, #0
20002c2c:	4770      	bxeq	lr
20002c2e:	f110 0f00 	cmn.w	r0, #0
20002c32:	ea91 0f03 	teq	r1, r3
20002c36:	bf58      	it	pl
20002c38:	4299      	cmppl	r1, r3
20002c3a:	bf08      	it	eq
20002c3c:	4290      	cmpeq	r0, r2
20002c3e:	bf2c      	ite	cs
20002c40:	17d8      	asrcs	r0, r3, #31
20002c42:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
20002c46:	f040 0001 	orr.w	r0, r0, #1
20002c4a:	4770      	bx	lr
20002c4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
20002c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
20002c54:	d102      	bne.n	20002c5c <__cmpdf2+0x64>
20002c56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
20002c5a:	d107      	bne.n	20002c6c <__cmpdf2+0x74>
20002c5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
20002c60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
20002c64:	d1d6      	bne.n	20002c14 <__cmpdf2+0x1c>
20002c66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
20002c6a:	d0d3      	beq.n	20002c14 <__cmpdf2+0x1c>
20002c6c:	f85d 0b04 	ldr.w	r0, [sp], #4
20002c70:	4770      	bx	lr
20002c72:	bf00      	nop

20002c74 <__aeabi_cdrcmple>:
20002c74:	4684      	mov	ip, r0
20002c76:	4610      	mov	r0, r2
20002c78:	4662      	mov	r2, ip
20002c7a:	468c      	mov	ip, r1
20002c7c:	4619      	mov	r1, r3
20002c7e:	4663      	mov	r3, ip
20002c80:	e000      	b.n	20002c84 <__aeabi_cdcmpeq>
20002c82:	bf00      	nop

20002c84 <__aeabi_cdcmpeq>:
20002c84:	b501      	push	{r0, lr}
20002c86:	f7ff ffb7 	bl	20002bf8 <__cmpdf2>
20002c8a:	2800      	cmp	r0, #0
20002c8c:	bf48      	it	mi
20002c8e:	f110 0f00 	cmnmi.w	r0, #0
20002c92:	bd01      	pop	{r0, pc}

20002c94 <__aeabi_dcmpeq>:
20002c94:	f84d ed08 	str.w	lr, [sp, #-8]!
20002c98:	f7ff fff4 	bl	20002c84 <__aeabi_cdcmpeq>
20002c9c:	bf0c      	ite	eq
20002c9e:	2001      	moveq	r0, #1
20002ca0:	2000      	movne	r0, #0
20002ca2:	f85d fb08 	ldr.w	pc, [sp], #8
20002ca6:	bf00      	nop

20002ca8 <__aeabi_dcmplt>:
20002ca8:	f84d ed08 	str.w	lr, [sp, #-8]!
20002cac:	f7ff ffea 	bl	20002c84 <__aeabi_cdcmpeq>
20002cb0:	bf34      	ite	cc
20002cb2:	2001      	movcc	r0, #1
20002cb4:	2000      	movcs	r0, #0
20002cb6:	f85d fb08 	ldr.w	pc, [sp], #8
20002cba:	bf00      	nop

20002cbc <__aeabi_dcmple>:
20002cbc:	f84d ed08 	str.w	lr, [sp, #-8]!
20002cc0:	f7ff ffe0 	bl	20002c84 <__aeabi_cdcmpeq>
20002cc4:	bf94      	ite	ls
20002cc6:	2001      	movls	r0, #1
20002cc8:	2000      	movhi	r0, #0
20002cca:	f85d fb08 	ldr.w	pc, [sp], #8
20002cce:	bf00      	nop

20002cd0 <__aeabi_dcmpge>:
20002cd0:	f84d ed08 	str.w	lr, [sp, #-8]!
20002cd4:	f7ff ffce 	bl	20002c74 <__aeabi_cdrcmple>
20002cd8:	bf94      	ite	ls
20002cda:	2001      	movls	r0, #1
20002cdc:	2000      	movhi	r0, #0
20002cde:	f85d fb08 	ldr.w	pc, [sp], #8
20002ce2:	bf00      	nop

20002ce4 <__aeabi_dcmpgt>:
20002ce4:	f84d ed08 	str.w	lr, [sp, #-8]!
20002ce8:	f7ff ffc4 	bl	20002c74 <__aeabi_cdrcmple>
20002cec:	bf34      	ite	cc
20002cee:	2001      	movcc	r0, #1
20002cf0:	2000      	movcs	r0, #0
20002cf2:	f85d fb08 	ldr.w	pc, [sp], #8
20002cf6:	bf00      	nop

20002cf8 <__aeabi_d2iz>:
20002cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
20002cfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
20002d00:	d215      	bcs.n	20002d2e <__aeabi_d2iz+0x36>
20002d02:	d511      	bpl.n	20002d28 <__aeabi_d2iz+0x30>
20002d04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
20002d08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
20002d0c:	d912      	bls.n	20002d34 <__aeabi_d2iz+0x3c>
20002d0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
20002d12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
20002d16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
20002d1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
20002d1e:	fa23 f002 	lsr.w	r0, r3, r2
20002d22:	bf18      	it	ne
20002d24:	4240      	negne	r0, r0
20002d26:	4770      	bx	lr
20002d28:	f04f 0000 	mov.w	r0, #0
20002d2c:	4770      	bx	lr
20002d2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
20002d32:	d105      	bne.n	20002d40 <__aeabi_d2iz+0x48>
20002d34:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
20002d38:	bf08      	it	eq
20002d3a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
20002d3e:	4770      	bx	lr
20002d40:	f04f 0000 	mov.w	r0, #0
20002d44:	4770      	bx	lr
20002d46:	bf00      	nop

20002d48 <__aeabi_d2uiz>:
20002d48:	004a      	lsls	r2, r1, #1
20002d4a:	d211      	bcs.n	20002d70 <__aeabi_d2uiz+0x28>
20002d4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
20002d50:	d211      	bcs.n	20002d76 <__aeabi_d2uiz+0x2e>
20002d52:	d50d      	bpl.n	20002d70 <__aeabi_d2uiz+0x28>
20002d54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
20002d58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
20002d5c:	d40e      	bmi.n	20002d7c <__aeabi_d2uiz+0x34>
20002d5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
20002d62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
20002d66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
20002d6a:	fa23 f002 	lsr.w	r0, r3, r2
20002d6e:	4770      	bx	lr
20002d70:	f04f 0000 	mov.w	r0, #0
20002d74:	4770      	bx	lr
20002d76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
20002d7a:	d102      	bne.n	20002d82 <__aeabi_d2uiz+0x3a>
20002d7c:	f04f 30ff 	mov.w	r0, #4294967295
20002d80:	4770      	bx	lr
20002d82:	f04f 0000 	mov.w	r0, #0
20002d86:	4770      	bx	lr

20002d88 <__aeabi_frsub>:
20002d88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
20002d8c:	e002      	b.n	20002d94 <__addsf3>
20002d8e:	bf00      	nop

20002d90 <__aeabi_fsub>:
20002d90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

20002d94 <__addsf3>:
20002d94:	0042      	lsls	r2, r0, #1
20002d96:	bf1f      	itttt	ne
20002d98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
20002d9c:	ea92 0f03 	teqne	r2, r3
20002da0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
20002da4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
20002da8:	d06a      	beq.n	20002e80 <__addsf3+0xec>
20002daa:	ea4f 6212 	mov.w	r2, r2, lsr #24
20002dae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
20002db2:	bfc1      	itttt	gt
20002db4:	18d2      	addgt	r2, r2, r3
20002db6:	4041      	eorgt	r1, r0
20002db8:	4048      	eorgt	r0, r1
20002dba:	4041      	eorgt	r1, r0
20002dbc:	bfb8      	it	lt
20002dbe:	425b      	neglt	r3, r3
20002dc0:	2b19      	cmp	r3, #25
20002dc2:	bf88      	it	hi
20002dc4:	4770      	bxhi	lr
20002dc6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
20002dca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
20002dce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
20002dd2:	bf18      	it	ne
20002dd4:	4240      	negne	r0, r0
20002dd6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
20002dda:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
20002dde:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
20002de2:	bf18      	it	ne
20002de4:	4249      	negne	r1, r1
20002de6:	ea92 0f03 	teq	r2, r3
20002dea:	d03f      	beq.n	20002e6c <__addsf3+0xd8>
20002dec:	f1a2 0201 	sub.w	r2, r2, #1
20002df0:	fa41 fc03 	asr.w	ip, r1, r3
20002df4:	eb10 000c 	adds.w	r0, r0, ip
20002df8:	f1c3 0320 	rsb	r3, r3, #32
20002dfc:	fa01 f103 	lsl.w	r1, r1, r3
20002e00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
20002e04:	d502      	bpl.n	20002e0c <__addsf3+0x78>
20002e06:	4249      	negs	r1, r1
20002e08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
20002e0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
20002e10:	d313      	bcc.n	20002e3a <__addsf3+0xa6>
20002e12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
20002e16:	d306      	bcc.n	20002e26 <__addsf3+0x92>
20002e18:	0840      	lsrs	r0, r0, #1
20002e1a:	ea4f 0131 	mov.w	r1, r1, rrx
20002e1e:	f102 0201 	add.w	r2, r2, #1
20002e22:	2afe      	cmp	r2, #254	; 0xfe
20002e24:	d251      	bcs.n	20002eca <__addsf3+0x136>
20002e26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
20002e2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
20002e2e:	bf08      	it	eq
20002e30:	f020 0001 	biceq.w	r0, r0, #1
20002e34:	ea40 0003 	orr.w	r0, r0, r3
20002e38:	4770      	bx	lr
20002e3a:	0049      	lsls	r1, r1, #1
20002e3c:	eb40 0000 	adc.w	r0, r0, r0
20002e40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
20002e44:	f1a2 0201 	sub.w	r2, r2, #1
20002e48:	d1ed      	bne.n	20002e26 <__addsf3+0x92>
20002e4a:	fab0 fc80 	clz	ip, r0
20002e4e:	f1ac 0c08 	sub.w	ip, ip, #8
20002e52:	ebb2 020c 	subs.w	r2, r2, ip
20002e56:	fa00 f00c 	lsl.w	r0, r0, ip
20002e5a:	bfaa      	itet	ge
20002e5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
20002e60:	4252      	neglt	r2, r2
20002e62:	4318      	orrge	r0, r3
20002e64:	bfbc      	itt	lt
20002e66:	40d0      	lsrlt	r0, r2
20002e68:	4318      	orrlt	r0, r3
20002e6a:	4770      	bx	lr
20002e6c:	f092 0f00 	teq	r2, #0
20002e70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
20002e74:	bf06      	itte	eq
20002e76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
20002e7a:	3201      	addeq	r2, #1
20002e7c:	3b01      	subne	r3, #1
20002e7e:	e7b5      	b.n	20002dec <__addsf3+0x58>
20002e80:	ea4f 0341 	mov.w	r3, r1, lsl #1
20002e84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
20002e88:	bf18      	it	ne
20002e8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
20002e8e:	d021      	beq.n	20002ed4 <__addsf3+0x140>
20002e90:	ea92 0f03 	teq	r2, r3
20002e94:	d004      	beq.n	20002ea0 <__addsf3+0x10c>
20002e96:	f092 0f00 	teq	r2, #0
20002e9a:	bf08      	it	eq
20002e9c:	4608      	moveq	r0, r1
20002e9e:	4770      	bx	lr
20002ea0:	ea90 0f01 	teq	r0, r1
20002ea4:	bf1c      	itt	ne
20002ea6:	2000      	movne	r0, #0
20002ea8:	4770      	bxne	lr
20002eaa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
20002eae:	d104      	bne.n	20002eba <__addsf3+0x126>
20002eb0:	0040      	lsls	r0, r0, #1
20002eb2:	bf28      	it	cs
20002eb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
20002eb8:	4770      	bx	lr
20002eba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
20002ebe:	bf3c      	itt	cc
20002ec0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
20002ec4:	4770      	bxcc	lr
20002ec6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
20002eca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
20002ece:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
20002ed2:	4770      	bx	lr
20002ed4:	ea7f 6222 	mvns.w	r2, r2, asr #24
20002ed8:	bf16      	itet	ne
20002eda:	4608      	movne	r0, r1
20002edc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
20002ee0:	4601      	movne	r1, r0
20002ee2:	0242      	lsls	r2, r0, #9
20002ee4:	bf06      	itte	eq
20002ee6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
20002eea:	ea90 0f01 	teqeq	r0, r1
20002eee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
20002ef2:	4770      	bx	lr

20002ef4 <__aeabi_ui2f>:
20002ef4:	f04f 0300 	mov.w	r3, #0
20002ef8:	e004      	b.n	20002f04 <__aeabi_i2f+0x8>
20002efa:	bf00      	nop

20002efc <__aeabi_i2f>:
20002efc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
20002f00:	bf48      	it	mi
20002f02:	4240      	negmi	r0, r0
20002f04:	ea5f 0c00 	movs.w	ip, r0
20002f08:	bf08      	it	eq
20002f0a:	4770      	bxeq	lr
20002f0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
20002f10:	4601      	mov	r1, r0
20002f12:	f04f 0000 	mov.w	r0, #0
20002f16:	e01c      	b.n	20002f52 <__aeabi_l2f+0x2a>

20002f18 <__aeabi_ul2f>:
20002f18:	ea50 0201 	orrs.w	r2, r0, r1
20002f1c:	bf08      	it	eq
20002f1e:	4770      	bxeq	lr
20002f20:	f04f 0300 	mov.w	r3, #0
20002f24:	e00a      	b.n	20002f3c <__aeabi_l2f+0x14>
20002f26:	bf00      	nop

20002f28 <__aeabi_l2f>:
20002f28:	ea50 0201 	orrs.w	r2, r0, r1
20002f2c:	bf08      	it	eq
20002f2e:	4770      	bxeq	lr
20002f30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
20002f34:	d502      	bpl.n	20002f3c <__aeabi_l2f+0x14>
20002f36:	4240      	negs	r0, r0
20002f38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
20002f3c:	ea5f 0c01 	movs.w	ip, r1
20002f40:	bf02      	ittt	eq
20002f42:	4684      	moveq	ip, r0
20002f44:	4601      	moveq	r1, r0
20002f46:	2000      	moveq	r0, #0
20002f48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
20002f4c:	bf08      	it	eq
20002f4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
20002f52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
20002f56:	fabc f28c 	clz	r2, ip
20002f5a:	3a08      	subs	r2, #8
20002f5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
20002f60:	db10      	blt.n	20002f84 <__aeabi_l2f+0x5c>
20002f62:	fa01 fc02 	lsl.w	ip, r1, r2
20002f66:	4463      	add	r3, ip
20002f68:	fa00 fc02 	lsl.w	ip, r0, r2
20002f6c:	f1c2 0220 	rsb	r2, r2, #32
20002f70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
20002f74:	fa20 f202 	lsr.w	r2, r0, r2
20002f78:	eb43 0002 	adc.w	r0, r3, r2
20002f7c:	bf08      	it	eq
20002f7e:	f020 0001 	biceq.w	r0, r0, #1
20002f82:	4770      	bx	lr
20002f84:	f102 0220 	add.w	r2, r2, #32
20002f88:	fa01 fc02 	lsl.w	ip, r1, r2
20002f8c:	f1c2 0220 	rsb	r2, r2, #32
20002f90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
20002f94:	fa21 f202 	lsr.w	r2, r1, r2
20002f98:	eb43 0002 	adc.w	r0, r3, r2
20002f9c:	bf08      	it	eq
20002f9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
20002fa2:	4770      	bx	lr

20002fa4 <__aeabi_fmul>:
20002fa4:	f04f 0cff 	mov.w	ip, #255	; 0xff
20002fa8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
20002fac:	bf1e      	ittt	ne
20002fae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
20002fb2:	ea92 0f0c 	teqne	r2, ip
20002fb6:	ea93 0f0c 	teqne	r3, ip
20002fba:	d06f      	beq.n	2000309c <__aeabi_fmul+0xf8>
20002fbc:	441a      	add	r2, r3
20002fbe:	ea80 0c01 	eor.w	ip, r0, r1
20002fc2:	0240      	lsls	r0, r0, #9
20002fc4:	bf18      	it	ne
20002fc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
20002fca:	d01e      	beq.n	2000300a <__aeabi_fmul+0x66>
20002fcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
20002fd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
20002fd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
20002fd8:	fba0 3101 	umull	r3, r1, r0, r1
20002fdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
20002fe0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
20002fe4:	bf3e      	ittt	cc
20002fe6:	0049      	lslcc	r1, r1, #1
20002fe8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
20002fec:	005b      	lslcc	r3, r3, #1
20002fee:	ea40 0001 	orr.w	r0, r0, r1
20002ff2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
20002ff6:	2afd      	cmp	r2, #253	; 0xfd
20002ff8:	d81d      	bhi.n	20003036 <__aeabi_fmul+0x92>
20002ffa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
20002ffe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
20003002:	bf08      	it	eq
20003004:	f020 0001 	biceq.w	r0, r0, #1
20003008:	4770      	bx	lr
2000300a:	f090 0f00 	teq	r0, #0
2000300e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
20003012:	bf08      	it	eq
20003014:	0249      	lsleq	r1, r1, #9
20003016:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
2000301a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
2000301e:	3a7f      	subs	r2, #127	; 0x7f
20003020:	bfc2      	ittt	gt
20003022:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
20003026:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
2000302a:	4770      	bxgt	lr
2000302c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
20003030:	f04f 0300 	mov.w	r3, #0
20003034:	3a01      	subs	r2, #1
20003036:	dc5d      	bgt.n	200030f4 <__aeabi_fmul+0x150>
20003038:	f112 0f19 	cmn.w	r2, #25
2000303c:	bfdc      	itt	le
2000303e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
20003042:	4770      	bxle	lr
20003044:	f1c2 0200 	rsb	r2, r2, #0
20003048:	0041      	lsls	r1, r0, #1
2000304a:	fa21 f102 	lsr.w	r1, r1, r2
2000304e:	f1c2 0220 	rsb	r2, r2, #32
20003052:	fa00 fc02 	lsl.w	ip, r0, r2
20003056:	ea5f 0031 	movs.w	r0, r1, rrx
2000305a:	f140 0000 	adc.w	r0, r0, #0
2000305e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
20003062:	bf08      	it	eq
20003064:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
20003068:	4770      	bx	lr
2000306a:	f092 0f00 	teq	r2, #0
2000306e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
20003072:	bf02      	ittt	eq
20003074:	0040      	lsleq	r0, r0, #1
20003076:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
2000307a:	3a01      	subeq	r2, #1
2000307c:	d0f9      	beq.n	20003072 <__aeabi_fmul+0xce>
2000307e:	ea40 000c 	orr.w	r0, r0, ip
20003082:	f093 0f00 	teq	r3, #0
20003086:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
2000308a:	bf02      	ittt	eq
2000308c:	0049      	lsleq	r1, r1, #1
2000308e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
20003092:	3b01      	subeq	r3, #1
20003094:	d0f9      	beq.n	2000308a <__aeabi_fmul+0xe6>
20003096:	ea41 010c 	orr.w	r1, r1, ip
2000309a:	e78f      	b.n	20002fbc <__aeabi_fmul+0x18>
2000309c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
200030a0:	ea92 0f0c 	teq	r2, ip
200030a4:	bf18      	it	ne
200030a6:	ea93 0f0c 	teqne	r3, ip
200030aa:	d00a      	beq.n	200030c2 <__aeabi_fmul+0x11e>
200030ac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
200030b0:	bf18      	it	ne
200030b2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
200030b6:	d1d8      	bne.n	2000306a <__aeabi_fmul+0xc6>
200030b8:	ea80 0001 	eor.w	r0, r0, r1
200030bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
200030c0:	4770      	bx	lr
200030c2:	f090 0f00 	teq	r0, #0
200030c6:	bf17      	itett	ne
200030c8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
200030cc:	4608      	moveq	r0, r1
200030ce:	f091 0f00 	teqne	r1, #0
200030d2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
200030d6:	d014      	beq.n	20003102 <__aeabi_fmul+0x15e>
200030d8:	ea92 0f0c 	teq	r2, ip
200030dc:	d101      	bne.n	200030e2 <__aeabi_fmul+0x13e>
200030de:	0242      	lsls	r2, r0, #9
200030e0:	d10f      	bne.n	20003102 <__aeabi_fmul+0x15e>
200030e2:	ea93 0f0c 	teq	r3, ip
200030e6:	d103      	bne.n	200030f0 <__aeabi_fmul+0x14c>
200030e8:	024b      	lsls	r3, r1, #9
200030ea:	bf18      	it	ne
200030ec:	4608      	movne	r0, r1
200030ee:	d108      	bne.n	20003102 <__aeabi_fmul+0x15e>
200030f0:	ea80 0001 	eor.w	r0, r0, r1
200030f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
200030f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
200030fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
20003100:	4770      	bx	lr
20003102:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
20003106:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
2000310a:	4770      	bx	lr

2000310c <__aeabi_fdiv>:
2000310c:	f04f 0cff 	mov.w	ip, #255	; 0xff
20003110:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
20003114:	bf1e      	ittt	ne
20003116:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
2000311a:	ea92 0f0c 	teqne	r2, ip
2000311e:	ea93 0f0c 	teqne	r3, ip
20003122:	d069      	beq.n	200031f8 <__aeabi_fdiv+0xec>
20003124:	eba2 0203 	sub.w	r2, r2, r3
20003128:	ea80 0c01 	eor.w	ip, r0, r1
2000312c:	0249      	lsls	r1, r1, #9
2000312e:	ea4f 2040 	mov.w	r0, r0, lsl #9
20003132:	d037      	beq.n	200031a4 <__aeabi_fdiv+0x98>
20003134:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
20003138:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
2000313c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
20003140:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
20003144:	428b      	cmp	r3, r1
20003146:	bf38      	it	cc
20003148:	005b      	lslcc	r3, r3, #1
2000314a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
2000314e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
20003152:	428b      	cmp	r3, r1
20003154:	bf24      	itt	cs
20003156:	1a5b      	subcs	r3, r3, r1
20003158:	ea40 000c 	orrcs.w	r0, r0, ip
2000315c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
20003160:	bf24      	itt	cs
20003162:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
20003166:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
2000316a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
2000316e:	bf24      	itt	cs
20003170:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
20003174:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
20003178:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
2000317c:	bf24      	itt	cs
2000317e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
20003182:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
20003186:	011b      	lsls	r3, r3, #4
20003188:	bf18      	it	ne
2000318a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
2000318e:	d1e0      	bne.n	20003152 <__aeabi_fdiv+0x46>
20003190:	2afd      	cmp	r2, #253	; 0xfd
20003192:	f63f af50 	bhi.w	20003036 <__aeabi_fmul+0x92>
20003196:	428b      	cmp	r3, r1
20003198:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
2000319c:	bf08      	it	eq
2000319e:	f020 0001 	biceq.w	r0, r0, #1
200031a2:	4770      	bx	lr
200031a4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
200031a8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
200031ac:	327f      	adds	r2, #127	; 0x7f
200031ae:	bfc2      	ittt	gt
200031b0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
200031b4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
200031b8:	4770      	bxgt	lr
200031ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
200031be:	f04f 0300 	mov.w	r3, #0
200031c2:	3a01      	subs	r2, #1
200031c4:	e737      	b.n	20003036 <__aeabi_fmul+0x92>
200031c6:	f092 0f00 	teq	r2, #0
200031ca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
200031ce:	bf02      	ittt	eq
200031d0:	0040      	lsleq	r0, r0, #1
200031d2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
200031d6:	3a01      	subeq	r2, #1
200031d8:	d0f9      	beq.n	200031ce <__aeabi_fdiv+0xc2>
200031da:	ea40 000c 	orr.w	r0, r0, ip
200031de:	f093 0f00 	teq	r3, #0
200031e2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
200031e6:	bf02      	ittt	eq
200031e8:	0049      	lsleq	r1, r1, #1
200031ea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
200031ee:	3b01      	subeq	r3, #1
200031f0:	d0f9      	beq.n	200031e6 <__aeabi_fdiv+0xda>
200031f2:	ea41 010c 	orr.w	r1, r1, ip
200031f6:	e795      	b.n	20003124 <__aeabi_fdiv+0x18>
200031f8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
200031fc:	ea92 0f0c 	teq	r2, ip
20003200:	d108      	bne.n	20003214 <__aeabi_fdiv+0x108>
20003202:	0242      	lsls	r2, r0, #9
20003204:	f47f af7d 	bne.w	20003102 <__aeabi_fmul+0x15e>
20003208:	ea93 0f0c 	teq	r3, ip
2000320c:	f47f af70 	bne.w	200030f0 <__aeabi_fmul+0x14c>
20003210:	4608      	mov	r0, r1
20003212:	e776      	b.n	20003102 <__aeabi_fmul+0x15e>
20003214:	ea93 0f0c 	teq	r3, ip
20003218:	d104      	bne.n	20003224 <__aeabi_fdiv+0x118>
2000321a:	024b      	lsls	r3, r1, #9
2000321c:	f43f af4c 	beq.w	200030b8 <__aeabi_fmul+0x114>
20003220:	4608      	mov	r0, r1
20003222:	e76e      	b.n	20003102 <__aeabi_fmul+0x15e>
20003224:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
20003228:	bf18      	it	ne
2000322a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
2000322e:	d1ca      	bne.n	200031c6 <__aeabi_fdiv+0xba>
20003230:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
20003234:	f47f af5c 	bne.w	200030f0 <__aeabi_fmul+0x14c>
20003238:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
2000323c:	f47f af3c 	bne.w	200030b8 <__aeabi_fmul+0x114>
20003240:	e75f      	b.n	20003102 <__aeabi_fmul+0x15e>
20003242:	bf00      	nop

20003244 <__gesf2>:
20003244:	f04f 3cff 	mov.w	ip, #4294967295
20003248:	e006      	b.n	20003258 <__cmpsf2+0x4>
2000324a:	bf00      	nop

2000324c <__lesf2>:
2000324c:	f04f 0c01 	mov.w	ip, #1
20003250:	e002      	b.n	20003258 <__cmpsf2+0x4>
20003252:	bf00      	nop

20003254 <__cmpsf2>:
20003254:	f04f 0c01 	mov.w	ip, #1
20003258:	f84d cd04 	str.w	ip, [sp, #-4]!
2000325c:	ea4f 0240 	mov.w	r2, r0, lsl #1
20003260:	ea4f 0341 	mov.w	r3, r1, lsl #1
20003264:	ea7f 6c22 	mvns.w	ip, r2, asr #24
20003268:	bf18      	it	ne
2000326a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
2000326e:	d011      	beq.n	20003294 <__cmpsf2+0x40>
20003270:	b001      	add	sp, #4
20003272:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
20003276:	bf18      	it	ne
20003278:	ea90 0f01 	teqne	r0, r1
2000327c:	bf58      	it	pl
2000327e:	ebb2 0003 	subspl.w	r0, r2, r3
20003282:	bf88      	it	hi
20003284:	17c8      	asrhi	r0, r1, #31
20003286:	bf38      	it	cc
20003288:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
2000328c:	bf18      	it	ne
2000328e:	f040 0001 	orrne.w	r0, r0, #1
20003292:	4770      	bx	lr
20003294:	ea7f 6c22 	mvns.w	ip, r2, asr #24
20003298:	d102      	bne.n	200032a0 <__cmpsf2+0x4c>
2000329a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
2000329e:	d105      	bne.n	200032ac <__cmpsf2+0x58>
200032a0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
200032a4:	d1e4      	bne.n	20003270 <__cmpsf2+0x1c>
200032a6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
200032aa:	d0e1      	beq.n	20003270 <__cmpsf2+0x1c>
200032ac:	f85d 0b04 	ldr.w	r0, [sp], #4
200032b0:	4770      	bx	lr
200032b2:	bf00      	nop

200032b4 <__aeabi_cfrcmple>:
200032b4:	4684      	mov	ip, r0
200032b6:	4608      	mov	r0, r1
200032b8:	4661      	mov	r1, ip
200032ba:	e7ff      	b.n	200032bc <__aeabi_cfcmpeq>

200032bc <__aeabi_cfcmpeq>:
200032bc:	b50f      	push	{r0, r1, r2, r3, lr}
200032be:	f7ff ffc9 	bl	20003254 <__cmpsf2>
200032c2:	2800      	cmp	r0, #0
200032c4:	bf48      	it	mi
200032c6:	f110 0f00 	cmnmi.w	r0, #0
200032ca:	bd0f      	pop	{r0, r1, r2, r3, pc}

200032cc <__aeabi_fcmpeq>:
200032cc:	f84d ed08 	str.w	lr, [sp, #-8]!
200032d0:	f7ff fff4 	bl	200032bc <__aeabi_cfcmpeq>
200032d4:	bf0c      	ite	eq
200032d6:	2001      	moveq	r0, #1
200032d8:	2000      	movne	r0, #0
200032da:	f85d fb08 	ldr.w	pc, [sp], #8
200032de:	bf00      	nop

200032e0 <__aeabi_fcmplt>:
200032e0:	f84d ed08 	str.w	lr, [sp, #-8]!
200032e4:	f7ff ffea 	bl	200032bc <__aeabi_cfcmpeq>
200032e8:	bf34      	ite	cc
200032ea:	2001      	movcc	r0, #1
200032ec:	2000      	movcs	r0, #0
200032ee:	f85d fb08 	ldr.w	pc, [sp], #8
200032f2:	bf00      	nop

200032f4 <__aeabi_fcmple>:
200032f4:	f84d ed08 	str.w	lr, [sp, #-8]!
200032f8:	f7ff ffe0 	bl	200032bc <__aeabi_cfcmpeq>
200032fc:	bf94      	ite	ls
200032fe:	2001      	movls	r0, #1
20003300:	2000      	movhi	r0, #0
20003302:	f85d fb08 	ldr.w	pc, [sp], #8
20003306:	bf00      	nop

20003308 <__aeabi_fcmpge>:
20003308:	f84d ed08 	str.w	lr, [sp, #-8]!
2000330c:	f7ff ffd2 	bl	200032b4 <__aeabi_cfrcmple>
20003310:	bf94      	ite	ls
20003312:	2001      	movls	r0, #1
20003314:	2000      	movhi	r0, #0
20003316:	f85d fb08 	ldr.w	pc, [sp], #8
2000331a:	bf00      	nop

2000331c <__aeabi_fcmpgt>:
2000331c:	f84d ed08 	str.w	lr, [sp, #-8]!
20003320:	f7ff ffc8 	bl	200032b4 <__aeabi_cfrcmple>
20003324:	bf34      	ite	cc
20003326:	2001      	movcc	r0, #1
20003328:	2000      	movcs	r0, #0
2000332a:	f85d fb08 	ldr.w	pc, [sp], #8
2000332e:	bf00      	nop

20003330 <__errno>:
20003330:	f643 331c 	movw	r3, #15132	; 0x3b1c
20003334:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003338:	6818      	ldr	r0, [r3, #0]
2000333a:	4770      	bx	lr

2000333c <__libc_init_array>:
2000333c:	b570      	push	{r4, r5, r6, lr}
2000333e:	f643 3604 	movw	r6, #15108	; 0x3b04
20003342:	f643 3504 	movw	r5, #15108	; 0x3b04
20003346:	f2c2 0600 	movt	r6, #8192	; 0x2000
2000334a:	f2c2 0500 	movt	r5, #8192	; 0x2000
2000334e:	1b76      	subs	r6, r6, r5
20003350:	10b6      	asrs	r6, r6, #2
20003352:	d006      	beq.n	20003362 <__libc_init_array+0x26>
20003354:	2400      	movs	r4, #0
20003356:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
2000335a:	3401      	adds	r4, #1
2000335c:	4798      	blx	r3
2000335e:	42a6      	cmp	r6, r4
20003360:	d8f9      	bhi.n	20003356 <__libc_init_array+0x1a>
20003362:	f643 3504 	movw	r5, #15108	; 0x3b04
20003366:	f643 3608 	movw	r6, #15112	; 0x3b08
2000336a:	f2c2 0500 	movt	r5, #8192	; 0x2000
2000336e:	f2c2 0600 	movt	r6, #8192	; 0x2000
20003372:	1b76      	subs	r6, r6, r5
20003374:	f000 fbba 	bl	20003aec <_init>
20003378:	10b6      	asrs	r6, r6, #2
2000337a:	d006      	beq.n	2000338a <__libc_init_array+0x4e>
2000337c:	2400      	movs	r4, #0
2000337e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
20003382:	3401      	adds	r4, #1
20003384:	4798      	blx	r3
20003386:	42a6      	cmp	r6, r4
20003388:	d8f9      	bhi.n	2000337e <__libc_init_array+0x42>
2000338a:	bd70      	pop	{r4, r5, r6, pc}

2000338c <memset>:
2000338c:	2a03      	cmp	r2, #3
2000338e:	b2c9      	uxtb	r1, r1
20003390:	b430      	push	{r4, r5}
20003392:	d807      	bhi.n	200033a4 <memset+0x18>
20003394:	b122      	cbz	r2, 200033a0 <memset+0x14>
20003396:	2300      	movs	r3, #0
20003398:	54c1      	strb	r1, [r0, r3]
2000339a:	3301      	adds	r3, #1
2000339c:	4293      	cmp	r3, r2
2000339e:	d1fb      	bne.n	20003398 <memset+0xc>
200033a0:	bc30      	pop	{r4, r5}
200033a2:	4770      	bx	lr
200033a4:	eb00 0c02 	add.w	ip, r0, r2
200033a8:	4603      	mov	r3, r0
200033aa:	e001      	b.n	200033b0 <memset+0x24>
200033ac:	f803 1c01 	strb.w	r1, [r3, #-1]
200033b0:	f003 0403 	and.w	r4, r3, #3
200033b4:	461a      	mov	r2, r3
200033b6:	3301      	adds	r3, #1
200033b8:	2c00      	cmp	r4, #0
200033ba:	d1f7      	bne.n	200033ac <memset+0x20>
200033bc:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
200033c0:	ebc2 040c 	rsb	r4, r2, ip
200033c4:	fb03 f301 	mul.w	r3, r3, r1
200033c8:	e01f      	b.n	2000340a <memset+0x7e>
200033ca:	f842 3c40 	str.w	r3, [r2, #-64]
200033ce:	f842 3c3c 	str.w	r3, [r2, #-60]
200033d2:	f842 3c38 	str.w	r3, [r2, #-56]
200033d6:	f842 3c34 	str.w	r3, [r2, #-52]
200033da:	f842 3c30 	str.w	r3, [r2, #-48]
200033de:	f842 3c2c 	str.w	r3, [r2, #-44]
200033e2:	f842 3c28 	str.w	r3, [r2, #-40]
200033e6:	f842 3c24 	str.w	r3, [r2, #-36]
200033ea:	f842 3c20 	str.w	r3, [r2, #-32]
200033ee:	f842 3c1c 	str.w	r3, [r2, #-28]
200033f2:	f842 3c18 	str.w	r3, [r2, #-24]
200033f6:	f842 3c14 	str.w	r3, [r2, #-20]
200033fa:	f842 3c10 	str.w	r3, [r2, #-16]
200033fe:	f842 3c0c 	str.w	r3, [r2, #-12]
20003402:	f842 3c08 	str.w	r3, [r2, #-8]
20003406:	f842 3c04 	str.w	r3, [r2, #-4]
2000340a:	4615      	mov	r5, r2
2000340c:	3240      	adds	r2, #64	; 0x40
2000340e:	2c3f      	cmp	r4, #63	; 0x3f
20003410:	f1a4 0440 	sub.w	r4, r4, #64	; 0x40
20003414:	dcd9      	bgt.n	200033ca <memset+0x3e>
20003416:	462a      	mov	r2, r5
20003418:	ebc5 040c 	rsb	r4, r5, ip
2000341c:	e007      	b.n	2000342e <memset+0xa2>
2000341e:	f842 3c10 	str.w	r3, [r2, #-16]
20003422:	f842 3c0c 	str.w	r3, [r2, #-12]
20003426:	f842 3c08 	str.w	r3, [r2, #-8]
2000342a:	f842 3c04 	str.w	r3, [r2, #-4]
2000342e:	4615      	mov	r5, r2
20003430:	3210      	adds	r2, #16
20003432:	2c0f      	cmp	r4, #15
20003434:	f1a4 0410 	sub.w	r4, r4, #16
20003438:	dcf1      	bgt.n	2000341e <memset+0x92>
2000343a:	462a      	mov	r2, r5
2000343c:	ebc5 050c 	rsb	r5, r5, ip
20003440:	e001      	b.n	20003446 <memset+0xba>
20003442:	f842 3c04 	str.w	r3, [r2, #-4]
20003446:	4614      	mov	r4, r2
20003448:	3204      	adds	r2, #4
2000344a:	2d03      	cmp	r5, #3
2000344c:	f1a5 0504 	sub.w	r5, r5, #4
20003450:	dcf7      	bgt.n	20003442 <memset+0xb6>
20003452:	e001      	b.n	20003458 <memset+0xcc>
20003454:	f804 1b01 	strb.w	r1, [r4], #1
20003458:	4564      	cmp	r4, ip
2000345a:	d3fb      	bcc.n	20003454 <memset+0xc8>
2000345c:	e7a0      	b.n	200033a0 <memset+0x14>
2000345e:	bf00      	nop

20003460 <__isnand>:
20003460:	4602      	mov	r2, r0
20003462:	4240      	negs	r0, r0
20003464:	4310      	orrs	r0, r2
20003466:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
2000346a:	ea41 70d0 	orr.w	r0, r1, r0, lsr #31
2000346e:	f1c0 40fe 	rsb	r0, r0, #2130706432	; 0x7f000000
20003472:	f500 0070 	add.w	r0, r0, #15728640	; 0xf00000
20003476:	0fc0      	lsrs	r0, r0, #31
20003478:	4770      	bx	lr
2000347a:	bf00      	nop

2000347c <log>:
2000347c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
20003480:	b08b      	sub	sp, #44	; 0x2c
20003482:	4606      	mov	r6, r0
20003484:	460f      	mov	r7, r1
20003486:	f000 f87b 	bl	20003580 <__ieee754_log>
2000348a:	f643 4410 	movw	r4, #15376	; 0x3c10
2000348e:	f2c2 0400 	movt	r4, #8192	; 0x2000
20003492:	f994 3000 	ldrsb.w	r3, [r4]
20003496:	f1b3 3fff 	cmp.w	r3, #4294967295
2000349a:	4680      	mov	r8, r0
2000349c:	4689      	mov	r9, r1
2000349e:	d038      	beq.n	20003512 <log+0x96>
200034a0:	4630      	mov	r0, r6
200034a2:	4639      	mov	r1, r7
200034a4:	f7ff ffdc 	bl	20003460 <__isnand>
200034a8:	4605      	mov	r5, r0
200034aa:	2800      	cmp	r0, #0
200034ac:	d131      	bne.n	20003512 <log+0x96>
200034ae:	4630      	mov	r0, r6
200034b0:	4639      	mov	r1, r7
200034b2:	2200      	movs	r2, #0
200034b4:	2300      	movs	r3, #0
200034b6:	f7ff fc15 	bl	20002ce4 <__aeabi_dcmpgt>
200034ba:	2800      	cmp	r0, #0
200034bc:	d129      	bne.n	20003512 <log+0x96>
200034be:	7824      	ldrb	r4, [r4, #0]
200034c0:	f643 23e4 	movw	r3, #15076	; 0x3ae4
200034c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200034c8:	9508      	str	r5, [sp, #32]
200034ca:	9301      	str	r3, [sp, #4]
200034cc:	e9cd 6702 	strd	r6, r7, [sp, #8]
200034d0:	e9cd 6704 	strd	r6, r7, [sp, #16]
200034d4:	2c00      	cmp	r4, #0
200034d6:	d021      	beq.n	2000351c <log+0xa0>
200034d8:	f240 0300 	movw	r3, #0
200034dc:	2200      	movs	r2, #0
200034de:	f6cf 73f0 	movt	r3, #65520	; 0xfff0
200034e2:	4630      	mov	r0, r6
200034e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
200034e8:	4639      	mov	r1, r7
200034ea:	2200      	movs	r2, #0
200034ec:	2300      	movs	r3, #0
200034ee:	f7ff fbd1 	bl	20002c94 <__aeabi_dcmpeq>
200034f2:	2800      	cmp	r0, #0
200034f4:	d022      	beq.n	2000353c <log+0xc0>
200034f6:	2302      	movs	r3, #2
200034f8:	9300      	str	r3, [sp, #0]
200034fa:	429c      	cmp	r4, r3
200034fc:	d034      	beq.n	20003568 <log+0xec>
200034fe:	4668      	mov	r0, sp
20003500:	f000 fa52 	bl	200039a8 <matherr>
20003504:	2800      	cmp	r0, #0
20003506:	d02f      	beq.n	20003568 <log+0xec>
20003508:	9b08      	ldr	r3, [sp, #32]
2000350a:	2b00      	cmp	r3, #0
2000350c:	d127      	bne.n	2000355e <log+0xe2>
2000350e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
20003512:	4640      	mov	r0, r8
20003514:	4649      	mov	r1, r9
20003516:	b00b      	add	sp, #44	; 0x2c
20003518:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
2000351c:	f64f 73ff 	movw	r3, #65535	; 0xffff
20003520:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
20003524:	f2cc 73ef 	movt	r3, #51183	; 0xc7ef
20003528:	4630      	mov	r0, r6
2000352a:	e9cd 2306 	strd	r2, r3, [sp, #24]
2000352e:	4639      	mov	r1, r7
20003530:	2200      	movs	r2, #0
20003532:	2300      	movs	r3, #0
20003534:	f7ff fbae 	bl	20002c94 <__aeabi_dcmpeq>
20003538:	2800      	cmp	r0, #0
2000353a:	d1dc      	bne.n	200034f6 <log+0x7a>
2000353c:	2301      	movs	r3, #1
2000353e:	2c02      	cmp	r4, #2
20003540:	9300      	str	r3, [sp, #0]
20003542:	d016      	beq.n	20003572 <log+0xf6>
20003544:	4668      	mov	r0, sp
20003546:	f000 fa2f 	bl	200039a8 <matherr>
2000354a:	b190      	cbz	r0, 20003572 <log+0xf6>
2000354c:	f643 20e8 	movw	r0, #15080	; 0x3ae8
20003550:	f2c2 0000 	movt	r0, #8192	; 0x2000
20003554:	f000 fa2a 	bl	200039ac <nan>
20003558:	e9cd 0106 	strd	r0, r1, [sp, #24]
2000355c:	e7d4      	b.n	20003508 <log+0x8c>
2000355e:	f7ff fee7 	bl	20003330 <__errno>
20003562:	9b08      	ldr	r3, [sp, #32]
20003564:	6003      	str	r3, [r0, #0]
20003566:	e7d2      	b.n	2000350e <log+0x92>
20003568:	f7ff fee2 	bl	20003330 <__errno>
2000356c:	2322      	movs	r3, #34	; 0x22
2000356e:	6003      	str	r3, [r0, #0]
20003570:	e7ca      	b.n	20003508 <log+0x8c>
20003572:	f7ff fedd 	bl	20003330 <__errno>
20003576:	2321      	movs	r3, #33	; 0x21
20003578:	6003      	str	r3, [r0, #0]
2000357a:	e7e7      	b.n	2000354c <log+0xd0>
2000357c:	0000      	lsls	r0, r0, #0
	...

20003580 <__ieee754_log>:
20003580:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
20003584:	460b      	mov	r3, r1
20003586:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2000358a:	4680      	mov	r8, r0
2000358c:	b087      	sub	sp, #28
2000358e:	4689      	mov	r9, r1
20003590:	4604      	mov	r4, r0
20003592:	460d      	mov	r5, r1
20003594:	db3e      	blt.n	20003614 <__ieee754_log+0x94>
20003596:	f64f 72ff 	movw	r2, #65535	; 0xffff
2000359a:	2600      	movs	r6, #0
2000359c:	f6c7 72ef 	movt	r2, #32751	; 0x7fef
200035a0:	4293      	cmp	r3, r2
200035a2:	dc51      	bgt.n	20003648 <__ieee754_log+0xc8>
200035a4:	f023 447f 	bic.w	r4, r3, #4278190080	; 0xff000000
200035a8:	f645 7c64 	movw	ip, #24420	; 0x5f64
200035ac:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
200035b0:	f2c0 0c09 	movt	ip, #9
200035b4:	44a4      	add	ip, r4
200035b6:	f240 0200 	movw	r2, #0
200035ba:	f5a6 767e 	sub.w	r6, r6, #1016	; 0x3f8
200035be:	f40c 1c80 	and.w	ip, ip, #1048576	; 0x100000
200035c2:	3e07      	subs	r6, #7
200035c4:	f6c3 72f0 	movt	r2, #16368	; 0x3ff0
200035c8:	ea8c 0202 	eor.w	r2, ip, r2
200035cc:	eb06 5623 	add.w	r6, r6, r3, asr #20
200035d0:	f240 0300 	movw	r3, #0
200035d4:	4640      	mov	r0, r8
200035d6:	ea42 0104 	orr.w	r1, r2, r4
200035da:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
200035de:	2200      	movs	r2, #0
200035e0:	eb06 561c 	add.w	r6, r6, ip, lsr #20
200035e4:	f7fe ff3a 	bl	2000245c <__aeabi_dsub>
200035e8:	1ca3      	adds	r3, r4, #2
200035ea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
200035ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
200035f2:	2b02      	cmp	r3, #2
200035f4:	4680      	mov	r8, r0
200035f6:	4689      	mov	r9, r1
200035f8:	dc2f      	bgt.n	2000365a <__ieee754_log+0xda>
200035fa:	2200      	movs	r2, #0
200035fc:	2300      	movs	r3, #0
200035fe:	f7ff fb49 	bl	20002c94 <__aeabi_dcmpeq>
20003602:	2800      	cmp	r0, #0
20003604:	f000 80ca 	beq.w	2000379c <__ieee754_log+0x21c>
20003608:	2e00      	cmp	r6, #0
2000360a:	f040 817c 	bne.w	20003906 <__ieee754_log+0x386>
2000360e:	2000      	movs	r0, #0
20003610:	2100      	movs	r1, #0
20003612:	e01f      	b.n	20003654 <__ieee754_log+0xd4>
20003614:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
20003618:	4303      	orrs	r3, r0
2000361a:	f000 80b5 	beq.w	20003788 <__ieee754_log+0x208>
2000361e:	2900      	cmp	r1, #0
20003620:	f2c0 8146 	blt.w	200038b0 <__ieee754_log+0x330>
20003624:	f240 0300 	movw	r3, #0
20003628:	2200      	movs	r2, #0
2000362a:	f2c4 3350 	movt	r3, #17232	; 0x4350
2000362e:	f06f 0635 	mvn.w	r6, #53	; 0x35
20003632:	f7ff f8c7 	bl	200027c4 <__aeabi_dmul>
20003636:	f64f 72ff 	movw	r2, #65535	; 0xffff
2000363a:	f6c7 72ef 	movt	r2, #32751	; 0x7fef
2000363e:	460b      	mov	r3, r1
20003640:	4680      	mov	r8, r0
20003642:	4293      	cmp	r3, r2
20003644:	4689      	mov	r9, r1
20003646:	ddad      	ble.n	200035a4 <__ieee754_log+0x24>
20003648:	4640      	mov	r0, r8
2000364a:	4649      	mov	r1, r9
2000364c:	4642      	mov	r2, r8
2000364e:	464b      	mov	r3, r9
20003650:	f7fe ff06 	bl	20002460 <__adddf3>
20003654:	b007      	add	sp, #28
20003656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2000365a:	2200      	movs	r2, #0
2000365c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
20003660:	f7fe fefe 	bl	20002460 <__adddf3>
20003664:	f64e 3586 	movw	r5, #60294	; 0xeb86
20003668:	f6cf 75f9 	movt	r5, #65529	; 0xfff9
2000366c:	1965      	adds	r5, r4, r5
2000366e:	4602      	mov	r2, r0
20003670:	460b      	mov	r3, r1
20003672:	4640      	mov	r0, r8
20003674:	4649      	mov	r1, r9
20003676:	f7ff f9cf 	bl	20002a18 <__aeabi_ddiv>
2000367a:	e9cd 0102 	strd	r0, r1, [sp, #8]
2000367e:	4630      	mov	r0, r6
20003680:	f7ff f83a 	bl	200026f8 <__aeabi_i2d>
20003684:	e9cd 0104 	strd	r0, r1, [sp, #16]
20003688:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
2000368c:	4602      	mov	r2, r0
2000368e:	460b      	mov	r3, r1
20003690:	f7ff f898 	bl	200027c4 <__aeabi_dmul>
20003694:	4602      	mov	r2, r0
20003696:	460b      	mov	r3, r1
20003698:	e9cd 0100 	strd	r0, r1, [sp]
2000369c:	f7ff f892 	bl	200027c4 <__aeabi_dmul>
200036a0:	a3ab      	add	r3, pc, #684	; (adr r3, 20003950 <__ieee754_log+0x3d0>)
200036a2:	e9d3 2300 	ldrd	r2, r3, [r3]
200036a6:	4682      	mov	sl, r0
200036a8:	468b      	mov	fp, r1
200036aa:	f7ff f88b 	bl	200027c4 <__aeabi_dmul>
200036ae:	a3aa      	add	r3, pc, #680	; (adr r3, 20003958 <__ieee754_log+0x3d8>)
200036b0:	e9d3 2300 	ldrd	r2, r3, [r3]
200036b4:	f7fe fed4 	bl	20002460 <__adddf3>
200036b8:	4652      	mov	r2, sl
200036ba:	465b      	mov	r3, fp
200036bc:	f7ff f882 	bl	200027c4 <__aeabi_dmul>
200036c0:	a3a7      	add	r3, pc, #668	; (adr r3, 20003960 <__ieee754_log+0x3e0>)
200036c2:	e9d3 2300 	ldrd	r2, r3, [r3]
200036c6:	f7fe fecb 	bl	20002460 <__adddf3>
200036ca:	4652      	mov	r2, sl
200036cc:	465b      	mov	r3, fp
200036ce:	f7ff f879 	bl	200027c4 <__aeabi_dmul>
200036d2:	a3a5      	add	r3, pc, #660	; (adr r3, 20003968 <__ieee754_log+0x3e8>)
200036d4:	e9d3 2300 	ldrd	r2, r3, [r3]
200036d8:	f7fe fec2 	bl	20002460 <__adddf3>
200036dc:	e9dd 2300 	ldrd	r2, r3, [sp]
200036e0:	f7ff f870 	bl	200027c4 <__aeabi_dmul>
200036e4:	a3a2      	add	r3, pc, #648	; (adr r3, 20003970 <__ieee754_log+0x3f0>)
200036e6:	e9d3 2300 	ldrd	r2, r3, [r3]
200036ea:	e9cd 0100 	strd	r0, r1, [sp]
200036ee:	4650      	mov	r0, sl
200036f0:	4659      	mov	r1, fp
200036f2:	f7ff f867 	bl	200027c4 <__aeabi_dmul>
200036f6:	a3a0      	add	r3, pc, #640	; (adr r3, 20003978 <__ieee754_log+0x3f8>)
200036f8:	e9d3 2300 	ldrd	r2, r3, [r3]
200036fc:	f7fe feb0 	bl	20002460 <__adddf3>
20003700:	4652      	mov	r2, sl
20003702:	465b      	mov	r3, fp
20003704:	f7ff f85e 	bl	200027c4 <__aeabi_dmul>
20003708:	a39d      	add	r3, pc, #628	; (adr r3, 20003980 <__ieee754_log+0x400>)
2000370a:	e9d3 2300 	ldrd	r2, r3, [r3]
2000370e:	f7fe fea7 	bl	20002460 <__adddf3>
20003712:	4652      	mov	r2, sl
20003714:	465b      	mov	r3, fp
20003716:	f7ff f855 	bl	200027c4 <__aeabi_dmul>
2000371a:	460b      	mov	r3, r1
2000371c:	4602      	mov	r2, r0
2000371e:	e9dd 0100 	ldrd	r0, r1, [sp]
20003722:	f7fe fe9d 	bl	20002460 <__adddf3>
20003726:	f64b 0351 	movw	r3, #47185	; 0xb851
2000372a:	f2c0 0306 	movt	r3, #6
2000372e:	1b1b      	subs	r3, r3, r4
20003730:	ea43 0505 	orr.w	r5, r3, r5
20003734:	2d00      	cmp	r5, #0
20003736:	4682      	mov	sl, r0
20003738:	468b      	mov	fp, r1
2000373a:	dd56      	ble.n	200037ea <__ieee754_log+0x26a>
2000373c:	f240 0300 	movw	r3, #0
20003740:	2200      	movs	r2, #0
20003742:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
20003746:	4640      	mov	r0, r8
20003748:	4649      	mov	r1, r9
2000374a:	f7ff f83b 	bl	200027c4 <__aeabi_dmul>
2000374e:	4642      	mov	r2, r8
20003750:	464b      	mov	r3, r9
20003752:	f7ff f837 	bl	200027c4 <__aeabi_dmul>
20003756:	4604      	mov	r4, r0
20003758:	460d      	mov	r5, r1
2000375a:	2e00      	cmp	r6, #0
2000375c:	d175      	bne.n	2000384a <__ieee754_log+0x2ca>
2000375e:	4652      	mov	r2, sl
20003760:	465b      	mov	r3, fp
20003762:	f7fe fe7d 	bl	20002460 <__adddf3>
20003766:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
2000376a:	f7ff f82b 	bl	200027c4 <__aeabi_dmul>
2000376e:	4602      	mov	r2, r0
20003770:	460b      	mov	r3, r1
20003772:	4620      	mov	r0, r4
20003774:	4629      	mov	r1, r5
20003776:	f7fe fe71 	bl	2000245c <__aeabi_dsub>
2000377a:	4602      	mov	r2, r0
2000377c:	460b      	mov	r3, r1
2000377e:	4640      	mov	r0, r8
20003780:	4649      	mov	r1, r9
20003782:	f7fe fe6b 	bl	2000245c <__aeabi_dsub>
20003786:	e765      	b.n	20003654 <__ieee754_log+0xd4>
20003788:	f240 0100 	movw	r1, #0
2000378c:	2000      	movs	r0, #0
2000378e:	2200      	movs	r2, #0
20003790:	2300      	movs	r3, #0
20003792:	f2cc 3150 	movt	r1, #50000	; 0xc350
20003796:	f7ff f93f 	bl	20002a18 <__aeabi_ddiv>
2000379a:	e75b      	b.n	20003654 <__ieee754_log+0xd4>
2000379c:	4642      	mov	r2, r8
2000379e:	464b      	mov	r3, r9
200037a0:	4640      	mov	r0, r8
200037a2:	4649      	mov	r1, r9
200037a4:	f7ff f80e 	bl	200027c4 <__aeabi_dmul>
200037a8:	a377      	add	r3, pc, #476	; (adr r3, 20003988 <__ieee754_log+0x408>)
200037aa:	e9d3 2300 	ldrd	r2, r3, [r3]
200037ae:	4604      	mov	r4, r0
200037b0:	460d      	mov	r5, r1
200037b2:	4640      	mov	r0, r8
200037b4:	4649      	mov	r1, r9
200037b6:	f7ff f805 	bl	200027c4 <__aeabi_dmul>
200037ba:	f240 0300 	movw	r3, #0
200037be:	2200      	movs	r2, #0
200037c0:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
200037c4:	f7fe fe4c 	bl	20002460 <__adddf3>
200037c8:	4602      	mov	r2, r0
200037ca:	460b      	mov	r3, r1
200037cc:	4620      	mov	r0, r4
200037ce:	4629      	mov	r1, r5
200037d0:	f7fe fff8 	bl	200027c4 <__aeabi_dmul>
200037d4:	4604      	mov	r4, r0
200037d6:	460d      	mov	r5, r1
200037d8:	2e00      	cmp	r6, #0
200037da:	d172      	bne.n	200038c2 <__ieee754_log+0x342>
200037dc:	4640      	mov	r0, r8
200037de:	4649      	mov	r1, r9
200037e0:	4622      	mov	r2, r4
200037e2:	462b      	mov	r3, r5
200037e4:	f7fe fe3a 	bl	2000245c <__aeabi_dsub>
200037e8:	e734      	b.n	20003654 <__ieee754_log+0xd4>
200037ea:	2e00      	cmp	r6, #0
200037ec:	f000 80a5 	beq.w	2000393a <__ieee754_log+0x3ba>
200037f0:	a367      	add	r3, pc, #412	; (adr r3, 20003990 <__ieee754_log+0x410>)
200037f2:	e9d3 2300 	ldrd	r2, r3, [r3]
200037f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
200037fa:	f7fe ffe3 	bl	200027c4 <__aeabi_dmul>
200037fe:	4652      	mov	r2, sl
20003800:	465b      	mov	r3, fp
20003802:	4606      	mov	r6, r0
20003804:	460f      	mov	r7, r1
20003806:	4640      	mov	r0, r8
20003808:	4649      	mov	r1, r9
2000380a:	f7fe fe27 	bl	2000245c <__aeabi_dsub>
2000380e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
20003812:	f7fe ffd7 	bl	200027c4 <__aeabi_dmul>
20003816:	a360      	add	r3, pc, #384	; (adr r3, 20003998 <__ieee754_log+0x418>)
20003818:	e9d3 2300 	ldrd	r2, r3, [r3]
2000381c:	4604      	mov	r4, r0
2000381e:	460d      	mov	r5, r1
20003820:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
20003824:	f7fe ffce 	bl	200027c4 <__aeabi_dmul>
20003828:	4602      	mov	r2, r0
2000382a:	460b      	mov	r3, r1
2000382c:	4620      	mov	r0, r4
2000382e:	4629      	mov	r1, r5
20003830:	f7fe fe16 	bl	20002460 <__adddf3>
20003834:	4642      	mov	r2, r8
20003836:	464b      	mov	r3, r9
20003838:	f7fe fe10 	bl	2000245c <__aeabi_dsub>
2000383c:	4602      	mov	r2, r0
2000383e:	460b      	mov	r3, r1
20003840:	4630      	mov	r0, r6
20003842:	4639      	mov	r1, r7
20003844:	f7fe fe0a 	bl	2000245c <__aeabi_dsub>
20003848:	e704      	b.n	20003654 <__ieee754_log+0xd4>
2000384a:	a351      	add	r3, pc, #324	; (adr r3, 20003990 <__ieee754_log+0x410>)
2000384c:	e9d3 2300 	ldrd	r2, r3, [r3]
20003850:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
20003854:	f7fe ffb6 	bl	200027c4 <__aeabi_dmul>
20003858:	4652      	mov	r2, sl
2000385a:	465b      	mov	r3, fp
2000385c:	e9cd 0100 	strd	r0, r1, [sp]
20003860:	4620      	mov	r0, r4
20003862:	4629      	mov	r1, r5
20003864:	f7fe fdfc 	bl	20002460 <__adddf3>
20003868:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
2000386c:	f7fe ffaa 	bl	200027c4 <__aeabi_dmul>
20003870:	a34b      	add	r3, pc, #300	; (adr r3, 200039a0 <__ieee754_log+0x420>)
20003872:	e9d3 2300 	ldrd	r2, r3, [r3]
20003876:	4606      	mov	r6, r0
20003878:	460f      	mov	r7, r1
2000387a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
2000387e:	f7fe ffa1 	bl	200027c4 <__aeabi_dmul>
20003882:	4602      	mov	r2, r0
20003884:	460b      	mov	r3, r1
20003886:	4630      	mov	r0, r6
20003888:	4639      	mov	r1, r7
2000388a:	f7fe fde9 	bl	20002460 <__adddf3>
2000388e:	4602      	mov	r2, r0
20003890:	460b      	mov	r3, r1
20003892:	4620      	mov	r0, r4
20003894:	4629      	mov	r1, r5
20003896:	f7fe fde1 	bl	2000245c <__aeabi_dsub>
2000389a:	4642      	mov	r2, r8
2000389c:	464b      	mov	r3, r9
2000389e:	f7fe fddd 	bl	2000245c <__aeabi_dsub>
200038a2:	4602      	mov	r2, r0
200038a4:	460b      	mov	r3, r1
200038a6:	e9dd 0100 	ldrd	r0, r1, [sp]
200038aa:	f7fe fdd7 	bl	2000245c <__aeabi_dsub>
200038ae:	e6d1      	b.n	20003654 <__ieee754_log+0xd4>
200038b0:	4602      	mov	r2, r0
200038b2:	460b      	mov	r3, r1
200038b4:	f7fe fdd2 	bl	2000245c <__aeabi_dsub>
200038b8:	2200      	movs	r2, #0
200038ba:	2300      	movs	r3, #0
200038bc:	f7ff f8ac 	bl	20002a18 <__aeabi_ddiv>
200038c0:	e6c8      	b.n	20003654 <__ieee754_log+0xd4>
200038c2:	4630      	mov	r0, r6
200038c4:	f7fe ff18 	bl	200026f8 <__aeabi_i2d>
200038c8:	a331      	add	r3, pc, #196	; (adr r3, 20003990 <__ieee754_log+0x410>)
200038ca:	e9d3 2300 	ldrd	r2, r3, [r3]
200038ce:	4606      	mov	r6, r0
200038d0:	460f      	mov	r7, r1
200038d2:	f7fe ff77 	bl	200027c4 <__aeabi_dmul>
200038d6:	a330      	add	r3, pc, #192	; (adr r3, 20003998 <__ieee754_log+0x418>)
200038d8:	e9d3 2300 	ldrd	r2, r3, [r3]
200038dc:	4682      	mov	sl, r0
200038de:	468b      	mov	fp, r1
200038e0:	4630      	mov	r0, r6
200038e2:	4639      	mov	r1, r7
200038e4:	f7fe ff6e 	bl	200027c4 <__aeabi_dmul>
200038e8:	4622      	mov	r2, r4
200038ea:	462b      	mov	r3, r5
200038ec:	f7fe fdb8 	bl	20002460 <__adddf3>
200038f0:	4642      	mov	r2, r8
200038f2:	464b      	mov	r3, r9
200038f4:	f7fe fdb2 	bl	2000245c <__aeabi_dsub>
200038f8:	4602      	mov	r2, r0
200038fa:	460b      	mov	r3, r1
200038fc:	4650      	mov	r0, sl
200038fe:	4659      	mov	r1, fp
20003900:	f7fe fdac 	bl	2000245c <__aeabi_dsub>
20003904:	e6a6      	b.n	20003654 <__ieee754_log+0xd4>
20003906:	4630      	mov	r0, r6
20003908:	f7fe fef6 	bl	200026f8 <__aeabi_i2d>
2000390c:	a320      	add	r3, pc, #128	; (adr r3, 20003990 <__ieee754_log+0x410>)
2000390e:	e9d3 2300 	ldrd	r2, r3, [r3]
20003912:	4606      	mov	r6, r0
20003914:	460f      	mov	r7, r1
20003916:	f7fe ff55 	bl	200027c4 <__aeabi_dmul>
2000391a:	a321      	add	r3, pc, #132	; (adr r3, 200039a0 <__ieee754_log+0x420>)
2000391c:	e9d3 2300 	ldrd	r2, r3, [r3]
20003920:	4604      	mov	r4, r0
20003922:	460d      	mov	r5, r1
20003924:	4630      	mov	r0, r6
20003926:	4639      	mov	r1, r7
20003928:	f7fe ff4c 	bl	200027c4 <__aeabi_dmul>
2000392c:	4602      	mov	r2, r0
2000392e:	460b      	mov	r3, r1
20003930:	4620      	mov	r0, r4
20003932:	4629      	mov	r1, r5
20003934:	f7fe fd94 	bl	20002460 <__adddf3>
20003938:	e68c      	b.n	20003654 <__ieee754_log+0xd4>
2000393a:	4602      	mov	r2, r0
2000393c:	460b      	mov	r3, r1
2000393e:	4640      	mov	r0, r8
20003940:	4649      	mov	r1, r9
20003942:	f7fe fd8b 	bl	2000245c <__aeabi_dsub>
20003946:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
2000394a:	f7fe ff3b 	bl	200027c4 <__aeabi_dmul>
2000394e:	e714      	b.n	2000377a <__ieee754_log+0x1fa>
20003950:	df3e5244 	.word	0xdf3e5244
20003954:	3fc2f112 	.word	0x3fc2f112
20003958:	96cb03de 	.word	0x96cb03de
2000395c:	3fc74664 	.word	0x3fc74664
20003960:	94229359 	.word	0x94229359
20003964:	3fd24924 	.word	0x3fd24924
20003968:	55555593 	.word	0x55555593
2000396c:	3fe55555 	.word	0x3fe55555
20003970:	d078c69f 	.word	0xd078c69f
20003974:	3fc39a09 	.word	0x3fc39a09
20003978:	1d8e78af 	.word	0x1d8e78af
2000397c:	3fcc71c5 	.word	0x3fcc71c5
20003980:	9997fa04 	.word	0x9997fa04
20003984:	3fd99999 	.word	0x3fd99999
20003988:	55555555 	.word	0x55555555
2000398c:	bfd55555 	.word	0xbfd55555
20003990:	fee00000 	.word	0xfee00000
20003994:	3fe62e42 	.word	0x3fe62e42
20003998:	35793c76 	.word	0x35793c76
2000399c:	bdea39ef 	.word	0xbdea39ef
200039a0:	35793c76 	.word	0x35793c76
200039a4:	3dea39ef 	.word	0x3dea39ef

200039a8 <matherr>:
200039a8:	2000      	movs	r0, #0
200039aa:	4770      	bx	lr

200039ac <nan>:
200039ac:	f240 0100 	movw	r1, #0
200039b0:	2000      	movs	r0, #0
200039b2:	f6c7 71f8 	movt	r1, #32760	; 0x7ff8
200039b6:	4770      	bx	lr

200039b8 <C.38.4357>:
200039b8:	1b1a 0000                                   ....

200039bc <C.37.4351>:
200039bc:	0c3d 0000                                   =...

200039c0 <g_config_reg_lut>:
200039c0:	3000 4001 3004 4001 3008 4001 300c 4001     .0.@.0.@.0.@.0.@
200039d0:	3010 4001 3014 4001 3018 4001 301c 4001     .0.@.0.@.0.@.0.@
200039e0:	3020 4001 3024 4001 3028 4001 302c 4001      0.@$0.@(0.@,0.@
200039f0:	3030 4001 3034 4001 3038 4001 303c 4001     00.@40.@80.@<0.@
20003a00:	3040 4001 3044 4001 3048 4001 304c 4001     @0.@D0.@H0.@L0.@
20003a10:	3050 4001 3054 4001 3058 4001 305c 4001     P0.@T0.@X0.@\0.@
20003a20:	3060 4001 3064 4001 3068 4001 306c 4001     `0.@d0.@h0.@l0.@
20003a30:	3070 4001 3074 4001 3078 4001 307c 4001     p0.@t0.@x0.@|0.@

20003a40 <g_gpio_irqn_lut>:
20003a40:	0020 0021 0022 0023 0024 0025 0026 0027      .!.".#.$.%.&.'.
20003a50:	0028 0029 002a 002b 002c 002d 002e 002f     (.).*.+.,.-.../.
20003a60:	0030 0031 0032 0033 0034 0035 0036 0037     0.1.2.3.4.5.6.7.
20003a70:	0038 0039 003a 003b 003c 003d 003e 003f     8.9.:.;.<.=.>.?.
20003a80:	0043 0000                                   C...

20003a84 <__sf_fake_stdin>:
	...

20003aa4 <__sf_fake_stdout>:
	...

20003ac4 <__sf_fake_stderr>:
	...
20003ae4:	6f6c 0067 0000 0000                         log.....

20003aec <_init>:
20003aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20003aee:	bf00      	nop
20003af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
20003af2:	bc08      	pop	{r3}
20003af4:	469e      	mov	lr, r3
20003af6:	4770      	bx	lr

20003af8 <_fini>:
20003af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20003afa:	bf00      	nop
20003afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
20003afe:	bc08      	pop	{r3}
20003b00:	469e      	mov	lr, r3
20003b02:	4770      	bx	lr

20003b04 <__frame_dummy_init_array_entry>:
20003b04:	0485 2000                                   ... 

20003b08 <__do_global_dtors_aux_fini_array_entry>:
20003b08:	0471 2000                                   q.. 
