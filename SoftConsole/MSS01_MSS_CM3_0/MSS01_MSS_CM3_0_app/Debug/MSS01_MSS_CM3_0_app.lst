
MSS01_MSS_CM3_0_app:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d10  20000000  20000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  20002d10  20002d10  0000ad10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000150  20002d20  20002d20  0000ad1c  2**3
                  ALLOC
  3 .stack        00003000  20002e70  20002e70  0000ad1c  2**0
                  ALLOC
  4 .comment      00000102  00000000  00000000  0000ad1c  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000458  00000000  00000000  0000ae1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000998  00000000  00000000  0000b276  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005902  00000000  00000000  0000bc0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000a43  00000000  00000000  00011510  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001da3  00000000  00000000  00011f53  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001a90  00000000  00000000  00013cf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002351  00000000  00000000  00015788  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000018c5  00000000  00000000  00017ad9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 0002794e  00000000  00000000  0001939e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 00000025  00000000  00000000  00040cec  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 00000440  00000000  00000000  00040d11  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

20000000 <__text_start>:
20000000:	20010000 	.word	0x20010000
20000004:	20000299 	.word	0x20000299
20000008:	20000309 	.word	0x20000309
2000000c:	2000030b 	.word	0x2000030b
20000010:	2000030d 	.word	0x2000030d
20000014:	2000030f 	.word	0x2000030f
20000018:	20000311 	.word	0x20000311
	...
2000002c:	20000313 	.word	0x20000313
20000030:	20000315 	.word	0x20000315
20000034:	00000000 	.word	0x00000000
20000038:	20000317 	.word	0x20000317
2000003c:	20000319 	.word	0x20000319
20000040:	2000031b 	.word	0x2000031b
20000044:	2000031d 	.word	0x2000031d
20000048:	2000031f 	.word	0x2000031f
2000004c:	20000321 	.word	0x20000321
20000050:	20000323 	.word	0x20000323
20000054:	20000325 	.word	0x20000325
20000058:	20000327 	.word	0x20000327
2000005c:	20000329 	.word	0x20000329
20000060:	2000032b 	.word	0x2000032b
20000064:	2000032d 	.word	0x2000032d
20000068:	20000e4d 	.word	0x20000e4d
2000006c:	20000e79 	.word	0x20000e79
20000070:	20000333 	.word	0x20000333
20000074:	20000335 	.word	0x20000335
20000078:	20001c8d 	.word	0x20001c8d
2000007c:	20000339 	.word	0x20000339
20000080:	2000033b 	.word	0x2000033b
20000084:	20001cb9 	.word	0x20001cb9
20000088:	2000033f 	.word	0x2000033f
2000008c:	20000341 	.word	0x20000341
20000090:	20000343 	.word	0x20000343
20000094:	20000345 	.word	0x20000345
20000098:	20000347 	.word	0x20000347
2000009c:	20000349 	.word	0x20000349
200000a0:	2000034b 	.word	0x2000034b
	...
200000bc:	2000034d 	.word	0x2000034d
200000c0:	2000034f 	.word	0x2000034f
200000c4:	20000351 	.word	0x20000351
200000c8:	20000353 	.word	0x20000353
200000cc:	20000355 	.word	0x20000355
200000d0:	20000357 	.word	0x20000357
200000d4:	20000359 	.word	0x20000359
200000d8:	2000035b 	.word	0x2000035b
200000dc:	2000035d 	.word	0x2000035d
200000e0:	2000035f 	.word	0x2000035f
200000e4:	20000361 	.word	0x20000361
200000e8:	20000363 	.word	0x20000363
200000ec:	20000365 	.word	0x20000365
200000f0:	20000367 	.word	0x20000367
200000f4:	20000369 	.word	0x20000369
200000f8:	2000036b 	.word	0x2000036b
200000fc:	2000036d 	.word	0x2000036d
20000100:	2000036f 	.word	0x2000036f
20000104:	20000371 	.word	0x20000371
20000108:	20000373 	.word	0x20000373
2000010c:	20000375 	.word	0x20000375
20000110:	20000377 	.word	0x20000377
20000114:	20000379 	.word	0x20000379
20000118:	2000037b 	.word	0x2000037b
2000011c:	2000037d 	.word	0x2000037d
20000120:	2000037f 	.word	0x2000037f
20000124:	20000381 	.word	0x20000381
20000128:	20000383 	.word	0x20000383
2000012c:	20000385 	.word	0x20000385
20000130:	20000387 	.word	0x20000387
20000134:	20000389 	.word	0x20000389
20000138:	2000038b 	.word	0x2000038b
2000013c:	2000038d 	.word	0x2000038d
20000140:	2000038f 	.word	0x2000038f
20000144:	20000391 	.word	0x20000391
20000148:	20000393 	.word	0x20000393
2000014c:	20000395 	.word	0x20000395
20000150:	20000397 	.word	0x20000397
20000154:	20000399 	.word	0x20000399
20000158:	2000039b 	.word	0x2000039b
2000015c:	2000039d 	.word	0x2000039d
20000160:	2000039f 	.word	0x2000039f
20000164:	200003a1 	.word	0x200003a1
20000168:	200003a3 	.word	0x200003a3
2000016c:	200003a5 	.word	0x200003a5
20000170:	200003a7 	.word	0x200003a7
20000174:	200003a9 	.word	0x200003a9
20000178:	200003ab 	.word	0x200003ab
2000017c:	200003ad 	.word	0x200003ad
20000180:	200003af 	.word	0x200003af
20000184:	200003b1 	.word	0x200003b1
20000188:	200003b3 	.word	0x200003b3
2000018c:	200003b5 	.word	0x200003b5
20000190:	200003b7 	.word	0x200003b7
20000194:	200003b9 	.word	0x200003b9
20000198:	200003bb 	.word	0x200003bb
2000019c:	200003bd 	.word	0x200003bd
200001a0:	200003bf 	.word	0x200003bf
200001a4:	200003c1 	.word	0x200003c1
200001a8:	200003c3 	.word	0x200003c3
200001ac:	200003c5 	.word	0x200003c5
200001b0:	200003c7 	.word	0x200003c7
200001b4:	200003c9 	.word	0x200003c9
200001b8:	200003cb 	.word	0x200003cb
200001bc:	200003cd 	.word	0x200003cd
200001c0:	200003cf 	.word	0x200003cf
200001c4:	200003d1 	.word	0x200003d1
200001c8:	200003d3 	.word	0x200003d3
200001cc:	200003d5 	.word	0x200003d5
200001d0:	200003d7 	.word	0x200003d7
200001d4:	200003d9 	.word	0x200003d9
200001d8:	200003db 	.word	0x200003db
200001dc:	200003dd 	.word	0x200003dd
200001e0:	200003df 	.word	0x200003df
200001e4:	200003e1 	.word	0x200003e1
200001e8:	200003e3 	.word	0x200003e3
200001ec:	200003e5 	.word	0x200003e5
200001f0:	200003e7 	.word	0x200003e7
200001f4:	200003e9 	.word	0x200003e9
200001f8:	200003eb 	.word	0x200003eb
200001fc:	200003ed 	.word	0x200003ed
20000200:	200003ef 	.word	0x200003ef
20000204:	200003f1 	.word	0x200003f1
20000208:	200003f3 	.word	0x200003f3
2000020c:	200003f5 	.word	0x200003f5
20000210:	200003f7 	.word	0x200003f7
20000214:	200003f9 	.word	0x200003f9
20000218:	200003fb 	.word	0x200003fb
2000021c:	200003fd 	.word	0x200003fd
20000220:	200003ff 	.word	0x200003ff
20000224:	20000401 	.word	0x20000401
20000228:	20000403 	.word	0x20000403
2000022c:	20000405 	.word	0x20000405
20000230:	20000407 	.word	0x20000407
20000234:	20000409 	.word	0x20000409
20000238:	2000040b 	.word	0x2000040b
2000023c:	2000040d 	.word	0x2000040d
20000240:	2000040f 	.word	0x2000040f
20000244:	20000411 	.word	0x20000411
20000248:	20000413 	.word	0x20000413
2000024c:	20000415 	.word	0x20000415
20000250:	20000417 	.word	0x20000417
20000254:	20000419 	.word	0x20000419
20000258:	2000041b 	.word	0x2000041b
2000025c:	2000041d 	.word	0x2000041d
20000260:	2000041f 	.word	0x2000041f
20000264:	20000421 	.word	0x20000421
20000268:	20000423 	.word	0x20000423
2000026c:	20000425 	.word	0x20000425
20000270:	20000427 	.word	0x20000427
20000274:	20000429 	.word	0x20000429
20000278:	2000042b 	.word	0x2000042b
2000027c:	2000042d 	.word	0x2000042d
20000280:	2000042f 	.word	0x2000042f
20000284:	20000431 	.word	0x20000431
20000288:	20000433 	.word	0x20000433
2000028c:	20000435 	.word	0x20000435
20000290:	20000437 	.word	0x20000437
20000294:	20000439 	.word	0x20000439

20000298 <Reset_Handler>:
20000298:	4868      	ldr	r0, [pc, #416]	; (2000043c <ACE_PPE_Flag31_IRQHandler+0x4>)
2000029a:	4780      	blx	r0
2000029c:	4868      	ldr	r0, [pc, #416]	; (20000440 <ACE_PPE_Flag31_IRQHandler+0x8>)
2000029e:	2800      	cmp	r0, #0
200002a0:	d10b      	bne.n	200002ba <copy_data>
200002a2:	4868      	ldr	r0, [pc, #416]	; (20000444 <ACE_PPE_Flag31_IRQHandler+0xc>)
200002a4:	4968      	ldr	r1, [pc, #416]	; (20000448 <ACE_PPE_Flag31_IRQHandler+0x10>)
200002a6:	4a69      	ldr	r2, [pc, #420]	; (2000044c <ACE_PPE_Flag31_IRQHandler+0x14>)
200002a8:	4288      	cmp	r0, r1
200002aa:	d006      	beq.n	200002ba <copy_data>

200002ac <copy_code_loop>:
200002ac:	4291      	cmp	r1, r2
200002ae:	bf1c      	itt	ne
200002b0:	f850 3b04 	ldrne.w	r3, [r0], #4
200002b4:	f841 3b04 	strne.w	r3, [r1], #4
200002b8:	d1f8      	bne.n	200002ac <copy_code_loop>

200002ba <copy_data>:
200002ba:	4865      	ldr	r0, [pc, #404]	; (20000450 <ACE_PPE_Flag31_IRQHandler+0x18>)
200002bc:	4965      	ldr	r1, [pc, #404]	; (20000454 <ACE_PPE_Flag31_IRQHandler+0x1c>)
200002be:	4a66      	ldr	r2, [pc, #408]	; (20000458 <ACE_PPE_Flag31_IRQHandler+0x20>)
200002c0:	4288      	cmp	r0, r1
200002c2:	d006      	beq.n	200002d2 <clear_bss>

200002c4 <copy_data_loop>:
200002c4:	4291      	cmp	r1, r2
200002c6:	bf1c      	itt	ne
200002c8:	f850 3b04 	ldrne.w	r3, [r0], #4
200002cc:	f841 3b04 	strne.w	r3, [r1], #4
200002d0:	d1f8      	bne.n	200002c4 <copy_data_loop>

200002d2 <clear_bss>:
200002d2:	4862      	ldr	r0, [pc, #392]	; (2000045c <ACE_PPE_Flag31_IRQHandler+0x24>)
200002d4:	4962      	ldr	r1, [pc, #392]	; (20000460 <ACE_PPE_Flag31_IRQHandler+0x28>)
200002d6:	4a63      	ldr	r2, [pc, #396]	; (20000464 <ACE_PPE_Flag31_IRQHandler+0x2c>)

200002d8 <clear_bss_loop>:
200002d8:	4291      	cmp	r1, r2
200002da:	bf18      	it	ne
200002dc:	f841 0b04 	strne.w	r0, [r1], #4
200002e0:	d1fa      	bne.n	200002d8 <clear_bss_loop>
	...

200002f0 <call_glob_ctor>:
200002f0:	f8df 0174 	ldr.w	r0, [pc, #372]	; 20000468 <ACE_PPE_Flag31_IRQHandler+0x30>
200002f4:	f20f 0e03 	addw	lr, pc, #3
200002f8:	4700      	bx	r0

200002fa <branch_to_main>:
200002fa:	f04f 0000 	mov.w	r0, #0
200002fe:	f04f 0100 	mov.w	r1, #0
20000302:	f8df f168 	ldr.w	pc, [pc, #360]	; 2000046c <ACE_PPE_Flag31_IRQHandler+0x34>

20000306 <ExitLoop>:
20000306:	e7fe      	b.n	20000306 <ExitLoop>

20000308 <NMI_Handler>:
20000308:	e7fe      	b.n	20000308 <NMI_Handler>

2000030a <HardFault_Handler>:
2000030a:	e7fe      	b.n	2000030a <HardFault_Handler>

2000030c <MemManage_Handler>:
2000030c:	e7fe      	b.n	2000030c <MemManage_Handler>

2000030e <BusFault_Handler>:
2000030e:	e7fe      	b.n	2000030e <BusFault_Handler>

20000310 <UsageFault_Handler>:
20000310:	e7fe      	b.n	20000310 <UsageFault_Handler>

20000312 <SVC_Handler>:
20000312:	e7fe      	b.n	20000312 <SVC_Handler>

20000314 <DebugMon_Handler>:
20000314:	e7fe      	b.n	20000314 <DebugMon_Handler>

20000316 <PendSV_Handler>:
20000316:	e7fe      	b.n	20000316 <PendSV_Handler>

20000318 <SysTick_Handler>:
20000318:	e7fe      	b.n	20000318 <SysTick_Handler>

2000031a <WdogWakeup_IRQHandler>:
2000031a:	e7fe      	b.n	2000031a <WdogWakeup_IRQHandler>

2000031c <BrownOut_1_5V_IRQHandler>:
2000031c:	e7fe      	b.n	2000031c <BrownOut_1_5V_IRQHandler>

2000031e <BrownOut_3_3V_IRQHandler>:
2000031e:	e7fe      	b.n	2000031e <BrownOut_3_3V_IRQHandler>

20000320 <RTC_Match_IRQHandler>:
20000320:	e7fe      	b.n	20000320 <RTC_Match_IRQHandler>

20000322 <RTCIF_Pub_IRQHandler>:
20000322:	e7fe      	b.n	20000322 <RTCIF_Pub_IRQHandler>

20000324 <EthernetMAC_IRQHandler>:
20000324:	e7fe      	b.n	20000324 <EthernetMAC_IRQHandler>

20000326 <IAP_IRQHandler>:
20000326:	e7fe      	b.n	20000326 <IAP_IRQHandler>

20000328 <ENVM0_IRQHandler>:
20000328:	e7fe      	b.n	20000328 <ENVM0_IRQHandler>

2000032a <ENVM1_IRQHandler>:
2000032a:	e7fe      	b.n	2000032a <ENVM1_IRQHandler>

2000032c <DMA_IRQHandler>:
2000032c:	e7fe      	b.n	2000032c <DMA_IRQHandler>
2000032e:	e7fe      	b.n	2000032e <DMA_IRQHandler+0x2>
20000330:	e7fe      	b.n	20000330 <DMA_IRQHandler+0x4>

20000332 <SPI0_IRQHandler>:
20000332:	e7fe      	b.n	20000332 <SPI0_IRQHandler>

20000334 <SPI1_IRQHandler>:
20000334:	e7fe      	b.n	20000334 <SPI1_IRQHandler>
20000336:	e7fe      	b.n	20000336 <SPI1_IRQHandler+0x2>

20000338 <I2C0_SMBAlert_IRQHandler>:
20000338:	e7fe      	b.n	20000338 <I2C0_SMBAlert_IRQHandler>

2000033a <I2C0_SMBus_IRQHandler>:
2000033a:	e7fe      	b.n	2000033a <I2C0_SMBus_IRQHandler>
2000033c:	e7fe      	b.n	2000033c <I2C0_SMBus_IRQHandler+0x2>

2000033e <I2C1_SMBAlert_IRQHandler>:
2000033e:	e7fe      	b.n	2000033e <I2C1_SMBAlert_IRQHandler>

20000340 <I2C1_SMBus_IRQHandler>:
20000340:	e7fe      	b.n	20000340 <I2C1_SMBus_IRQHandler>

20000342 <Timer1_IRQHandler>:
20000342:	e7fe      	b.n	20000342 <Timer1_IRQHandler>

20000344 <Timer2_IRQHandler>:
20000344:	e7fe      	b.n	20000344 <Timer2_IRQHandler>

20000346 <PLL_Lock_IRQHandler>:
20000346:	e7fe      	b.n	20000346 <PLL_Lock_IRQHandler>

20000348 <PLL_LockLost_IRQHandler>:
20000348:	e7fe      	b.n	20000348 <PLL_LockLost_IRQHandler>

2000034a <CommError_IRQHandler>:
2000034a:	e7fe      	b.n	2000034a <CommError_IRQHandler>

2000034c <Fabric_IRQHandler>:
2000034c:	e7fe      	b.n	2000034c <Fabric_IRQHandler>

2000034e <GPIO0_IRQHandler>:
2000034e:	e7fe      	b.n	2000034e <GPIO0_IRQHandler>

20000350 <GPIO1_IRQHandler>:
20000350:	e7fe      	b.n	20000350 <GPIO1_IRQHandler>

20000352 <GPIO2_IRQHandler>:
20000352:	e7fe      	b.n	20000352 <GPIO2_IRQHandler>

20000354 <GPIO3_IRQHandler>:
20000354:	e7fe      	b.n	20000354 <GPIO3_IRQHandler>

20000356 <GPIO4_IRQHandler>:
20000356:	e7fe      	b.n	20000356 <GPIO4_IRQHandler>

20000358 <GPIO5_IRQHandler>:
20000358:	e7fe      	b.n	20000358 <GPIO5_IRQHandler>

2000035a <GPIO6_IRQHandler>:
2000035a:	e7fe      	b.n	2000035a <GPIO6_IRQHandler>

2000035c <GPIO7_IRQHandler>:
2000035c:	e7fe      	b.n	2000035c <GPIO7_IRQHandler>

2000035e <GPIO8_IRQHandler>:
2000035e:	e7fe      	b.n	2000035e <GPIO8_IRQHandler>

20000360 <GPIO9_IRQHandler>:
20000360:	e7fe      	b.n	20000360 <GPIO9_IRQHandler>

20000362 <GPIO10_IRQHandler>:
20000362:	e7fe      	b.n	20000362 <GPIO10_IRQHandler>

20000364 <GPIO11_IRQHandler>:
20000364:	e7fe      	b.n	20000364 <GPIO11_IRQHandler>

20000366 <GPIO12_IRQHandler>:
20000366:	e7fe      	b.n	20000366 <GPIO12_IRQHandler>

20000368 <GPIO13_IRQHandler>:
20000368:	e7fe      	b.n	20000368 <GPIO13_IRQHandler>

2000036a <GPIO14_IRQHandler>:
2000036a:	e7fe      	b.n	2000036a <GPIO14_IRQHandler>

2000036c <GPIO15_IRQHandler>:
2000036c:	e7fe      	b.n	2000036c <GPIO15_IRQHandler>

2000036e <GPIO16_IRQHandler>:
2000036e:	e7fe      	b.n	2000036e <GPIO16_IRQHandler>

20000370 <GPIO17_IRQHandler>:
20000370:	e7fe      	b.n	20000370 <GPIO17_IRQHandler>

20000372 <GPIO18_IRQHandler>:
20000372:	e7fe      	b.n	20000372 <GPIO18_IRQHandler>

20000374 <GPIO19_IRQHandler>:
20000374:	e7fe      	b.n	20000374 <GPIO19_IRQHandler>

20000376 <GPIO20_IRQHandler>:
20000376:	e7fe      	b.n	20000376 <GPIO20_IRQHandler>

20000378 <GPIO21_IRQHandler>:
20000378:	e7fe      	b.n	20000378 <GPIO21_IRQHandler>

2000037a <GPIO22_IRQHandler>:
2000037a:	e7fe      	b.n	2000037a <GPIO22_IRQHandler>

2000037c <GPIO23_IRQHandler>:
2000037c:	e7fe      	b.n	2000037c <GPIO23_IRQHandler>

2000037e <GPIO24_IRQHandler>:
2000037e:	e7fe      	b.n	2000037e <GPIO24_IRQHandler>

20000380 <GPIO25_IRQHandler>:
20000380:	e7fe      	b.n	20000380 <GPIO25_IRQHandler>

20000382 <GPIO26_IRQHandler>:
20000382:	e7fe      	b.n	20000382 <GPIO26_IRQHandler>

20000384 <GPIO27_IRQHandler>:
20000384:	e7fe      	b.n	20000384 <GPIO27_IRQHandler>

20000386 <GPIO28_IRQHandler>:
20000386:	e7fe      	b.n	20000386 <GPIO28_IRQHandler>

20000388 <GPIO29_IRQHandler>:
20000388:	e7fe      	b.n	20000388 <GPIO29_IRQHandler>

2000038a <GPIO30_IRQHandler>:
2000038a:	e7fe      	b.n	2000038a <GPIO30_IRQHandler>

2000038c <GPIO31_IRQHandler>:
2000038c:	e7fe      	b.n	2000038c <GPIO31_IRQHandler>

2000038e <ACE_PC0_Flag0_IRQHandler>:
2000038e:	e7fe      	b.n	2000038e <ACE_PC0_Flag0_IRQHandler>

20000390 <ACE_PC0_Flag1_IRQHandler>:
20000390:	e7fe      	b.n	20000390 <ACE_PC0_Flag1_IRQHandler>

20000392 <ACE_PC0_Flag2_IRQHandler>:
20000392:	e7fe      	b.n	20000392 <ACE_PC0_Flag2_IRQHandler>

20000394 <ACE_PC0_Flag3_IRQHandler>:
20000394:	e7fe      	b.n	20000394 <ACE_PC0_Flag3_IRQHandler>

20000396 <ACE_PC1_Flag0_IRQHandler>:
20000396:	e7fe      	b.n	20000396 <ACE_PC1_Flag0_IRQHandler>

20000398 <ACE_PC1_Flag1_IRQHandler>:
20000398:	e7fe      	b.n	20000398 <ACE_PC1_Flag1_IRQHandler>

2000039a <ACE_PC1_Flag2_IRQHandler>:
2000039a:	e7fe      	b.n	2000039a <ACE_PC1_Flag2_IRQHandler>

2000039c <ACE_PC1_Flag3_IRQHandler>:
2000039c:	e7fe      	b.n	2000039c <ACE_PC1_Flag3_IRQHandler>

2000039e <ACE_PC2_Flag0_IRQHandler>:
2000039e:	e7fe      	b.n	2000039e <ACE_PC2_Flag0_IRQHandler>

200003a0 <ACE_PC2_Flag1_IRQHandler>:
200003a0:	e7fe      	b.n	200003a0 <ACE_PC2_Flag1_IRQHandler>

200003a2 <ACE_PC2_Flag2_IRQHandler>:
200003a2:	e7fe      	b.n	200003a2 <ACE_PC2_Flag2_IRQHandler>

200003a4 <ACE_PC2_Flag3_IRQHandler>:
200003a4:	e7fe      	b.n	200003a4 <ACE_PC2_Flag3_IRQHandler>

200003a6 <ACE_ADC0_DataValid_IRQHandler>:
200003a6:	e7fe      	b.n	200003a6 <ACE_ADC0_DataValid_IRQHandler>

200003a8 <ACE_ADC1_DataValid_IRQHandler>:
200003a8:	e7fe      	b.n	200003a8 <ACE_ADC1_DataValid_IRQHandler>

200003aa <ACE_ADC2_DataValid_IRQHandler>:
200003aa:	e7fe      	b.n	200003aa <ACE_ADC2_DataValid_IRQHandler>

200003ac <ACE_ADC0_CalDone_IRQHandler>:
200003ac:	e7fe      	b.n	200003ac <ACE_ADC0_CalDone_IRQHandler>

200003ae <ACE_ADC1_CalDone_IRQHandler>:
200003ae:	e7fe      	b.n	200003ae <ACE_ADC1_CalDone_IRQHandler>

200003b0 <ACE_ADC2_CalDone_IRQHandler>:
200003b0:	e7fe      	b.n	200003b0 <ACE_ADC2_CalDone_IRQHandler>

200003b2 <ACE_ADC0_CalStart_IRQHandler>:
200003b2:	e7fe      	b.n	200003b2 <ACE_ADC0_CalStart_IRQHandler>

200003b4 <ACE_ADC1_CalStart_IRQHandler>:
200003b4:	e7fe      	b.n	200003b4 <ACE_ADC1_CalStart_IRQHandler>

200003b6 <ACE_ADC2_CalStart_IRQHandler>:
200003b6:	e7fe      	b.n	200003b6 <ACE_ADC2_CalStart_IRQHandler>

200003b8 <ACE_Comp0_Fall_IRQHandler>:
200003b8:	e7fe      	b.n	200003b8 <ACE_Comp0_Fall_IRQHandler>

200003ba <ACE_Comp1_Fall_IRQHandler>:
200003ba:	e7fe      	b.n	200003ba <ACE_Comp1_Fall_IRQHandler>

200003bc <ACE_Comp2_Fall_IRQHandler>:
200003bc:	e7fe      	b.n	200003bc <ACE_Comp2_Fall_IRQHandler>

200003be <ACE_Comp3_Fall_IRQHandler>:
200003be:	e7fe      	b.n	200003be <ACE_Comp3_Fall_IRQHandler>

200003c0 <ACE_Comp4_Fall_IRQHandler>:
200003c0:	e7fe      	b.n	200003c0 <ACE_Comp4_Fall_IRQHandler>

200003c2 <ACE_Comp5_Fall_IRQHandler>:
200003c2:	e7fe      	b.n	200003c2 <ACE_Comp5_Fall_IRQHandler>

200003c4 <ACE_Comp6_Fall_IRQHandler>:
200003c4:	e7fe      	b.n	200003c4 <ACE_Comp6_Fall_IRQHandler>

200003c6 <ACE_Comp7_Fall_IRQHandler>:
200003c6:	e7fe      	b.n	200003c6 <ACE_Comp7_Fall_IRQHandler>

200003c8 <ACE_Comp8_Fall_IRQHandler>:
200003c8:	e7fe      	b.n	200003c8 <ACE_Comp8_Fall_IRQHandler>

200003ca <ACE_Comp9_Fall_IRQHandler>:
200003ca:	e7fe      	b.n	200003ca <ACE_Comp9_Fall_IRQHandler>

200003cc <ACE_Comp10_Fall_IRQHandler>:
200003cc:	e7fe      	b.n	200003cc <ACE_Comp10_Fall_IRQHandler>

200003ce <ACE_Comp11_Fall_IRQHandler>:
200003ce:	e7fe      	b.n	200003ce <ACE_Comp11_Fall_IRQHandler>

200003d0 <ACE_Comp0_Rise_IRQHandler>:
200003d0:	e7fe      	b.n	200003d0 <ACE_Comp0_Rise_IRQHandler>

200003d2 <ACE_Comp1_Rise_IRQHandler>:
200003d2:	e7fe      	b.n	200003d2 <ACE_Comp1_Rise_IRQHandler>

200003d4 <ACE_Comp2_Rise_IRQHandler>:
200003d4:	e7fe      	b.n	200003d4 <ACE_Comp2_Rise_IRQHandler>

200003d6 <ACE_Comp3_Rise_IRQHandler>:
200003d6:	e7fe      	b.n	200003d6 <ACE_Comp3_Rise_IRQHandler>

200003d8 <ACE_Comp4_Rise_IRQHandler>:
200003d8:	e7fe      	b.n	200003d8 <ACE_Comp4_Rise_IRQHandler>

200003da <ACE_Comp5_Rise_IRQHandler>:
200003da:	e7fe      	b.n	200003da <ACE_Comp5_Rise_IRQHandler>

200003dc <ACE_Comp6_Rise_IRQHandler>:
200003dc:	e7fe      	b.n	200003dc <ACE_Comp6_Rise_IRQHandler>

200003de <ACE_Comp7_Rise_IRQHandler>:
200003de:	e7fe      	b.n	200003de <ACE_Comp7_Rise_IRQHandler>

200003e0 <ACE_Comp8_Rise_IRQHandler>:
200003e0:	e7fe      	b.n	200003e0 <ACE_Comp8_Rise_IRQHandler>

200003e2 <ACE_Comp9_Rise_IRQHandler>:
200003e2:	e7fe      	b.n	200003e2 <ACE_Comp9_Rise_IRQHandler>

200003e4 <ACE_Comp10_Rise_IRQHandler>:
200003e4:	e7fe      	b.n	200003e4 <ACE_Comp10_Rise_IRQHandler>

200003e6 <ACE_Comp11_Rise_IRQHandler>:
200003e6:	e7fe      	b.n	200003e6 <ACE_Comp11_Rise_IRQHandler>

200003e8 <ACE_ADC0_FifoFull_IRQHandler>:
200003e8:	e7fe      	b.n	200003e8 <ACE_ADC0_FifoFull_IRQHandler>

200003ea <ACE_ADC0_FifoAFull_IRQHandler>:
200003ea:	e7fe      	b.n	200003ea <ACE_ADC0_FifoAFull_IRQHandler>

200003ec <ACE_ADC0_FifoEmpty_IRQHandler>:
200003ec:	e7fe      	b.n	200003ec <ACE_ADC0_FifoEmpty_IRQHandler>

200003ee <ACE_ADC1_FifoFull_IRQHandler>:
200003ee:	e7fe      	b.n	200003ee <ACE_ADC1_FifoFull_IRQHandler>

200003f0 <ACE_ADC1_FifoAFull_IRQHandler>:
200003f0:	e7fe      	b.n	200003f0 <ACE_ADC1_FifoAFull_IRQHandler>

200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>:
200003f2:	e7fe      	b.n	200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>

200003f4 <ACE_ADC2_FifoFull_IRQHandler>:
200003f4:	e7fe      	b.n	200003f4 <ACE_ADC2_FifoFull_IRQHandler>

200003f6 <ACE_ADC2_FifoAFull_IRQHandler>:
200003f6:	e7fe      	b.n	200003f6 <ACE_ADC2_FifoAFull_IRQHandler>

200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>:
200003f8:	e7fe      	b.n	200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>

200003fa <ACE_PPE_Flag0_IRQHandler>:
200003fa:	e7fe      	b.n	200003fa <ACE_PPE_Flag0_IRQHandler>

200003fc <ACE_PPE_Flag1_IRQHandler>:
200003fc:	e7fe      	b.n	200003fc <ACE_PPE_Flag1_IRQHandler>

200003fe <ACE_PPE_Flag2_IRQHandler>:
200003fe:	e7fe      	b.n	200003fe <ACE_PPE_Flag2_IRQHandler>

20000400 <ACE_PPE_Flag3_IRQHandler>:
20000400:	e7fe      	b.n	20000400 <ACE_PPE_Flag3_IRQHandler>

20000402 <ACE_PPE_Flag4_IRQHandler>:
20000402:	e7fe      	b.n	20000402 <ACE_PPE_Flag4_IRQHandler>

20000404 <ACE_PPE_Flag5_IRQHandler>:
20000404:	e7fe      	b.n	20000404 <ACE_PPE_Flag5_IRQHandler>

20000406 <ACE_PPE_Flag6_IRQHandler>:
20000406:	e7fe      	b.n	20000406 <ACE_PPE_Flag6_IRQHandler>

20000408 <ACE_PPE_Flag7_IRQHandler>:
20000408:	e7fe      	b.n	20000408 <ACE_PPE_Flag7_IRQHandler>

2000040a <ACE_PPE_Flag8_IRQHandler>:
2000040a:	e7fe      	b.n	2000040a <ACE_PPE_Flag8_IRQHandler>

2000040c <ACE_PPE_Flag9_IRQHandler>:
2000040c:	e7fe      	b.n	2000040c <ACE_PPE_Flag9_IRQHandler>

2000040e <ACE_PPE_Flag10_IRQHandler>:
2000040e:	e7fe      	b.n	2000040e <ACE_PPE_Flag10_IRQHandler>

20000410 <ACE_PPE_Flag11_IRQHandler>:
20000410:	e7fe      	b.n	20000410 <ACE_PPE_Flag11_IRQHandler>

20000412 <ACE_PPE_Flag12_IRQHandler>:
20000412:	e7fe      	b.n	20000412 <ACE_PPE_Flag12_IRQHandler>

20000414 <ACE_PPE_Flag13_IRQHandler>:
20000414:	e7fe      	b.n	20000414 <ACE_PPE_Flag13_IRQHandler>

20000416 <ACE_PPE_Flag14_IRQHandler>:
20000416:	e7fe      	b.n	20000416 <ACE_PPE_Flag14_IRQHandler>

20000418 <ACE_PPE_Flag15_IRQHandler>:
20000418:	e7fe      	b.n	20000418 <ACE_PPE_Flag15_IRQHandler>

2000041a <ACE_PPE_Flag16_IRQHandler>:
2000041a:	e7fe      	b.n	2000041a <ACE_PPE_Flag16_IRQHandler>

2000041c <ACE_PPE_Flag17_IRQHandler>:
2000041c:	e7fe      	b.n	2000041c <ACE_PPE_Flag17_IRQHandler>

2000041e <ACE_PPE_Flag18_IRQHandler>:
2000041e:	e7fe      	b.n	2000041e <ACE_PPE_Flag18_IRQHandler>

20000420 <ACE_PPE_Flag19_IRQHandler>:
20000420:	e7fe      	b.n	20000420 <ACE_PPE_Flag19_IRQHandler>

20000422 <ACE_PPE_Flag20_IRQHandler>:
20000422:	e7fe      	b.n	20000422 <ACE_PPE_Flag20_IRQHandler>

20000424 <ACE_PPE_Flag21_IRQHandler>:
20000424:	e7fe      	b.n	20000424 <ACE_PPE_Flag21_IRQHandler>

20000426 <ACE_PPE_Flag22_IRQHandler>:
20000426:	e7fe      	b.n	20000426 <ACE_PPE_Flag22_IRQHandler>

20000428 <ACE_PPE_Flag23_IRQHandler>:
20000428:	e7fe      	b.n	20000428 <ACE_PPE_Flag23_IRQHandler>

2000042a <ACE_PPE_Flag24_IRQHandler>:
2000042a:	e7fe      	b.n	2000042a <ACE_PPE_Flag24_IRQHandler>

2000042c <ACE_PPE_Flag25_IRQHandler>:
2000042c:	e7fe      	b.n	2000042c <ACE_PPE_Flag25_IRQHandler>

2000042e <ACE_PPE_Flag26_IRQHandler>:
2000042e:	e7fe      	b.n	2000042e <ACE_PPE_Flag26_IRQHandler>

20000430 <ACE_PPE_Flag27_IRQHandler>:
20000430:	e7fe      	b.n	20000430 <ACE_PPE_Flag27_IRQHandler>

20000432 <ACE_PPE_Flag28_IRQHandler>:
20000432:	e7fe      	b.n	20000432 <ACE_PPE_Flag28_IRQHandler>

20000434 <ACE_PPE_Flag29_IRQHandler>:
20000434:	e7fe      	b.n	20000434 <ACE_PPE_Flag29_IRQHandler>

20000436 <ACE_PPE_Flag30_IRQHandler>:
20000436:	e7fe      	b.n	20000436 <ACE_PPE_Flag30_IRQHandler>

20000438 <ACE_PPE_Flag31_IRQHandler>:
20000438:	e7fe      	b.n	20000438 <ACE_PPE_Flag31_IRQHandler>
2000043a:	0000      	.short	0x0000
2000043c:	20001d1d 	.word	0x20001d1d
20000440:	00000000 	.word	0x00000000
20000444:	20000000 	.word	0x20000000
20000448:	20000000 	.word	0x20000000
2000044c:	20002d10 	.word	0x20002d10
20000450:	20002d10 	.word	0x20002d10
20000454:	20002d10 	.word	0x20002d10
20000458:	20002d1c 	.word	0x20002d1c
2000045c:	00000000 	.word	0x00000000
20000460:	20002d20 	.word	0x20002d20
20000464:	20002e70 	.word	0x20002e70
20000468:	20002bc5 	.word	0x20002bc5
2000046c:	20000a4d 	.word	0x20000a4d

20000470 <__do_global_dtors_aux>:
20000470:	f642 5320 	movw	r3, #11552	; 0x2d20
20000474:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000478:	781a      	ldrb	r2, [r3, #0]
2000047a:	b90a      	cbnz	r2, 20000480 <__do_global_dtors_aux+0x10>
2000047c:	2001      	movs	r0, #1
2000047e:	7018      	strb	r0, [r3, #0]
20000480:	4770      	bx	lr
20000482:	bf00      	nop

20000484 <frame_dummy>:
20000484:	f642 5010 	movw	r0, #11536	; 0x2d10
20000488:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000048c:	b508      	push	{r3, lr}
2000048e:	6803      	ldr	r3, [r0, #0]
20000490:	b12b      	cbz	r3, 2000049e <frame_dummy+0x1a>
20000492:	f240 0300 	movw	r3, #0
20000496:	f2c0 0300 	movt	r3, #0
2000049a:	b103      	cbz	r3, 2000049e <frame_dummy+0x1a>
2000049c:	4798      	blx	r3
2000049e:	bd08      	pop	{r3, pc}

200004a0 <gridEYE_write>:
//--- Grideye Functions ---

// Perform a write to a register on the gridEYE
// reg_addr: 1-byte array containing address of register to read
// recieved_data: 1-byte array containing input data
void gridEYE_write(uint8_t* reg_addr, uint8_t* data){
200004a0:	b580      	push	{r7, lr}
200004a2:	b086      	sub	sp, #24
200004a4:	af02      	add	r7, sp, #8
200004a6:	6078      	str	r0, [r7, #4]
200004a8:	6039      	str	r1, [r7, #0]

	uint8_t signal[] = {*reg_addr, *data};
200004aa:	687b      	ldr	r3, [r7, #4]
200004ac:	781a      	ldrb	r2, [r3, #0]
200004ae:	683b      	ldr	r3, [r7, #0]
200004b0:	781b      	ldrb	r3, [r3, #0]
200004b2:	733a      	strb	r2, [r7, #12]
200004b4:	737b      	strb	r3, [r7, #13]

	MSS_I2C_write
200004b6:	f107 030c 	add.w	r3, r7, #12
200004ba:	f04f 0200 	mov.w	r2, #0
200004be:	9200      	str	r2, [sp, #0]
200004c0:	f642 50fc 	movw	r0, #11772	; 0x2dfc
200004c4:	f2c2 0000 	movt	r0, #8192	; 0x2000
200004c8:	f04f 0169 	mov.w	r1, #105	; 0x69
200004cc:	461a      	mov	r2, r3
200004ce:	f04f 0302 	mov.w	r3, #2
200004d2:	f000 fdf5 	bl	200010c0 <MSS_I2C_write>
			signal,
			sizeof(signal),
			MSS_I2C_RELEASE_BUS
		);

	MSS_I2C_wait_complete(&g_mss_i2c1, MSS_I2C_NO_TIMEOUT);
200004d6:	f642 50fc 	movw	r0, #11772	; 0x2dfc
200004da:	f2c2 0000 	movt	r0, #8192	; 0x2000
200004de:	f04f 0100 	mov.w	r1, #0
200004e2:	f000 ff01 	bl	200012e8 <MSS_I2C_wait_complete>
}//gridEYE_write()
200004e6:	f107 0710 	add.w	r7, r7, #16
200004ea:	46bd      	mov	sp, r7
200004ec:	bd80      	pop	{r7, pc}
200004ee:	bf00      	nop

200004f0 <gridEYE_read>:


// Read from a specific register on the gridEYE
// reg_addr: 1-byte array containing address of register to read
// recieved_data: 1-byte array where received data will be placed
void gridEYE_read(uint8_t* reg_addr, uint8_t* recieved_data ){
200004f0:	b580      	push	{r7, lr}
200004f2:	b086      	sub	sp, #24
200004f4:	af04      	add	r7, sp, #16
200004f6:	6078      	str	r0, [r7, #4]
200004f8:	6039      	str	r1, [r7, #0]

	MSS_I2C_write_read
200004fa:	683b      	ldr	r3, [r7, #0]
200004fc:	9300      	str	r3, [sp, #0]
200004fe:	f04f 0380 	mov.w	r3, #128	; 0x80
20000502:	9301      	str	r3, [sp, #4]
20000504:	f04f 0300 	mov.w	r3, #0
20000508:	9302      	str	r3, [sp, #8]
2000050a:	f642 50fc 	movw	r0, #11772	; 0x2dfc
2000050e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000512:	f04f 0169 	mov.w	r1, #105	; 0x69
20000516:	687a      	ldr	r2, [r7, #4]
20000518:	f04f 0301 	mov.w	r3, #1
2000051c:	f000 fe4a 	bl	200011b4 <MSS_I2C_write_read>
			recieved_data,
			128,
			MSS_I2C_RELEASE_BUS
		);

	MSS_I2C_wait_complete(&g_mss_i2c1, MSS_I2C_NO_TIMEOUT);
20000520:	f642 50fc 	movw	r0, #11772	; 0x2dfc
20000524:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000528:	f04f 0100 	mov.w	r1, #0
2000052c:	f000 fedc 	bl	200012e8 <MSS_I2C_wait_complete>
}//gridEYE_read()
20000530:	f107 0708 	add.w	r7, r7, #8
20000534:	46bd      	mov	sp, r7
20000536:	bd80      	pop	{r7, pc}

20000538 <gridEYE_reset>:


// Reset gridEYE
void gridEYE_reset(){
20000538:	b580      	push	{r7, lr}
2000053a:	b082      	sub	sp, #8
2000053c:	af00      	add	r7, sp, #0

	uint8_t resAddr[] = {0x1};
2000053e:	f04f 0301 	mov.w	r3, #1
20000542:	713b      	strb	r3, [r7, #4]
	uint8_t resVal[] = {0x3f};
20000544:	f04f 033f 	mov.w	r3, #63	; 0x3f
20000548:	703b      	strb	r3, [r7, #0]
	gridEYE_write(resAddr, resVal);
2000054a:	f107 0204 	add.w	r2, r7, #4
2000054e:	463b      	mov	r3, r7
20000550:	4610      	mov	r0, r2
20000552:	4619      	mov	r1, r3
20000554:	f7ff ffa4 	bl	200004a0 <gridEYE_write>
}//gridEYE_reset()
20000558:	f107 0708 	add.w	r7, r7, #8
2000055c:	46bd      	mov	sp, r7
2000055e:	bd80      	pop	{r7, pc}

20000560 <gridEYE_set_normal_power>:


// Set normal power mode
void gridEYE_set_normal_power(){
20000560:	b580      	push	{r7, lr}
20000562:	b082      	sub	sp, #8
20000564:	af00      	add	r7, sp, #0

	uint8_t powAddr[] = {0x0};
20000566:	f04f 0300 	mov.w	r3, #0
2000056a:	713b      	strb	r3, [r7, #4]
	uint8_t powVal[] = {0x0};
2000056c:	f04f 0300 	mov.w	r3, #0
20000570:	703b      	strb	r3, [r7, #0]
	gridEYE_write(powAddr, powVal);
20000572:	f107 0204 	add.w	r2, r7, #4
20000576:	463b      	mov	r3, r7
20000578:	4610      	mov	r0, r2
2000057a:	4619      	mov	r1, r3
2000057c:	f7ff ff90 	bl	200004a0 <gridEYE_write>
}//gridEYE_set_normal()
20000580:	f107 0708 	add.w	r7, r7, #8
20000584:	46bd      	mov	sp, r7
20000586:	bd80      	pop	{r7, pc}

20000588 <gridEYE_init>:


// Reset device, set operation to normal power
void gridEYE_init(){
20000588:	b580      	push	{r7, lr}
2000058a:	af00      	add	r7, sp, #0
	gridEYE_reset();
2000058c:	f7ff ffd4 	bl	20000538 <gridEYE_reset>
	gridEYE_set_normal_power();
20000590:	f7ff ffe6 	bl	20000560 <gridEYE_set_normal_power>
}//grideye_init()
20000594:	bd80      	pop	{r7, pc}
20000596:	bf00      	nop

20000598 <raw_to_temp>:

// Function converts a 12 bit 2C number to
// a signed float
float raw_to_temp(uint8_t upper, uint8_t lower){
20000598:	b580      	push	{r7, lr}
2000059a:	b084      	sub	sp, #16
2000059c:	af00      	add	r7, sp, #0
2000059e:	4602      	mov	r2, r0
200005a0:	460b      	mov	r3, r1
200005a2:	71fa      	strb	r2, [r7, #7]
200005a4:	71bb      	strb	r3, [r7, #6]

	// TEMPERATURE CONVERSION
	// Data is recieved as a 12 bit 2's complement number
	// Each value represents a 0.25 C temperature difference

	int full = (upper << 8) | lower;
200005a6:	79fb      	ldrb	r3, [r7, #7]
200005a8:	ea4f 2203 	mov.w	r2, r3, lsl #8
200005ac:	79bb      	ldrb	r3, [r7, #6]
200005ae:	ea42 0303 	orr.w	r3, r2, r3
200005b2:	60fb      	str	r3, [r7, #12]

	// If input is negative, perform sign extension
	if (upper &  (1 << 3)){
200005b4:	79fb      	ldrb	r3, [r7, #7]
200005b6:	f003 0308 	and.w	r3, r3, #8
200005ba:	2b00      	cmp	r3, #0
200005bc:	d005      	beq.n	200005ca <raw_to_temp+0x32>
		full |= 0xFFFFF000;
200005be:	68fb      	ldr	r3, [r7, #12]
200005c0:	ea6f 5303 	mvn.w	r3, r3, lsl #20
200005c4:	ea6f 5313 	mvn.w	r3, r3, lsr #20
200005c8:	60fb      	str	r3, [r7, #12]
	}
	return (float)full*0.25;
200005ca:	68f8      	ldr	r0, [r7, #12]
200005cc:	f002 f8e0 	bl	20002790 <__aeabi_i2f>
200005d0:	4603      	mov	r3, r0
200005d2:	4618      	mov	r0, r3
200005d4:	4904      	ldr	r1, [pc, #16]	; (200005e8 <raw_to_temp+0x50>)
200005d6:	f002 f92f 	bl	20002838 <__aeabi_fmul>
200005da:	4603      	mov	r3, r0
}//raw_to_temp()
200005dc:	4618      	mov	r0, r3
200005de:	f107 0710 	add.w	r7, r7, #16
200005e2:	46bd      	mov	sp, r7
200005e4:	bd80      	pop	{r7, pc}
200005e6:	bf00      	nop
200005e8:	3e800000 	.word	0x3e800000

200005ec <get_temps_reversed>:

// Function converts 128 byte raw data array
// to a set of 64 signed float values
// This function also reverses the values from left
// to right for easier debugging while printing
void get_temps_reversed(uint8_t* data_in, float temps[][8]){
200005ec:	b5b0      	push	{r4, r5, r7, lr}
200005ee:	b086      	sub	sp, #24
200005f0:	af00      	add	r7, sp, #0
200005f2:	6078      	str	r0, [r7, #4]
200005f4:	6039      	str	r1, [r7, #0]

	int i = 0;
200005f6:	f04f 0300 	mov.w	r3, #0
200005fa:	60fb      	str	r3, [r7, #12]
	int j = 0;
200005fc:	f04f 0300 	mov.w	r3, #0
20000600:	613b      	str	r3, [r7, #16]
	int k = 0;
20000602:	f04f 0300 	mov.w	r3, #0
20000606:	617b      	str	r3, [r7, #20]

	// Iterate through all data
	for (i = 0; i < 128; i += 2) {
20000608:	f04f 0300 	mov.w	r3, #0
2000060c:	60fb      	str	r3, [r7, #12]
2000060e:	e02e      	b.n	2000066e <get_temps_reversed+0x82>
		// Move one column to the right every 16 input bytes
		if(i && i%16 == 0){
20000610:	68fb      	ldr	r3, [r7, #12]
20000612:	2b00      	cmp	r3, #0
20000614:	d00b      	beq.n	2000062e <get_temps_reversed+0x42>
20000616:	68fb      	ldr	r3, [r7, #12]
20000618:	f003 030f 	and.w	r3, r3, #15
2000061c:	2b00      	cmp	r3, #0
2000061e:	d106      	bne.n	2000062e <get_temps_reversed+0x42>
			++k;
20000620:	697b      	ldr	r3, [r7, #20]
20000622:	f103 0301 	add.w	r3, r3, #1
20000626:	617b      	str	r3, [r7, #20]
			j = 0;
20000628:	f04f 0300 	mov.w	r3, #0
2000062c:	613b      	str	r3, [r7, #16]
		}

		// Read upper and lower bytes, convert to float, store
		temps[j][k] = raw_to_temp(data_in[i + 1], data_in[i]);
2000062e:	693b      	ldr	r3, [r7, #16]
20000630:	ea4f 1243 	mov.w	r2, r3, lsl #5
20000634:	683b      	ldr	r3, [r7, #0]
20000636:	eb02 0403 	add.w	r4, r2, r3
2000063a:	697d      	ldr	r5, [r7, #20]
2000063c:	68fb      	ldr	r3, [r7, #12]
2000063e:	f103 0201 	add.w	r2, r3, #1
20000642:	687b      	ldr	r3, [r7, #4]
20000644:	4413      	add	r3, r2
20000646:	781a      	ldrb	r2, [r3, #0]
20000648:	68f9      	ldr	r1, [r7, #12]
2000064a:	687b      	ldr	r3, [r7, #4]
2000064c:	440b      	add	r3, r1
2000064e:	781b      	ldrb	r3, [r3, #0]
20000650:	4610      	mov	r0, r2
20000652:	4619      	mov	r1, r3
20000654:	f7ff ffa0 	bl	20000598 <raw_to_temp>
20000658:	4603      	mov	r3, r0
2000065a:	f844 3025 	str.w	r3, [r4, r5, lsl #2]

		++j;
2000065e:	693b      	ldr	r3, [r7, #16]
20000660:	f103 0301 	add.w	r3, r3, #1
20000664:	613b      	str	r3, [r7, #16]
	int i = 0;
	int j = 0;
	int k = 0;

	// Iterate through all data
	for (i = 0; i < 128; i += 2) {
20000666:	68fb      	ldr	r3, [r7, #12]
20000668:	f103 0302 	add.w	r3, r3, #2
2000066c:	60fb      	str	r3, [r7, #12]
2000066e:	68fb      	ldr	r3, [r7, #12]
20000670:	2b7f      	cmp	r3, #127	; 0x7f
20000672:	ddcd      	ble.n	20000610 <get_temps_reversed+0x24>
		// Read upper and lower bytes, convert to float, store
		temps[j][k] = raw_to_temp(data_in[i + 1], data_in[i]);

		++j;
	}
}//get_temps_reversed()
20000674:	f107 0718 	add.w	r7, r7, #24
20000678:	46bd      	mov	sp, r7
2000067a:	bdb0      	pop	{r4, r5, r7, pc}

2000067c <LED_reset>:
 * since they're upside-down on the head piece, this is reversed.
 * thus, LED[0] is the rightmost, LED[23] is the leftmost.
 */

// Reset LED values
void LED_reset(volatile uint32_t* LED){
2000067c:	b480      	push	{r7}
2000067e:	b085      	sub	sp, #20
20000680:	af00      	add	r7, sp, #0
20000682:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < NUMLEDS; ++i){
20000684:	f04f 0300 	mov.w	r3, #0
20000688:	60fb      	str	r3, [r7, #12]
2000068a:	e00b      	b.n	200006a4 <LED_reset+0x28>
		LED[i] = off;
2000068c:	68fb      	ldr	r3, [r7, #12]
2000068e:	ea4f 0283 	mov.w	r2, r3, lsl #2
20000692:	687b      	ldr	r3, [r7, #4]
20000694:	4413      	add	r3, r2
20000696:	f04f 0200 	mov.w	r2, #0
2000069a:	601a      	str	r2, [r3, #0]
 */

// Reset LED values
void LED_reset(volatile uint32_t* LED){
	int i;
	for (i = 0; i < NUMLEDS; ++i){
2000069c:	68fb      	ldr	r3, [r7, #12]
2000069e:	f103 0301 	add.w	r3, r3, #1
200006a2:	60fb      	str	r3, [r7, #12]
200006a4:	68fb      	ldr	r3, [r7, #12]
200006a6:	2b17      	cmp	r3, #23
200006a8:	ddf0      	ble.n	2000068c <LED_reset+0x10>
		LED[i] = off;
	}
}
200006aa:	f107 0714 	add.w	r7, r7, #20
200006ae:	46bd      	mov	sp, r7
200006b0:	bc80      	pop	{r7}
200006b2:	4770      	bx	lr

200006b4 <data_to_cm>:
// Sonic globals
#define SONIC_ADDR 0x40050100;


// Returns a decimal value representation of the distance in centimeters
float data_to_cm(uint32_t in_data){
200006b4:	b580      	push	{r7, lr}
200006b6:	b084      	sub	sp, #16
200006b8:	af00      	add	r7, sp, #0
200006ba:	6078      	str	r0, [r7, #4]

	// Convert 10nS count to 1mS count
	float cm_data = (float)in_data / 100;
200006bc:	6878      	ldr	r0, [r7, #4]
200006be:	f002 f863 	bl	20002788 <__aeabi_ui2f>
200006c2:	4603      	mov	r3, r0
200006c4:	4618      	mov	r0, r3
200006c6:	4907      	ldr	r1, [pc, #28]	; (200006e4 <data_to_cm+0x30>)
200006c8:	f002 f96a 	bl	200029a0 <__aeabi_fdiv>
200006cc:	4603      	mov	r3, r0
200006ce:	60fb      	str	r3, [r7, #12]

	// Divide by 56 to get data in cm according to datasheet
	return cm_data/56;
200006d0:	68f8      	ldr	r0, [r7, #12]
200006d2:	4905      	ldr	r1, [pc, #20]	; (200006e8 <data_to_cm+0x34>)
200006d4:	f002 f964 	bl	200029a0 <__aeabi_fdiv>
200006d8:	4603      	mov	r3, r0
}
200006da:	4618      	mov	r0, r3
200006dc:	f107 0710 	add.w	r7, r7, #16
200006e0:	46bd      	mov	sp, r7
200006e2:	bd80      	pop	{r7, pc}
200006e4:	42c80000 	.word	0x42c80000
200006e8:	42600000 	.word	0x42600000
200006ec:	00000000 	.word	0x00000000

200006f0 <wrap_angle_360>:
#define EUL_HEADING_LSB 0x1A

#define CHIP_ID_REG 0x00

double wrap_angle_360(double x)
{
200006f0:	b590      	push	{r4, r7, lr}
200006f2:	b083      	sub	sp, #12
200006f4:	af00      	add	r7, sp, #0
200006f6:	e9c7 0100 	strd	r0, r1, [r7]
	while (x < 0) x += 360.0;
200006fa:	e00a      	b.n	20000712 <wrap_angle_360+0x22>
200006fc:	e9d7 0100 	ldrd	r0, r1, [r7]
20000700:	a321      	add	r3, pc, #132	; (adr r3, 20000788 <wrap_angle_360+0x98>)
20000702:	e9d3 2300 	ldrd	r2, r3, [r3]
20000706:	f001 fb15 	bl	20001d34 <__adddf3>
2000070a:	4602      	mov	r2, r0
2000070c:	460b      	mov	r3, r1
2000070e:	e9c7 2300 	strd	r2, r3, [r7]
20000712:	f04f 0300 	mov.w	r3, #0
20000716:	461c      	mov	r4, r3
20000718:	e9d7 0100 	ldrd	r0, r1, [r7]
2000071c:	f04f 0200 	mov.w	r2, #0
20000720:	f04f 0300 	mov.w	r3, #0
20000724:	f001 ff2a 	bl	2000257c <__aeabi_dcmplt>
20000728:	4603      	mov	r3, r0
2000072a:	2b00      	cmp	r3, #0
2000072c:	d002      	beq.n	20000734 <wrap_angle_360+0x44>
2000072e:	f04f 0301 	mov.w	r3, #1
20000732:	461c      	mov	r4, r3
20000734:	b2e3      	uxtb	r3, r4
20000736:	2b00      	cmp	r3, #0
20000738:	d1e0      	bne.n	200006fc <wrap_angle_360+0xc>
	while (x >= 360.0) x -= 360.0;
2000073a:	e00a      	b.n	20000752 <wrap_angle_360+0x62>
2000073c:	e9d7 0100 	ldrd	r0, r1, [r7]
20000740:	a311      	add	r3, pc, #68	; (adr r3, 20000788 <wrap_angle_360+0x98>)
20000742:	e9d3 2300 	ldrd	r2, r3, [r3]
20000746:	f001 faf3 	bl	20001d30 <__aeabi_dsub>
2000074a:	4602      	mov	r2, r0
2000074c:	460b      	mov	r3, r1
2000074e:	e9c7 2300 	strd	r2, r3, [r7]
20000752:	f04f 0300 	mov.w	r3, #0
20000756:	461c      	mov	r4, r3
20000758:	e9d7 0100 	ldrd	r0, r1, [r7]
2000075c:	a30a      	add	r3, pc, #40	; (adr r3, 20000788 <wrap_angle_360+0x98>)
2000075e:	e9d3 2300 	ldrd	r2, r3, [r3]
20000762:	f001 ff1f 	bl	200025a4 <__aeabi_dcmpge>
20000766:	4603      	mov	r3, r0
20000768:	2b00      	cmp	r3, #0
2000076a:	d002      	beq.n	20000772 <wrap_angle_360+0x82>
2000076c:	f04f 0301 	mov.w	r3, #1
20000770:	461c      	mov	r4, r3
20000772:	b2e3      	uxtb	r3, r4
20000774:	2b00      	cmp	r3, #0
20000776:	d1e1      	bne.n	2000073c <wrap_angle_360+0x4c>
	return x;
20000778:	e9d7 2300 	ldrd	r2, r3, [r7]
}
2000077c:	4610      	mov	r0, r2
2000077e:	4619      	mov	r1, r3
20000780:	f107 070c 	add.w	r7, r7, #12
20000784:	46bd      	mov	sp, r7
20000786:	bd90      	pop	{r4, r7, pc}
20000788:	00000000 	.word	0x00000000
2000078c:	40768000 	.word	0x40768000

20000790 <wrap_angle_180>:

double wrap_angle_180(double x)
{
20000790:	b590      	push	{r4, r7, lr}
20000792:	b083      	sub	sp, #12
20000794:	af00      	add	r7, sp, #0
20000796:	e9c7 0100 	strd	r0, r1, [r7]
	while (x < -180.0) x += 360.0;
2000079a:	e00a      	b.n	200007b2 <wrap_angle_180+0x22>
2000079c:	e9d7 0100 	ldrd	r0, r1, [r7]
200007a0:	a321      	add	r3, pc, #132	; (adr r3, 20000828 <wrap_angle_180+0x98>)
200007a2:	e9d3 2300 	ldrd	r2, r3, [r3]
200007a6:	f001 fac5 	bl	20001d34 <__adddf3>
200007aa:	4602      	mov	r2, r0
200007ac:	460b      	mov	r3, r1
200007ae:	e9c7 2300 	strd	r2, r3, [r7]
200007b2:	f04f 0300 	mov.w	r3, #0
200007b6:	461c      	mov	r4, r3
200007b8:	e9d7 0100 	ldrd	r0, r1, [r7]
200007bc:	a31c      	add	r3, pc, #112	; (adr r3, 20000830 <wrap_angle_180+0xa0>)
200007be:	e9d3 2300 	ldrd	r2, r3, [r3]
200007c2:	f001 fedb 	bl	2000257c <__aeabi_dcmplt>
200007c6:	4603      	mov	r3, r0
200007c8:	2b00      	cmp	r3, #0
200007ca:	d002      	beq.n	200007d2 <wrap_angle_180+0x42>
200007cc:	f04f 0301 	mov.w	r3, #1
200007d0:	461c      	mov	r4, r3
200007d2:	b2e3      	uxtb	r3, r4
200007d4:	2b00      	cmp	r3, #0
200007d6:	d1e1      	bne.n	2000079c <wrap_angle_180+0xc>
	while (x >= 180.0) x -= 360.0;
200007d8:	e00a      	b.n	200007f0 <wrap_angle_180+0x60>
200007da:	e9d7 0100 	ldrd	r0, r1, [r7]
200007de:	a312      	add	r3, pc, #72	; (adr r3, 20000828 <wrap_angle_180+0x98>)
200007e0:	e9d3 2300 	ldrd	r2, r3, [r3]
200007e4:	f001 faa4 	bl	20001d30 <__aeabi_dsub>
200007e8:	4602      	mov	r2, r0
200007ea:	460b      	mov	r3, r1
200007ec:	e9c7 2300 	strd	r2, r3, [r7]
200007f0:	f04f 0300 	mov.w	r3, #0
200007f4:	461c      	mov	r4, r3
200007f6:	e9d7 0100 	ldrd	r0, r1, [r7]
200007fa:	a30f      	add	r3, pc, #60	; (adr r3, 20000838 <wrap_angle_180+0xa8>)
200007fc:	e9d3 2300 	ldrd	r2, r3, [r3]
20000800:	f001 fed0 	bl	200025a4 <__aeabi_dcmpge>
20000804:	4603      	mov	r3, r0
20000806:	2b00      	cmp	r3, #0
20000808:	d002      	beq.n	20000810 <wrap_angle_180+0x80>
2000080a:	f04f 0301 	mov.w	r3, #1
2000080e:	461c      	mov	r4, r3
20000810:	b2e3      	uxtb	r3, r4
20000812:	2b00      	cmp	r3, #0
20000814:	d1e1      	bne.n	200007da <wrap_angle_180+0x4a>
	return x;
20000816:	e9d7 2300 	ldrd	r2, r3, [r7]
}
2000081a:	4610      	mov	r0, r2
2000081c:	4619      	mov	r1, r3
2000081e:	f107 070c 	add.w	r7, r7, #12
20000822:	46bd      	mov	sp, r7
20000824:	bd90      	pop	{r4, r7, pc}
20000826:	bf00      	nop
20000828:	00000000 	.word	0x00000000
2000082c:	40768000 	.word	0x40768000
20000830:	00000000 	.word	0x00000000
20000834:	c0668000 	.word	0xc0668000
20000838:	00000000 	.word	0x00000000
2000083c:	40668000 	.word	0x40668000

20000840 <init_BNO055>:

int init_BNO055(uint8_t dev_addr)
{
20000840:	b580      	push	{r7, lr}
20000842:	b088      	sub	sp, #32
20000844:	af04      	add	r7, sp, #16
20000846:	4603      	mov	r3, r0
20000848:	71fb      	strb	r3, [r7, #7]
	// Set up MSS I2C driver struct
	MSS_I2C_init(&g_mss_i2c1 , 0x0, MSS_I2C_PCLK_DIV_256 );
2000084a:	f642 50fc 	movw	r0, #11772	; 0x2dfc
2000084e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000852:	f04f 0100 	mov.w	r1, #0
20000856:	f04f 0200 	mov.w	r2, #0
2000085a:	f000 fb7b 	bl	20000f54 <MSS_I2C_init>


	// Read chip ID
	uint8_t read_id_seq[] = {CHIP_ID_REG};
2000085e:	f04f 0300 	mov.w	r3, #0
20000862:	733b      	strb	r3, [r7, #12]
	uint8_t chip_id;
	MSS_I2C_write_read
20000864:	79fa      	ldrb	r2, [r7, #7]
20000866:	f107 030c 	add.w	r3, r7, #12
2000086a:	f107 010b 	add.w	r1, r7, #11
2000086e:	9100      	str	r1, [sp, #0]
20000870:	f04f 0101 	mov.w	r1, #1
20000874:	9101      	str	r1, [sp, #4]
20000876:	f04f 0100 	mov.w	r1, #0
2000087a:	9102      	str	r1, [sp, #8]
2000087c:	f642 50fc 	movw	r0, #11772	; 0x2dfc
20000880:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000884:	4611      	mov	r1, r2
20000886:	461a      	mov	r2, r3
20000888:	f04f 0301 	mov.w	r3, #1
2000088c:	f000 fc92 	bl	200011b4 <MSS_I2C_write_read>
		1,
		&chip_id,
		1,
		MSS_I2C_RELEASE_BUS
	);
	MSS_I2C_wait_complete(&g_mss_i2c1, MSS_I2C_RELEASE_BUS);
20000890:	f642 50fc 	movw	r0, #11772	; 0x2dfc
20000894:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000898:	f04f 0100 	mov.w	r1, #0
2000089c:	f000 fd24 	bl	200012e8 <MSS_I2C_wait_complete>
	if (chip_id != 0xA0) return -1;
200008a0:	7afb      	ldrb	r3, [r7, #11]
200008a2:	2ba0      	cmp	r3, #160	; 0xa0
200008a4:	d002      	beq.n	200008ac <init_BNO055+0x6c>
200008a6:	f04f 33ff 	mov.w	r3, #4294967295
200008aa:	e01f      	b.n	200008ec <init_BNO055+0xac>

	// Set mode to NDOF
	uint8_t write_mode_seq[] = { OPR_MODE_REG, OPR_MODE_NDOF };
200008ac:	f642 43ec 	movw	r3, #11500	; 0x2cec
200008b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200008b4:	881b      	ldrh	r3, [r3, #0]
200008b6:	813b      	strh	r3, [r7, #8]
	MSS_I2C_write
200008b8:	79fa      	ldrb	r2, [r7, #7]
200008ba:	f107 0308 	add.w	r3, r7, #8
200008be:	f04f 0100 	mov.w	r1, #0
200008c2:	9100      	str	r1, [sp, #0]
200008c4:	f642 50fc 	movw	r0, #11772	; 0x2dfc
200008c8:	f2c2 0000 	movt	r0, #8192	; 0x2000
200008cc:	4611      	mov	r1, r2
200008ce:	461a      	mov	r2, r3
200008d0:	f04f 0302 	mov.w	r3, #2
200008d4:	f000 fbf4 	bl	200010c0 <MSS_I2C_write>
		dev_addr,
		write_mode_seq,
		2,
		MSS_I2C_RELEASE_BUS
	);
	MSS_I2C_wait_complete(&g_mss_i2c1, MSS_I2C_NO_TIMEOUT);
200008d8:	f642 50fc 	movw	r0, #11772	; 0x2dfc
200008dc:	f2c2 0000 	movt	r0, #8192	; 0x2000
200008e0:	f04f 0100 	mov.w	r1, #0
200008e4:	f000 fd00 	bl	200012e8 <MSS_I2C_wait_complete>

	return 0;
200008e8:	f04f 0300 	mov.w	r3, #0
}
200008ec:	4618      	mov	r0, r3
200008ee:	f107 0710 	add.w	r7, r7, #16
200008f2:	46bd      	mov	sp, r7
200008f4:	bd80      	pop	{r7, pc}
200008f6:	bf00      	nop

200008f8 <read_heading_BNO055>:

double read_heading_BNO055(uint8_t dev_addr)
{
200008f8:	b580      	push	{r7, lr}
200008fa:	b088      	sub	sp, #32
200008fc:	af04      	add	r7, sp, #16
200008fe:	4603      	mov	r3, r0
20000900:	71fb      	strb	r3, [r7, #7]
	int32_t heading = 0;
20000902:	f04f 0300 	mov.w	r3, #0
20000906:	60fb      	str	r3, [r7, #12]
	uint8_t read_heading_seq[] = {EUL_HEADING_LSB, EUL_HEADING_MSB};
20000908:	f642 43e8 	movw	r3, #11496	; 0x2ce8
2000090c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000910:	881b      	ldrh	r3, [r3, #0]
20000912:	813b      	strh	r3, [r7, #8]
	MSS_I2C_write_read
20000914:	f107 010c 	add.w	r1, r7, #12
20000918:	79fa      	ldrb	r2, [r7, #7]
2000091a:	f107 0308 	add.w	r3, r7, #8
2000091e:	9100      	str	r1, [sp, #0]
20000920:	f04f 0102 	mov.w	r1, #2
20000924:	9101      	str	r1, [sp, #4]
20000926:	f04f 0101 	mov.w	r1, #1
2000092a:	9102      	str	r1, [sp, #8]
2000092c:	f642 50fc 	movw	r0, #11772	; 0x2dfc
20000930:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000934:	4611      	mov	r1, r2
20000936:	461a      	mov	r2, r3
20000938:	f04f 0302 	mov.w	r3, #2
2000093c:	f000 fc3a 	bl	200011b4 <MSS_I2C_write_read>
		2,
		&heading,
		2,
		MSS_I2C_HOLD_BUS
	);
	MSS_I2C_wait_complete(&g_mss_i2c1, MSS_I2C_RELEASE_BUS);
20000940:	f642 50fc 	movw	r0, #11772	; 0x2dfc
20000944:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000948:	f04f 0100 	mov.w	r1, #0
2000094c:	f000 fccc 	bl	200012e8 <MSS_I2C_wait_complete>
	return wrap_angle_360(heading/16.0);
20000950:	68fb      	ldr	r3, [r7, #12]
20000952:	4618      	mov	r0, r3
20000954:	f001 fb3a 	bl	20001fcc <__aeabi_i2d>
20000958:	4602      	mov	r2, r0
2000095a:	460b      	mov	r3, r1
2000095c:	4610      	mov	r0, r2
2000095e:	4619      	mov	r1, r3
20000960:	f04f 0200 	mov.w	r2, #0
20000964:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
20000968:	f503 1340 	add.w	r3, r3, #3145728	; 0x300000
2000096c:	f001 fcbe 	bl	200022ec <__aeabi_ddiv>
20000970:	4602      	mov	r2, r0
20000972:	460b      	mov	r3, r1
20000974:	4610      	mov	r0, r2
20000976:	4619      	mov	r1, r3
20000978:	f7ff feba 	bl	200006f0 <wrap_angle_360>
2000097c:	4602      	mov	r2, r0
2000097e:	460b      	mov	r3, r1
}
20000980:	4610      	mov	r0, r2
20000982:	4619      	mov	r1, r3
20000984:	f107 0710 	add.w	r7, r7, #16
20000988:	46bd      	mov	sp, r7
2000098a:	bd80      	pop	{r7, pc}

2000098c <calc_display_angle>:

double calc_display_angle(const uint8_t display_addr, const uint8_t sensor_addr, const uint8_t init)
{
2000098c:	b580      	push	{r7, lr}
2000098e:	b086      	sub	sp, #24
20000990:	af00      	add	r7, sp, #0
20000992:	4613      	mov	r3, r2
20000994:	4602      	mov	r2, r0
20000996:	71fa      	strb	r2, [r7, #7]
20000998:	460a      	mov	r2, r1
2000099a:	71ba      	strb	r2, [r7, #6]
2000099c:	717b      	strb	r3, [r7, #5]
	static double baseline_heading_display;
	static double baseline_heading_sensor;

	if (init)
2000099e:	797b      	ldrb	r3, [r7, #5]
200009a0:	2b00      	cmp	r3, #0
200009a2:	d013      	beq.n	200009cc <calc_display_angle+0x40>
	{
		baseline_heading_display = read_heading_BNO055(display_addr);
200009a4:	79fb      	ldrb	r3, [r7, #7]
200009a6:	4618      	mov	r0, r3
200009a8:	f7ff ffa6 	bl	200008f8 <read_heading_BNO055>
200009ac:	f642 5328 	movw	r3, #11560	; 0x2d28
200009b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200009b4:	e9c3 0100 	strd	r0, r1, [r3]
		baseline_heading_sensor = read_heading_BNO055(sensor_addr);
200009b8:	79bb      	ldrb	r3, [r7, #6]
200009ba:	4618      	mov	r0, r3
200009bc:	f7ff ff9c 	bl	200008f8 <read_heading_BNO055>
200009c0:	f642 5330 	movw	r3, #11568	; 0x2d30
200009c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200009c8:	e9c3 0100 	strd	r0, r1, [r3]
	}

	double heading_sensor = wrap_angle_180(read_heading_BNO055(sensor_addr) - baseline_heading_sensor);
200009cc:	79bb      	ldrb	r3, [r7, #6]
200009ce:	4618      	mov	r0, r3
200009d0:	f7ff ff92 	bl	200008f8 <read_heading_BNO055>
200009d4:	f642 5330 	movw	r3, #11568	; 0x2d30
200009d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200009dc:	e9d3 2300 	ldrd	r2, r3, [r3]
200009e0:	f001 f9a6 	bl	20001d30 <__aeabi_dsub>
200009e4:	4602      	mov	r2, r0
200009e6:	460b      	mov	r3, r1
200009e8:	4610      	mov	r0, r2
200009ea:	4619      	mov	r1, r3
200009ec:	f7ff fed0 	bl	20000790 <wrap_angle_180>
200009f0:	4602      	mov	r2, r0
200009f2:	460b      	mov	r3, r1
200009f4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double heading_display = wrap_angle_180(read_heading_BNO055(display_addr) - baseline_heading_display);
200009f8:	79fb      	ldrb	r3, [r7, #7]
200009fa:	4618      	mov	r0, r3
200009fc:	f7ff ff7c 	bl	200008f8 <read_heading_BNO055>
20000a00:	f642 5328 	movw	r3, #11560	; 0x2d28
20000a04:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000a08:	e9d3 2300 	ldrd	r2, r3, [r3]
20000a0c:	f001 f990 	bl	20001d30 <__aeabi_dsub>
20000a10:	4602      	mov	r2, r0
20000a12:	460b      	mov	r3, r1
20000a14:	4610      	mov	r0, r2
20000a16:	4619      	mov	r1, r3
20000a18:	f7ff feba 	bl	20000790 <wrap_angle_180>
20000a1c:	4602      	mov	r2, r0
20000a1e:	460b      	mov	r3, r1
20000a20:	e9c7 2304 	strd	r2, r3, [r7, #16]

	return wrap_angle_180(heading_sensor - heading_display);
20000a24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
20000a28:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
20000a2c:	f001 f980 	bl	20001d30 <__aeabi_dsub>
20000a30:	4602      	mov	r2, r0
20000a32:	460b      	mov	r3, r1
20000a34:	4610      	mov	r0, r2
20000a36:	4619      	mov	r1, r3
20000a38:	f7ff feaa 	bl	20000790 <wrap_angle_180>
20000a3c:	4602      	mov	r2, r0
20000a3e:	460b      	mov	r3, r1
}
20000a40:	4610      	mov	r0, r2
20000a42:	4619      	mov	r1, r3
20000a44:	f107 0718 	add.w	r7, r7, #24
20000a48:	46bd      	mov	sp, r7
20000a4a:	bd80      	pop	{r7, pc}

20000a4c <main>:
}



int main()
{
20000a4c:	b590      	push	{r4, r7, lr}
20000a4e:	b0eb      	sub	sp, #428	; 0x1ac
20000a50:	af00      	add	r7, sp, #0
	// Setup
	LED_reset(LED);
20000a52:	f642 5314 	movw	r3, #11540	; 0x2d14
20000a56:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000a5a:	681b      	ldr	r3, [r3, #0]
20000a5c:	4618      	mov	r0, r3
20000a5e:	f7ff fe0d 	bl	2000067c <LED_reset>
	// Initialize with a clock frequency of ~ 400kHz
	MSS_I2C_init(&g_mss_i2c1 , 0x0, MSS_I2C_PCLK_DIV_256 );
20000a62:	f642 50fc 	movw	r0, #11772	; 0x2dfc
20000a66:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000a6a:	f04f 0100 	mov.w	r1, #0
20000a6e:	f04f 0200 	mov.w	r2, #0
20000a72:	f000 fa6f 	bl	20000f54 <MSS_I2C_init>
	gridEYE_init();
20000a76:	f7ff fd87 	bl	20000588 <gridEYE_init>
	if (init_BNO055(WAND_IMU_ADDR)) assert("IMU init error");
20000a7a:	f04f 0028 	mov.w	r0, #40	; 0x28
20000a7e:	f7ff fedf 	bl	20000840 <init_BNO055>
	if (init_BNO055(GLASSES_IMU_ADDR)) assert("IMU init error");
20000a82:	f04f 0029 	mov.w	r0, #41	; 0x29
20000a86:	f7ff fedb 	bl	20000840 <init_BNO055>

	// Base pixel register is 0x80
	uint8_t pixel_addr[] = {0x80};
20000a8a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
20000a8e:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
	uint8_t pixel_data[128] = {0};
20000a92:	f507 7282 	add.w	r2, r7, #260	; 0x104
20000a96:	f04f 0380 	mov.w	r3, #128	; 0x80
20000a9a:	4610      	mov	r0, r2
20000a9c:	f04f 0100 	mov.w	r1, #0
20000aa0:	461a      	mov	r2, r3
20000aa2:	f002 f8b7 	bl	20002c14 <memset>

	float temps[8][8];


	// Loop variables
	float cm_dist = 0;
20000aa6:	4b91      	ldr	r3, [pc, #580]	; (20000cec <main+0x2a0>)
20000aa8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	uint32_t color = 0;
20000aac:	f04f 0300 	mov.w	r3, #0
20000ab0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	int LED_num = 0;
20000ab4:	f04f 0300 	mov.w	r3, #0
20000ab8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	int i = 0;
20000abc:	f04f 0300 	mov.w	r3, #0
20000ac0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	double display_angle;
	int8_t set_heading_baseline = 1;
20000ac4:	f04f 0301 	mov.w	r3, #1
20000ac8:	f887 31a3 	strb.w	r3, [r7, #419]	; 0x1a3

	while( 1 ) {
		// gridEYE
		gridEYE_read(pixel_addr, pixel_data);
20000acc:	f507 72c2 	add.w	r2, r7, #388	; 0x184
20000ad0:	f507 7382 	add.w	r3, r7, #260	; 0x104
20000ad4:	4610      	mov	r0, r2
20000ad6:	4619      	mov	r1, r3
20000ad8:	f7ff fd0a 	bl	200004f0 <gridEYE_read>
		get_temps_reversed(pixel_data, temps);
20000adc:	f507 7282 	add.w	r2, r7, #260	; 0x104
20000ae0:	f107 0304 	add.w	r3, r7, #4
20000ae4:	4610      	mov	r0, r2
20000ae6:	4619      	mov	r1, r3
20000ae8:	f7ff fd80 	bl	200005ec <get_temps_reversed>

		// Sonic: calculate dist and set brightness
		uint32_t DATA = *SONIC_READ;
20000aec:	f642 5318 	movw	r3, #11544	; 0x2d18
20000af0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000af4:	681b      	ldr	r3, [r3, #0]
20000af6:	681b      	ldr	r3, [r3, #0]
20000af8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
		cm_dist = data_to_cm(DATA);
20000afc:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
20000b00:	f7ff fdd8 	bl	200006b4 <data_to_cm>
20000b04:	4603      	mov	r3, r0
20000b06:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
//		LED_num = dist_to_LED(cm_dist);
		//color = dist_to_color(cm_dist);

		if(temps[3][3] > 24.00 || temps[4][4] > 24.0)
20000b0a:	f107 0304 	add.w	r3, r7, #4
20000b0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
20000b10:	f04f 0200 	mov.w	r2, #0
20000b14:	4614      	mov	r4, r2
20000b16:	4618      	mov	r0, r3
20000b18:	4975      	ldr	r1, [pc, #468]	; (20000cf0 <main+0x2a4>)
20000b1a:	f002 f849 	bl	20002bb0 <__aeabi_fcmpgt>
20000b1e:	4603      	mov	r3, r0
20000b20:	2b00      	cmp	r3, #0
20000b22:	d002      	beq.n	20000b2a <main+0xde>
20000b24:	f04f 0301 	mov.w	r3, #1
20000b28:	461c      	mov	r4, r3
20000b2a:	b2e3      	uxtb	r3, r4
20000b2c:	2b00      	cmp	r3, #0
20000b2e:	d113      	bne.n	20000b58 <main+0x10c>
20000b30:	f107 0304 	add.w	r3, r7, #4
20000b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
20000b38:	f04f 0200 	mov.w	r2, #0
20000b3c:	4614      	mov	r4, r2
20000b3e:	4618      	mov	r0, r3
20000b40:	496b      	ldr	r1, [pc, #428]	; (20000cf0 <main+0x2a4>)
20000b42:	f002 f835 	bl	20002bb0 <__aeabi_fcmpgt>
20000b46:	4603      	mov	r3, r0
20000b48:	2b00      	cmp	r3, #0
20000b4a:	d002      	beq.n	20000b52 <main+0x106>
20000b4c:	f04f 0301 	mov.w	r3, #1
20000b50:	461c      	mov	r4, r3
20000b52:	b2e3      	uxtb	r3, r4
20000b54:	2b00      	cmp	r3, #0
20000b56:	d004      	beq.n	20000b62 <main+0x116>
			color = yellow;
20000b58:	f64f 73ff 	movw	r3, #65535	; 0xffff
20000b5c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
		uint32_t DATA = *SONIC_READ;
		cm_dist = data_to_cm(DATA);
//		LED_num = dist_to_LED(cm_dist);
		//color = dist_to_color(cm_dist);

		if(temps[3][3] > 24.00 || temps[4][4] > 24.0)
20000b60:	e003      	b.n	20000b6a <main+0x11e>
			color = yellow;
		else
			color = blue;
20000b62:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
20000b66:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c

		// IMUs: read and calculate angle at which to display
		display_angle = calc_display_angle(GLASSES_IMU_ADDR, WAND_IMU_ADDR, set_heading_baseline);
20000b6a:	f897 31a3 	ldrb.w	r3, [r7, #419]	; 0x1a3
20000b6e:	f04f 0029 	mov.w	r0, #41	; 0x29
20000b72:	f04f 0128 	mov.w	r1, #40	; 0x28
20000b76:	461a      	mov	r2, r3
20000b78:	f7ff ff08 	bl	2000098c <calc_display_angle>
20000b7c:	4602      	mov	r2, r0
20000b7e:	460b      	mov	r3, r1
20000b80:	f507 71cc 	add.w	r1, r7, #408	; 0x198
20000b84:	e9c1 2300 	strd	r2, r3, [r1]
		set_heading_baseline = 0;
20000b88:	f04f 0300 	mov.w	r3, #0
20000b8c:	f887 31a3 	strb.w	r3, [r7, #419]	; 0x1a3
		if (display_angle < -DISPLAY_FOV/2 || display_angle >= DISPLAY_FOV/2){
20000b90:	f04f 0300 	mov.w	r3, #0
20000b94:	461c      	mov	r4, r3
20000b96:	f507 73cc 	add.w	r3, r7, #408	; 0x198
20000b9a:	e9d3 0100 	ldrd	r0, r1, [r3]
20000b9e:	f04f 0200 	mov.w	r2, #0
20000ba2:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
20000ba6:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
20000baa:	f001 fce7 	bl	2000257c <__aeabi_dcmplt>
20000bae:	4603      	mov	r3, r0
20000bb0:	2b00      	cmp	r3, #0
20000bb2:	d002      	beq.n	20000bba <main+0x16e>
20000bb4:	f04f 0301 	mov.w	r3, #1
20000bb8:	461c      	mov	r4, r3
20000bba:	b2e3      	uxtb	r3, r4
20000bbc:	2b00      	cmp	r3, #0
20000bbe:	d117      	bne.n	20000bf0 <main+0x1a4>
20000bc0:	f04f 0300 	mov.w	r3, #0
20000bc4:	461c      	mov	r4, r3
20000bc6:	f507 73cc 	add.w	r3, r7, #408	; 0x198
20000bca:	e9d3 0100 	ldrd	r0, r1, [r3]
20000bce:	f04f 0200 	mov.w	r2, #0
20000bd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
20000bd6:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
20000bda:	f001 fce3 	bl	200025a4 <__aeabi_dcmpge>
20000bde:	4603      	mov	r3, r0
20000be0:	2b00      	cmp	r3, #0
20000be2:	d002      	beq.n	20000bea <main+0x19e>
20000be4:	f04f 0301 	mov.w	r3, #1
20000be8:	461c      	mov	r4, r3
20000bea:	b2e3      	uxtb	r3, r4
20000bec:	2b00      	cmp	r3, #0
20000bee:	d021      	beq.n	20000c34 <main+0x1e8>
			LED_num = display_angle < 0 ? NUMLEDS-1 : 0 - (DISPLAY_POINT_WIDTH-1);
20000bf0:	f04f 0300 	mov.w	r3, #0
20000bf4:	461c      	mov	r4, r3
20000bf6:	f507 73cc 	add.w	r3, r7, #408	; 0x198
20000bfa:	e9d3 0100 	ldrd	r0, r1, [r3]
20000bfe:	f04f 0200 	mov.w	r2, #0
20000c02:	f04f 0300 	mov.w	r3, #0
20000c06:	f001 fcb9 	bl	2000257c <__aeabi_dcmplt>
20000c0a:	4603      	mov	r3, r0
20000c0c:	2b00      	cmp	r3, #0
20000c0e:	d002      	beq.n	20000c16 <main+0x1ca>
20000c10:	f04f 0301 	mov.w	r3, #1
20000c14:	461c      	mov	r4, r3
20000c16:	b2e3      	uxtb	r3, r4
20000c18:	2b00      	cmp	r3, #0
20000c1a:	d002      	beq.n	20000c22 <main+0x1d6>
20000c1c:	f04f 0317 	mov.w	r3, #23
20000c20:	e001      	b.n	20000c26 <main+0x1da>
20000c22:	f04f 33ff 	mov.w	r3, #4294967295
20000c26:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
			color = red;
20000c2a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
20000c2e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
			color = blue;

		// IMUs: read and calculate angle at which to display
		display_angle = calc_display_angle(GLASSES_IMU_ADDR, WAND_IMU_ADDR, set_heading_baseline);
		set_heading_baseline = 0;
		if (display_angle < -DISPLAY_FOV/2 || display_angle >= DISPLAY_FOV/2){
20000c32:	e022      	b.n	20000c7a <main+0x22e>
			LED_num = display_angle < 0 ? NUMLEDS-1 : 0 - (DISPLAY_POINT_WIDTH-1);
			color = red;
		}
		else
			LED_num = (NUMLEDS-1) - (int)(display_angle/(DISPLAY_FOV/NUMLEDS) + NUMLEDS/2);
20000c34:	f507 73cc 	add.w	r3, r7, #408	; 0x198
20000c38:	e9d3 0100 	ldrd	r0, r1, [r3]
20000c3c:	f04f 0200 	mov.w	r2, #0
20000c40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
20000c44:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
20000c48:	f001 fb50 	bl	200022ec <__aeabi_ddiv>
20000c4c:	4602      	mov	r2, r0
20000c4e:	460b      	mov	r3, r1
20000c50:	4610      	mov	r0, r2
20000c52:	4619      	mov	r1, r3
20000c54:	f04f 0200 	mov.w	r2, #0
20000c58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
20000c5c:	f503 1320 	add.w	r3, r3, #2621440	; 0x280000
20000c60:	f001 f868 	bl	20001d34 <__adddf3>
20000c64:	4602      	mov	r2, r0
20000c66:	460b      	mov	r3, r1
20000c68:	4610      	mov	r0, r2
20000c6a:	4619      	mov	r1, r3
20000c6c:	f001 fcae 	bl	200025cc <__aeabi_d2iz>
20000c70:	4603      	mov	r3, r0
20000c72:	f1c3 0317 	rsb	r3, r3, #23
20000c76:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190



		// Write to LEDs
		for(i = 0; i < NUMLEDS; ++i){
20000c7a:	f04f 0300 	mov.w	r3, #0
20000c7e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
20000c82:	e02e      	b.n	20000ce2 <main+0x296>
			if(i >= LED_num && i < LED_num + DISPLAY_POINT_WIDTH)
20000c84:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
20000c88:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
20000c8c:	429a      	cmp	r2, r3
20000c8e:	db15      	blt.n	20000cbc <main+0x270>
20000c90:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
20000c94:	f103 0202 	add.w	r2, r3, #2
20000c98:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
20000c9c:	429a      	cmp	r2, r3
20000c9e:	dd0d      	ble.n	20000cbc <main+0x270>
				LED[i] = color;
20000ca0:	f642 5314 	movw	r3, #11540	; 0x2d14
20000ca4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ca8:	681a      	ldr	r2, [r3, #0]
20000caa:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
20000cae:	ea4f 0383 	mov.w	r3, r3, lsl #2
20000cb2:	4413      	add	r3, r2
20000cb4:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
20000cb8:	601a      	str	r2, [r3, #0]



		// Write to LEDs
		for(i = 0; i < NUMLEDS; ++i){
			if(i >= LED_num && i < LED_num + DISPLAY_POINT_WIDTH)
20000cba:	e00c      	b.n	20000cd6 <main+0x28a>
				LED[i] = color;
			else
				LED[i] = off;
20000cbc:	f642 5314 	movw	r3, #11540	; 0x2d14
20000cc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000cc4:	681a      	ldr	r2, [r3, #0]
20000cc6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
20000cca:	ea4f 0383 	mov.w	r3, r3, lsl #2
20000cce:	4413      	add	r3, r2
20000cd0:	f04f 0200 	mov.w	r2, #0
20000cd4:	601a      	str	r2, [r3, #0]
			LED_num = (NUMLEDS-1) - (int)(display_angle/(DISPLAY_FOV/NUMLEDS) + NUMLEDS/2);



		// Write to LEDs
		for(i = 0; i < NUMLEDS; ++i){
20000cd6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
20000cda:	f103 0301 	add.w	r3, r3, #1
20000cde:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
20000ce2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
20000ce6:	2b17      	cmp	r3, #23
20000ce8:	ddcc      	ble.n	20000c84 <main+0x238>
			LED[i] = color;
		}*/

		// gridEYE_print(temps);

	}//while(1)
20000cea:	e6ef      	b.n	20000acc <main+0x80>
20000cec:	00000000 	.word	0x00000000
20000cf0:	41c00000 	.word	0x41c00000

20000cf4 <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20000cf4:	b480      	push	{r7}
20000cf6:	b083      	sub	sp, #12
20000cf8:	af00      	add	r7, sp, #0
20000cfa:	4603      	mov	r3, r0
20000cfc:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20000cfe:	f24e 1300 	movw	r3, #57600	; 0xe100
20000d02:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000d06:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20000d0a:	ea4f 1252 	mov.w	r2, r2, lsr #5
20000d0e:	88f9      	ldrh	r1, [r7, #6]
20000d10:	f001 011f 	and.w	r1, r1, #31
20000d14:	f04f 0001 	mov.w	r0, #1
20000d18:	fa00 f101 	lsl.w	r1, r0, r1
20000d1c:	f102 0260 	add.w	r2, r2, #96	; 0x60
20000d20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20000d24:	f107 070c 	add.w	r7, r7, #12
20000d28:	46bd      	mov	sp, r7
20000d2a:	bc80      	pop	{r7}
20000d2c:	4770      	bx	lr
20000d2e:	bf00      	nop

20000d30 <MSS_UART_isr>:
static void
MSS_UART_isr
(
    mss_uart_instance_t * this_uart
)
{
20000d30:	b580      	push	{r7, lr}
20000d32:	b084      	sub	sp, #16
20000d34:	af00      	add	r7, sp, #0
20000d36:	6078      	str	r0, [r7, #4]
    uint8_t iirf;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
20000d38:	687a      	ldr	r2, [r7, #4]
20000d3a:	f642 5360 	movw	r3, #11616	; 0x2d60
20000d3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d42:	429a      	cmp	r2, r3
20000d44:	d007      	beq.n	20000d56 <MSS_UART_isr+0x26>
20000d46:	687a      	ldr	r2, [r7, #4]
20000d48:	f642 5338 	movw	r3, #11576	; 0x2d38
20000d4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d50:	429a      	cmp	r2, r3
20000d52:	d000      	beq.n	20000d56 <MSS_UART_isr+0x26>
20000d54:	be00      	bkpt	0x0000

    if ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) )
20000d56:	687a      	ldr	r2, [r7, #4]
20000d58:	f642 5360 	movw	r3, #11616	; 0x2d60
20000d5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d60:	429a      	cmp	r2, r3
20000d62:	d006      	beq.n	20000d72 <MSS_UART_isr+0x42>
20000d64:	687a      	ldr	r2, [r7, #4]
20000d66:	f642 5338 	movw	r3, #11576	; 0x2d38
20000d6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000d6e:	429a      	cmp	r2, r3
20000d70:	d167      	bne.n	20000e42 <MSS_UART_isr+0x112>
    {
        iirf = this_uart->hw_reg->IIR & IIRF_MASK;
20000d72:	687b      	ldr	r3, [r7, #4]
20000d74:	681b      	ldr	r3, [r3, #0]
20000d76:	7a1b      	ldrb	r3, [r3, #8]
20000d78:	b2db      	uxtb	r3, r3
20000d7a:	f003 030f 	and.w	r3, r3, #15
20000d7e:	73fb      	strb	r3, [r7, #15]

        switch ( iirf )
20000d80:	7bfb      	ldrb	r3, [r7, #15]
20000d82:	2b0c      	cmp	r3, #12
20000d84:	d854      	bhi.n	20000e30 <MSS_UART_isr+0x100>
20000d86:	a201      	add	r2, pc, #4	; (adr r2, 20000d8c <MSS_UART_isr+0x5c>)
20000d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20000d8c:	20000dc1 	.word	0x20000dc1
20000d90:	20000e31 	.word	0x20000e31
20000d94:	20000ddd 	.word	0x20000ddd
20000d98:	20000e31 	.word	0x20000e31
20000d9c:	20000df9 	.word	0x20000df9
20000da0:	20000e31 	.word	0x20000e31
20000da4:	20000e15 	.word	0x20000e15
20000da8:	20000e31 	.word	0x20000e31
20000dac:	20000e31 	.word	0x20000e31
20000db0:	20000e31 	.word	0x20000e31
20000db4:	20000e31 	.word	0x20000e31
20000db8:	20000e31 	.word	0x20000e31
20000dbc:	20000df9 	.word	0x20000df9
        {
            case IIRF_MODEM_STATUS:  /* Modem status interrupt */
            {
                ASSERT( NULL_HANDLER != this_uart->modemsts_handler );
20000dc0:	687b      	ldr	r3, [r7, #4]
20000dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20000dc4:	2b00      	cmp	r3, #0
20000dc6:	d100      	bne.n	20000dca <MSS_UART_isr+0x9a>
20000dc8:	be00      	bkpt	0x0000
                if( NULL_HANDLER != this_uart->modemsts_handler )
20000dca:	687b      	ldr	r3, [r7, #4]
20000dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20000dce:	2b00      	cmp	r3, #0
20000dd0:	d030      	beq.n	20000e34 <MSS_UART_isr+0x104>
                {
                   (*(this_uart->modemsts_handler))( this_uart );
20000dd2:	687b      	ldr	r3, [r7, #4]
20000dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20000dd6:	6878      	ldr	r0, [r7, #4]
20000dd8:	4798      	blx	r3
                }
            }
            break;
20000dda:	e032      	b.n	20000e42 <MSS_UART_isr+0x112>

            case IIRF_THRE: /* Transmitter Holding Register Empty */
            {
                ASSERT( NULL_HANDLER != this_uart->tx_handler );
20000ddc:	687b      	ldr	r3, [r7, #4]
20000dde:	6a1b      	ldr	r3, [r3, #32]
20000de0:	2b00      	cmp	r3, #0
20000de2:	d100      	bne.n	20000de6 <MSS_UART_isr+0xb6>
20000de4:	be00      	bkpt	0x0000
                if ( NULL_HANDLER != this_uart->tx_handler )
20000de6:	687b      	ldr	r3, [r7, #4]
20000de8:	6a1b      	ldr	r3, [r3, #32]
20000dea:	2b00      	cmp	r3, #0
20000dec:	d024      	beq.n	20000e38 <MSS_UART_isr+0x108>
                {
                    (*(this_uart->tx_handler))( this_uart );
20000dee:	687b      	ldr	r3, [r7, #4]
20000df0:	6a1b      	ldr	r3, [r3, #32]
20000df2:	6878      	ldr	r0, [r7, #4]
20000df4:	4798      	blx	r3
                }
            }
            break;
20000df6:	e024      	b.n	20000e42 <MSS_UART_isr+0x112>

            case IIRF_RX_DATA:      /* Received Data Available */
            case IIRF_DATA_TIMEOUT: /* Received Data Timed-out */
            {
                ASSERT( NULL_HANDLER != this_uart->rx_handler );
20000df8:	687b      	ldr	r3, [r7, #4]
20000dfa:	69db      	ldr	r3, [r3, #28]
20000dfc:	2b00      	cmp	r3, #0
20000dfe:	d100      	bne.n	20000e02 <MSS_UART_isr+0xd2>
20000e00:	be00      	bkpt	0x0000
                if ( NULL_HANDLER != this_uart->rx_handler )
20000e02:	687b      	ldr	r3, [r7, #4]
20000e04:	69db      	ldr	r3, [r3, #28]
20000e06:	2b00      	cmp	r3, #0
20000e08:	d018      	beq.n	20000e3c <MSS_UART_isr+0x10c>
                {
                    (*(this_uart->rx_handler))( this_uart );
20000e0a:	687b      	ldr	r3, [r7, #4]
20000e0c:	69db      	ldr	r3, [r3, #28]
20000e0e:	6878      	ldr	r0, [r7, #4]
20000e10:	4798      	blx	r3
                }
            }
            break;
20000e12:	e016      	b.n	20000e42 <MSS_UART_isr+0x112>

            case IIRF_RX_LINE_STATUS:  /* Line Status Interrupt */
            {
                ASSERT( NULL_HANDLER != this_uart->linests_handler );
20000e14:	687b      	ldr	r3, [r7, #4]
20000e16:	699b      	ldr	r3, [r3, #24]
20000e18:	2b00      	cmp	r3, #0
20000e1a:	d100      	bne.n	20000e1e <MSS_UART_isr+0xee>
20000e1c:	be00      	bkpt	0x0000
                if ( NULL_HANDLER != this_uart->linests_handler )
20000e1e:	687b      	ldr	r3, [r7, #4]
20000e20:	699b      	ldr	r3, [r3, #24]
20000e22:	2b00      	cmp	r3, #0
20000e24:	d00c      	beq.n	20000e40 <MSS_UART_isr+0x110>
                {
                   (*(this_uart->linests_handler))( this_uart );
20000e26:	687b      	ldr	r3, [r7, #4]
20000e28:	699b      	ldr	r3, [r3, #24]
20000e2a:	6878      	ldr	r0, [r7, #4]
20000e2c:	4798      	blx	r3
                }
            }
            break;
20000e2e:	e008      	b.n	20000e42 <MSS_UART_isr+0x112>

            default:
            {
                ASSERT( INVALID_INTERRUPT );
20000e30:	be00      	bkpt	0x0000
20000e32:	e006      	b.n	20000e42 <MSS_UART_isr+0x112>
                if( NULL_HANDLER != this_uart->modemsts_handler )
                {
                   (*(this_uart->modemsts_handler))( this_uart );
                }
            }
            break;
20000e34:	bf00      	nop
20000e36:	e004      	b.n	20000e42 <MSS_UART_isr+0x112>
                if ( NULL_HANDLER != this_uart->tx_handler )
                {
                    (*(this_uart->tx_handler))( this_uart );
                }
            }
            break;
20000e38:	bf00      	nop
20000e3a:	e002      	b.n	20000e42 <MSS_UART_isr+0x112>
                if ( NULL_HANDLER != this_uart->rx_handler )
                {
                    (*(this_uart->rx_handler))( this_uart );
                }
            }
            break;
20000e3c:	bf00      	nop
20000e3e:	e000      	b.n	20000e42 <MSS_UART_isr+0x112>
                if ( NULL_HANDLER != this_uart->linests_handler )
                {
                   (*(this_uart->linests_handler))( this_uart );
                }
            }
            break;
20000e40:	bf00      	nop
                ASSERT( INVALID_INTERRUPT );
            }
            break;
        }
    }
}
20000e42:	f107 0710 	add.w	r7, r7, #16
20000e46:	46bd      	mov	sp, r7
20000e48:	bd80      	pop	{r7, pc}
20000e4a:	bf00      	nop

20000e4c <UART0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART0_IRQHandler( void )
#else
void UART0_IRQHandler( void )
#endif
{
20000e4c:	4668      	mov	r0, sp
20000e4e:	f020 0107 	bic.w	r1, r0, #7
20000e52:	468d      	mov	sp, r1
20000e54:	b589      	push	{r0, r3, r7, lr}
20000e56:	af00      	add	r7, sp, #0
    MSS_UART_isr( &g_mss_uart0 );
20000e58:	f642 5060 	movw	r0, #11616	; 0x2d60
20000e5c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000e60:	f7ff ff66 	bl	20000d30 <MSS_UART_isr>
    NVIC_ClearPendingIRQ( UART0_IRQn );
20000e64:	f04f 000a 	mov.w	r0, #10
20000e68:	f7ff ff44 	bl	20000cf4 <NVIC_ClearPendingIRQ>
}
20000e6c:	46bd      	mov	sp, r7
20000e6e:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20000e72:	4685      	mov	sp, r0
20000e74:	4770      	bx	lr
20000e76:	bf00      	nop

20000e78 <UART1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART1_IRQHandler( void )
#else
void UART1_IRQHandler( void )
#endif
{
20000e78:	4668      	mov	r0, sp
20000e7a:	f020 0107 	bic.w	r1, r0, #7
20000e7e:	468d      	mov	sp, r1
20000e80:	b589      	push	{r0, r3, r7, lr}
20000e82:	af00      	add	r7, sp, #0
    MSS_UART_isr( &g_mss_uart1 );
20000e84:	f642 5038 	movw	r0, #11576	; 0x2d38
20000e88:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000e8c:	f7ff ff50 	bl	20000d30 <MSS_UART_isr>
    NVIC_ClearPendingIRQ( UART1_IRQn );
20000e90:	f04f 000b 	mov.w	r0, #11
20000e94:	f7ff ff2e 	bl	20000cf4 <NVIC_ClearPendingIRQ>
}
20000e98:	46bd      	mov	sp, r7
20000e9a:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20000e9e:	4685      	mov	sp, r0
20000ea0:	4770      	bx	lr
20000ea2:	bf00      	nop

20000ea4 <NVIC_EnableIRQ>:
 *
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
20000ea4:	b480      	push	{r7}
20000ea6:	b083      	sub	sp, #12
20000ea8:	af00      	add	r7, sp, #0
20000eaa:	4603      	mov	r3, r0
20000eac:	80fb      	strh	r3, [r7, #6]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20000eae:	f24e 1300 	movw	r3, #57600	; 0xe100
20000eb2:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000eb6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20000eba:	ea4f 1252 	mov.w	r2, r2, lsr #5
20000ebe:	88f9      	ldrh	r1, [r7, #6]
20000ec0:	f001 011f 	and.w	r1, r1, #31
20000ec4:	f04f 0001 	mov.w	r0, #1
20000ec8:	fa00 f101 	lsl.w	r1, r0, r1
20000ecc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20000ed0:	f107 070c 	add.w	r7, r7, #12
20000ed4:	46bd      	mov	sp, r7
20000ed6:	bc80      	pop	{r7}
20000ed8:	4770      	bx	lr
20000eda:	bf00      	nop

20000edc <NVIC_DisableIRQ>:
 * 
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
20000edc:	b480      	push	{r7}
20000ede:	b083      	sub	sp, #12
20000ee0:	af00      	add	r7, sp, #0
20000ee2:	4603      	mov	r3, r0
20000ee4:	80fb      	strh	r3, [r7, #6]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
20000ee6:	f24e 1300 	movw	r3, #57600	; 0xe100
20000eea:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000eee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20000ef2:	ea4f 1252 	mov.w	r2, r2, lsr #5
20000ef6:	88f9      	ldrh	r1, [r7, #6]
20000ef8:	f001 011f 	and.w	r1, r1, #31
20000efc:	f04f 0001 	mov.w	r0, #1
20000f00:	fa00 f101 	lsl.w	r1, r0, r1
20000f04:	f102 0220 	add.w	r2, r2, #32
20000f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20000f0c:	f107 070c 	add.w	r7, r7, #12
20000f10:	46bd      	mov	sp, r7
20000f12:	bc80      	pop	{r7}
20000f14:	4770      	bx	lr
20000f16:	bf00      	nop

20000f18 <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20000f18:	b480      	push	{r7}
20000f1a:	b083      	sub	sp, #12
20000f1c:	af00      	add	r7, sp, #0
20000f1e:	4603      	mov	r3, r0
20000f20:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20000f22:	f24e 1300 	movw	r3, #57600	; 0xe100
20000f26:	f2ce 0300 	movt	r3, #57344	; 0xe000
20000f2a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20000f2e:	ea4f 1252 	mov.w	r2, r2, lsr #5
20000f32:	88f9      	ldrh	r1, [r7, #6]
20000f34:	f001 011f 	and.w	r1, r1, #31
20000f38:	f04f 0001 	mov.w	r0, #1
20000f3c:	fa00 f101 	lsl.w	r1, r0, r1
20000f40:	f102 0260 	add.w	r2, r2, #96	; 0x60
20000f44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20000f48:	f107 070c 	add.w	r7, r7, #12
20000f4c:	46bd      	mov	sp, r7
20000f4e:	bc80      	pop	{r7}
20000f50:	4770      	bx	lr
20000f52:	bf00      	nop

20000f54 <MSS_I2C_init>:
(
    mss_i2c_instance_t * this_i2c,
    uint8_t ser_address,
    mss_i2c_clock_divider_t ser_clock_speed
)
{
20000f54:	b580      	push	{r7, lr}
20000f56:	b084      	sub	sp, #16
20000f58:	af00      	add	r7, sp, #0
20000f5a:	6078      	str	r0, [r7, #4]
20000f5c:	4613      	mov	r3, r2
20000f5e:	460a      	mov	r2, r1
20000f60:	70fa      	strb	r2, [r7, #3]
20000f62:	70bb      	strb	r3, [r7, #2]
    uint32_t primask;
    uint_fast16_t clock_speed = (uint_fast16_t)ser_clock_speed;
20000f64:	78bb      	ldrb	r3, [r7, #2]
20000f66:	60fb      	str	r3, [r7, #12]
    
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
20000f68:	687a      	ldr	r2, [r7, #4]
20000f6a:	f642 5388 	movw	r3, #11656	; 0x2d88
20000f6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000f72:	429a      	cmp	r2, r3
20000f74:	d007      	beq.n	20000f86 <MSS_I2C_init+0x32>
20000f76:	687a      	ldr	r2, [r7, #4]
20000f78:	f642 53fc 	movw	r3, #11772	; 0x2dfc
20000f7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000f80:	429a      	cmp	r2, r3
20000f82:	d000      	beq.n	20000f86 <MSS_I2C_init+0x32>
20000f84:	be00      	bkpt	0x0000
     * Initialize all items of the this_i2c data structure to zero. This
     * initializes all state variables to their init value. It relies on
     * the fact that NO_TRANSACTION, I2C_SUCCESS and I2C_RELEASE_BUS all
     * have an actual value of zero.
     */
    primask = disable_interrupts();
20000f86:	f000 fe63 	bl	20001c50 <disable_interrupts>
20000f8a:	4603      	mov	r3, r0
20000f8c:	60bb      	str	r3, [r7, #8]
    memset(this_i2c, 0, sizeof(mss_i2c_instance_t));
20000f8e:	6878      	ldr	r0, [r7, #4]
20000f90:	f04f 0100 	mov.w	r1, #0
20000f94:	f04f 0274 	mov.w	r2, #116	; 0x74
20000f98:	f001 fe3c 	bl	20002c14 <memset>
    
    if ( this_i2c == &g_mss_i2c0 )
20000f9c:	687a      	ldr	r2, [r7, #4]
20000f9e:	f642 5388 	movw	r3, #11656	; 0x2d88
20000fa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000fa6:	429a      	cmp	r2, r3
20000fa8:	d12c      	bne.n	20001004 <MSS_I2C_init+0xb0>
    {
        this_i2c->irqn = I2C0_IRQn;
20000faa:	687b      	ldr	r3, [r7, #4]
20000fac:	f04f 020e 	mov.w	r2, #14
20000fb0:	825a      	strh	r2, [r3, #18]
        this_i2c->hw_reg = I2C0;
20000fb2:	687a      	ldr	r2, [r7, #4]
20000fb4:	f242 0300 	movw	r3, #8192	; 0x2000
20000fb8:	f2c4 0300 	movt	r3, #16384	; 0x4000
20000fbc:	6153      	str	r3, [r2, #20]
        this_i2c->hw_reg_bit = I2C0_BITBAND;
20000fbe:	687a      	ldr	r2, [r7, #4]
20000fc0:	f240 0300 	movw	r3, #0
20000fc4:	f2c4 2304 	movt	r3, #16900	; 0x4204
20000fc8:	6193      	str	r3, [r2, #24]
        
        /* reset I2C0 */
        SYSREG->SOFT_RST_CR |= SYSREG_I2C0_SOFTRESET_MASK;
20000fca:	f242 0300 	movw	r3, #8192	; 0x2000
20000fce:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000fd2:	f242 0200 	movw	r2, #8192	; 0x2000
20000fd6:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000fda:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000fdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
20000fe0:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended I2C0 interrupt */
        NVIC_ClearPendingIRQ( I2C0_IRQn );
20000fe2:	f04f 000e 	mov.w	r0, #14
20000fe6:	f7ff ff97 	bl	20000f18 <NVIC_ClearPendingIRQ>
        /* Take I2C0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C0_SOFTRESET_MASK;
20000fea:	f242 0300 	movw	r3, #8192	; 0x2000
20000fee:	f2ce 0304 	movt	r3, #57348	; 0xe004
20000ff2:	f242 0200 	movw	r2, #8192	; 0x2000
20000ff6:	f2ce 0204 	movt	r2, #57348	; 0xe004
20000ffa:	6b12      	ldr	r2, [r2, #48]	; 0x30
20000ffc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
20001000:	631a      	str	r2, [r3, #48]	; 0x30
20001002:	e02b      	b.n	2000105c <MSS_I2C_init+0x108>
    }
    else
    {
        this_i2c->irqn = I2C1_IRQn;
20001004:	687b      	ldr	r3, [r7, #4]
20001006:	f04f 0211 	mov.w	r2, #17
2000100a:	825a      	strh	r2, [r3, #18]
        this_i2c->hw_reg = I2C1;
2000100c:	687a      	ldr	r2, [r7, #4]
2000100e:	f242 0300 	movw	r3, #8192	; 0x2000
20001012:	f2c4 0301 	movt	r3, #16385	; 0x4001
20001016:	6153      	str	r3, [r2, #20]
        this_i2c->hw_reg_bit = I2C1_BITBAND;
20001018:	687a      	ldr	r2, [r7, #4]
2000101a:	f240 0300 	movw	r3, #0
2000101e:	f2c4 2324 	movt	r3, #16932	; 0x4224
20001022:	6193      	str	r3, [r2, #24]
        
        /* reset I2C1 */
        SYSREG->SOFT_RST_CR |= SYSREG_I2C1_SOFTRESET_MASK;
20001024:	f242 0300 	movw	r3, #8192	; 0x2000
20001028:	f2ce 0304 	movt	r3, #57348	; 0xe004
2000102c:	f242 0200 	movw	r2, #8192	; 0x2000
20001030:	f2ce 0204 	movt	r2, #57348	; 0xe004
20001034:	6b12      	ldr	r2, [r2, #48]	; 0x30
20001036:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
2000103a:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended I2C1 interrupt */
        NVIC_ClearPendingIRQ( I2C1_IRQn );
2000103c:	f04f 0011 	mov.w	r0, #17
20001040:	f7ff ff6a 	bl	20000f18 <NVIC_ClearPendingIRQ>
        /* Take I2C1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C1_SOFTRESET_MASK;
20001044:	f242 0300 	movw	r3, #8192	; 0x2000
20001048:	f2ce 0304 	movt	r3, #57348	; 0xe004
2000104c:	f242 0200 	movw	r2, #8192	; 0x2000
20001050:	f2ce 0204 	movt	r2, #57348	; 0xe004
20001054:	6b12      	ldr	r2, [r2, #48]	; 0x30
20001056:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
2000105a:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Use same base address for SMBus bitband access */
    this_i2c->hw_smb_reg_bit = (I2C_SMBus_BitBand_TypeDef *)this_i2c->hw_reg_bit;
2000105c:	687b      	ldr	r3, [r7, #4]
2000105e:	699b      	ldr	r3, [r3, #24]
20001060:	461a      	mov	r2, r3
20001062:	687b      	ldr	r3, [r7, #4]
20001064:	61da      	str	r2, [r3, #28]

    /* Update Serial address of the device */
    this_i2c->ser_address = (uint_fast8_t)ser_address << 1u;
20001066:	78fb      	ldrb	r3, [r7, #3]
20001068:	ea4f 0243 	mov.w	r2, r3, lsl #1
2000106c:	687b      	ldr	r3, [r7, #4]
2000106e:	601a      	str	r2, [r3, #0]

    this_i2c->hw_reg_bit->CTRL_CR2 = (uint32_t)((clock_speed >> 2u) & 0x01u);
20001070:	687b      	ldr	r3, [r7, #4]
20001072:	699b      	ldr	r3, [r3, #24]
20001074:	68fa      	ldr	r2, [r7, #12]
20001076:	ea4f 0292 	mov.w	r2, r2, lsr #2
2000107a:	f002 0201 	and.w	r2, r2, #1
2000107e:	61da      	str	r2, [r3, #28]
    this_i2c->hw_reg_bit->CTRL_CR1 = (uint32_t)((clock_speed >> 1u) & 0x01u);
20001080:	687b      	ldr	r3, [r7, #4]
20001082:	699b      	ldr	r3, [r3, #24]
20001084:	68fa      	ldr	r2, [r7, #12]
20001086:	ea4f 0252 	mov.w	r2, r2, lsr #1
2000108a:	f002 0201 	and.w	r2, r2, #1
2000108e:	605a      	str	r2, [r3, #4]
    this_i2c->hw_reg_bit->CTRL_CR0 = (uint32_t)(clock_speed & 0x01u);
20001090:	687b      	ldr	r3, [r7, #4]
20001092:	699b      	ldr	r3, [r3, #24]
20001094:	68fa      	ldr	r2, [r7, #12]
20001096:	f002 0201 	and.w	r2, r2, #1
2000109a:	601a      	str	r2, [r3, #0]
    this_i2c->hw_reg->ADDR = (uint8_t)this_i2c->ser_address;
2000109c:	687b      	ldr	r3, [r7, #4]
2000109e:	695b      	ldr	r3, [r3, #20]
200010a0:	687a      	ldr	r2, [r7, #4]
200010a2:	6812      	ldr	r2, [r2, #0]
200010a4:	b2d2      	uxtb	r2, r2
200010a6:	731a      	strb	r2, [r3, #12]
    this_i2c->hw_reg_bit->CTRL_ENS1 = 0x01u; /* set enable bit */
200010a8:	687b      	ldr	r3, [r7, #4]
200010aa:	699b      	ldr	r3, [r3, #24]
200010ac:	f04f 0201 	mov.w	r2, #1
200010b0:	619a      	str	r2, [r3, #24]
    restore_interrupts( primask );
200010b2:	68b8      	ldr	r0, [r7, #8]
200010b4:	f000 fdde 	bl	20001c74 <restore_interrupts>
}
200010b8:	f107 0710 	add.w	r7, r7, #16
200010bc:	46bd      	mov	sp, r7
200010be:	bd80      	pop	{r7, pc}

200010c0 <MSS_I2C_write>:
    uint8_t serial_addr,
    const uint8_t * write_buffer,
    uint16_t write_size,
    uint8_t options
)
{
200010c0:	b580      	push	{r7, lr}
200010c2:	b086      	sub	sp, #24
200010c4:	af00      	add	r7, sp, #0
200010c6:	60f8      	str	r0, [r7, #12]
200010c8:	607a      	str	r2, [r7, #4]
200010ca:	460a      	mov	r2, r1
200010cc:	72fa      	strb	r2, [r7, #11]
200010ce:	807b      	strh	r3, [r7, #2]
    uint32_t primask;
    volatile uint8_t stat_ctrl;

    ASSERT((this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1));
200010d0:	68fa      	ldr	r2, [r7, #12]
200010d2:	f642 5388 	movw	r3, #11656	; 0x2d88
200010d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200010da:	429a      	cmp	r2, r3
200010dc:	d007      	beq.n	200010ee <MSS_I2C_write+0x2e>
200010de:	68fa      	ldr	r2, [r7, #12]
200010e0:	f642 53fc 	movw	r3, #11772	; 0x2dfc
200010e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
200010e8:	429a      	cmp	r2, r3
200010ea:	d000      	beq.n	200010ee <MSS_I2C_write+0x2e>
200010ec:	be00      	bkpt	0x0000

    primask = disable_interrupts();
200010ee:	f000 fdaf 	bl	20001c50 <disable_interrupts>
200010f2:	4603      	mov	r3, r0
200010f4:	617b      	str	r3, [r7, #20]

    /* Update the transaction only when there is no transaction going on I2C */
    if( this_i2c->transaction == NO_TRANSACTION)
200010f6:	68fb      	ldr	r3, [r7, #12]
200010f8:	7a1b      	ldrb	r3, [r3, #8]
200010fa:	2b00      	cmp	r3, #0
200010fc:	d103      	bne.n	20001106 <MSS_I2C_write+0x46>
    {
      this_i2c->transaction = MASTER_WRITE_TRANSACTION;
200010fe:	68fb      	ldr	r3, [r7, #12]
20001100:	f04f 0201 	mov.w	r2, #1
20001104:	721a      	strb	r2, [r3, #8]
    }

    /* Update the Pending transaction information so that transaction can restarted */
    this_i2c->pending_transaction = MASTER_WRITE_TRANSACTION ;
20001106:	68fb      	ldr	r3, [r7, #12]
20001108:	f04f 0201 	mov.w	r2, #1
2000110c:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

    /* Update target address */
    this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
20001110:	7afb      	ldrb	r3, [r7, #11]
20001112:	ea4f 0243 	mov.w	r2, r3, lsl #1
20001116:	68fb      	ldr	r3, [r7, #12]
20001118:	605a      	str	r2, [r3, #4]

    this_i2c->dir = WRITE_DIR;
2000111a:	68fb      	ldr	r3, [r7, #12]
2000111c:	f04f 0200 	mov.w	r2, #0
20001120:	62da      	str	r2, [r3, #44]	; 0x2c

    this_i2c->master_tx_buffer = write_buffer;
20001122:	68fb      	ldr	r3, [r7, #12]
20001124:	687a      	ldr	r2, [r7, #4]
20001126:	621a      	str	r2, [r3, #32]
    this_i2c->master_tx_size = write_size;
20001128:	887a      	ldrh	r2, [r7, #2]
2000112a:	68fb      	ldr	r3, [r7, #12]
2000112c:	625a      	str	r2, [r3, #36]	; 0x24
    this_i2c->master_tx_idx = 0u;
2000112e:	68fb      	ldr	r3, [r7, #12]
20001130:	f04f 0200 	mov.w	r2, #0
20001134:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set I2C status in progress */
    this_i2c->master_status = MSS_I2C_IN_PROGRESS;
20001136:	68fb      	ldr	r3, [r7, #12]
20001138:	f04f 0201 	mov.w	r2, #1
2000113c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    this_i2c->options = options;
20001140:	68fb      	ldr	r3, [r7, #12]
20001142:	f897 2020 	ldrb.w	r2, [r7, #32]
20001146:	741a      	strb	r2, [r3, #16]

    if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
20001148:	68fb      	ldr	r3, [r7, #12]
2000114a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
2000114e:	b2db      	uxtb	r3, r3
20001150:	2b01      	cmp	r3, #1
20001152:	d105      	bne.n	20001160 <MSS_I2C_write+0xa0>
    {
        this_i2c->is_transaction_pending = 1u;
20001154:	68fb      	ldr	r3, [r7, #12]
20001156:	f04f 0201 	mov.w	r2, #1
2000115a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
2000115e:	e004      	b.n	2000116a <MSS_I2C_write+0xaa>
    }
    else
    {
        this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
20001160:	68fb      	ldr	r3, [r7, #12]
20001162:	699b      	ldr	r3, [r3, #24]
20001164:	f04f 0201 	mov.w	r2, #1
20001168:	615a      	str	r2, [r3, #20]
    /*
     * Clear interrupts if required (depends on repeated starts).
     * Since the Bus is on hold, only then prior status needs to
     * be cleared.
     */
    if ( MSS_I2C_HOLD_BUS == this_i2c->bus_status )
2000116a:	68fb      	ldr	r3, [r7, #12]
2000116c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
20001170:	2b01      	cmp	r3, #1
20001172:	d111      	bne.n	20001198 <MSS_I2C_write+0xd8>
    {
        this_i2c->hw_reg_bit->CTRL_SI = 0u;
20001174:	68fb      	ldr	r3, [r7, #12]
20001176:	699b      	ldr	r3, [r3, #24]
20001178:	f04f 0200 	mov.w	r2, #0
2000117c:	60da      	str	r2, [r3, #12]
        stat_ctrl = this_i2c->hw_reg->STATUS;
2000117e:	68fb      	ldr	r3, [r7, #12]
20001180:	695b      	ldr	r3, [r3, #20]
20001182:	791b      	ldrb	r3, [r3, #4]
20001184:	74fb      	strb	r3, [r7, #19]
        stat_ctrl = stat_ctrl;  /* Avoids Lint warning */
20001186:	7cfb      	ldrb	r3, [r7, #19]
20001188:	b2db      	uxtb	r3, r3
2000118a:	74fb      	strb	r3, [r7, #19]
        NVIC_ClearPendingIRQ( this_i2c->irqn );
2000118c:	68fb      	ldr	r3, [r7, #12]
2000118e:	8a5b      	ldrh	r3, [r3, #18]
20001190:	b21b      	sxth	r3, r3
20001192:	4618      	mov	r0, r3
20001194:	f7ff fec0 	bl	20000f18 <NVIC_ClearPendingIRQ>
    }

    /* Enable the interrupt. ( Re-enable) */
    NVIC_EnableIRQ( this_i2c->irqn );
20001198:	68fb      	ldr	r3, [r7, #12]
2000119a:	8a5b      	ldrh	r3, [r3, #18]
2000119c:	b21b      	sxth	r3, r3
2000119e:	4618      	mov	r0, r3
200011a0:	f7ff fe80 	bl	20000ea4 <NVIC_EnableIRQ>

    restore_interrupts( primask );
200011a4:	6978      	ldr	r0, [r7, #20]
200011a6:	f000 fd65 	bl	20001c74 <restore_interrupts>
}
200011aa:	f107 0718 	add.w	r7, r7, #24
200011ae:	46bd      	mov	sp, r7
200011b0:	bd80      	pop	{r7, pc}
200011b2:	bf00      	nop

200011b4 <MSS_I2C_write_read>:
    uint16_t offset_size,
    uint8_t * read_buffer,
    uint16_t read_size,
    uint8_t options
)
{
200011b4:	b580      	push	{r7, lr}
200011b6:	b086      	sub	sp, #24
200011b8:	af00      	add	r7, sp, #0
200011ba:	60f8      	str	r0, [r7, #12]
200011bc:	607a      	str	r2, [r7, #4]
200011be:	460a      	mov	r2, r1
200011c0:	72fa      	strb	r2, [r7, #11]
200011c2:	807b      	strh	r3, [r7, #2]
    ASSERT((this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1));
200011c4:	68fa      	ldr	r2, [r7, #12]
200011c6:	f642 5388 	movw	r3, #11656	; 0x2d88
200011ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
200011ce:	429a      	cmp	r2, r3
200011d0:	d007      	beq.n	200011e2 <MSS_I2C_write_read+0x2e>
200011d2:	68fa      	ldr	r2, [r7, #12]
200011d4:	f642 53fc 	movw	r3, #11772	; 0x2dfc
200011d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200011dc:	429a      	cmp	r2, r3
200011de:	d000      	beq.n	200011e2 <MSS_I2C_write_read+0x2e>
200011e0:	be00      	bkpt	0x0000
    ASSERT(offset_size > 0u);
200011e2:	887b      	ldrh	r3, [r7, #2]
200011e4:	2b00      	cmp	r3, #0
200011e6:	d100      	bne.n	200011ea <MSS_I2C_write_read+0x36>
200011e8:	be00      	bkpt	0x0000
    ASSERT(addr_offset != (const uint8_t *)0);
200011ea:	687b      	ldr	r3, [r7, #4]
200011ec:	2b00      	cmp	r3, #0
200011ee:	d100      	bne.n	200011f2 <MSS_I2C_write_read+0x3e>
200011f0:	be00      	bkpt	0x0000
    ASSERT(read_size > 0u);
200011f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
200011f4:	2b00      	cmp	r3, #0
200011f6:	d100      	bne.n	200011fa <MSS_I2C_write_read+0x46>
200011f8:	be00      	bkpt	0x0000
    ASSERT(read_buffer != (uint8_t *)0);
200011fa:	6a3b      	ldr	r3, [r7, #32]
200011fc:	2b00      	cmp	r3, #0
200011fe:	d100      	bne.n	20001202 <MSS_I2C_write_read+0x4e>
20001200:	be00      	bkpt	0x0000

    if((read_size > 0u) && (offset_size > 0u))
20001202:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
20001204:	2b00      	cmp	r3, #0
20001206:	d06a      	beq.n	200012de <MSS_I2C_write_read+0x12a>
20001208:	887b      	ldrh	r3, [r7, #2]
2000120a:	2b00      	cmp	r3, #0
2000120c:	d067      	beq.n	200012de <MSS_I2C_write_read+0x12a>
    {
        uint32_t primask;
        volatile uint8_t stat_ctrl;

        primask = disable_interrupts();
2000120e:	f000 fd1f 	bl	20001c50 <disable_interrupts>
20001212:	4603      	mov	r3, r0
20001214:	617b      	str	r3, [r7, #20]

        /* Update the transaction only when there is no transaction going on I2C */
        if( this_i2c->transaction == NO_TRANSACTION)
20001216:	68fb      	ldr	r3, [r7, #12]
20001218:	7a1b      	ldrb	r3, [r3, #8]
2000121a:	2b00      	cmp	r3, #0
2000121c:	d103      	bne.n	20001226 <MSS_I2C_write_read+0x72>
        {
            this_i2c->transaction = MASTER_RANDOM_READ_TRANSACTION;
2000121e:	68fb      	ldr	r3, [r7, #12]
20001220:	f04f 0203 	mov.w	r2, #3
20001224:	721a      	strb	r2, [r3, #8]
        }

        /* Update the Pending transaction information so that transaction can restarted */
        this_i2c->pending_transaction = MASTER_RANDOM_READ_TRANSACTION ;
20001226:	68fb      	ldr	r3, [r7, #12]
20001228:	f04f 0203 	mov.w	r2, #3
2000122c:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

        /* Update target address */
        this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
20001230:	7afb      	ldrb	r3, [r7, #11]
20001232:	ea4f 0243 	mov.w	r2, r3, lsl #1
20001236:	68fb      	ldr	r3, [r7, #12]
20001238:	605a      	str	r2, [r3, #4]

        this_i2c->dir = WRITE_DIR;
2000123a:	68fb      	ldr	r3, [r7, #12]
2000123c:	f04f 0200 	mov.w	r2, #0
20001240:	62da      	str	r2, [r3, #44]	; 0x2c
        this_i2c->master_tx_buffer = addr_offset;
20001242:	68fb      	ldr	r3, [r7, #12]
20001244:	687a      	ldr	r2, [r7, #4]
20001246:	621a      	str	r2, [r3, #32]
        this_i2c->master_tx_size = offset_size;
20001248:	887a      	ldrh	r2, [r7, #2]
2000124a:	68fb      	ldr	r3, [r7, #12]
2000124c:	625a      	str	r2, [r3, #36]	; 0x24
        this_i2c->master_tx_idx = 0u;
2000124e:	68fb      	ldr	r3, [r7, #12]
20001250:	f04f 0200 	mov.w	r2, #0
20001254:	629a      	str	r2, [r3, #40]	; 0x28

        this_i2c->master_rx_buffer = read_buffer;
20001256:	68fb      	ldr	r3, [r7, #12]
20001258:	6a3a      	ldr	r2, [r7, #32]
2000125a:	631a      	str	r2, [r3, #48]	; 0x30
        this_i2c->master_rx_size = read_size;
2000125c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
2000125e:	68fb      	ldr	r3, [r7, #12]
20001260:	635a      	str	r2, [r3, #52]	; 0x34
        this_i2c->master_rx_idx = 0u;
20001262:	68fb      	ldr	r3, [r7, #12]
20001264:	f04f 0200 	mov.w	r2, #0
20001268:	639a      	str	r2, [r3, #56]	; 0x38

        /* Set I2C status in progress */
        this_i2c->master_status = MSS_I2C_IN_PROGRESS;
2000126a:	68fb      	ldr	r3, [r7, #12]
2000126c:	f04f 0201 	mov.w	r2, #1
20001270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        this_i2c->options = options;
20001274:	68fb      	ldr	r3, [r7, #12]
20001276:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
2000127a:	741a      	strb	r2, [r3, #16]

        if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
2000127c:	68fb      	ldr	r3, [r7, #12]
2000127e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
20001282:	b2db      	uxtb	r3, r3
20001284:	2b01      	cmp	r3, #1
20001286:	d105      	bne.n	20001294 <MSS_I2C_write_read+0xe0>
        {
            this_i2c->is_transaction_pending = 1u;
20001288:	68fb      	ldr	r3, [r7, #12]
2000128a:	f04f 0201 	mov.w	r2, #1
2000128e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
20001292:	e004      	b.n	2000129e <MSS_I2C_write_read+0xea>
        }
        else
        {
            this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
20001294:	68fb      	ldr	r3, [r7, #12]
20001296:	699b      	ldr	r3, [r3, #24]
20001298:	f04f 0201 	mov.w	r2, #1
2000129c:	615a      	str	r2, [r3, #20]
        /*
         * Clear interrupts if required (depends on repeated starts).
         * Since the Bus is on hold, only then prior status needs to
         * be cleared.
         */
        if ( MSS_I2C_HOLD_BUS == this_i2c->bus_status )
2000129e:	68fb      	ldr	r3, [r7, #12]
200012a0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
200012a4:	2b01      	cmp	r3, #1
200012a6:	d111      	bne.n	200012cc <MSS_I2C_write_read+0x118>
        {
            this_i2c->hw_reg_bit->CTRL_SI = 0u;
200012a8:	68fb      	ldr	r3, [r7, #12]
200012aa:	699b      	ldr	r3, [r3, #24]
200012ac:	f04f 0200 	mov.w	r2, #0
200012b0:	60da      	str	r2, [r3, #12]
            stat_ctrl = this_i2c->hw_reg->STATUS;
200012b2:	68fb      	ldr	r3, [r7, #12]
200012b4:	695b      	ldr	r3, [r3, #20]
200012b6:	791b      	ldrb	r3, [r3, #4]
200012b8:	74fb      	strb	r3, [r7, #19]
            stat_ctrl = stat_ctrl;  /* Avoids Lint warning */
200012ba:	7cfb      	ldrb	r3, [r7, #19]
200012bc:	b2db      	uxtb	r3, r3
200012be:	74fb      	strb	r3, [r7, #19]
            NVIC_ClearPendingIRQ( this_i2c->irqn );
200012c0:	68fb      	ldr	r3, [r7, #12]
200012c2:	8a5b      	ldrh	r3, [r3, #18]
200012c4:	b21b      	sxth	r3, r3
200012c6:	4618      	mov	r0, r3
200012c8:	f7ff fe26 	bl	20000f18 <NVIC_ClearPendingIRQ>
        }

        /* Enable the interrupt. ( Re-enable) */
        NVIC_EnableIRQ( this_i2c->irqn );
200012cc:	68fb      	ldr	r3, [r7, #12]
200012ce:	8a5b      	ldrh	r3, [r3, #18]
200012d0:	b21b      	sxth	r3, r3
200012d2:	4618      	mov	r0, r3
200012d4:	f7ff fde6 	bl	20000ea4 <NVIC_EnableIRQ>

        restore_interrupts( primask );
200012d8:	6978      	ldr	r0, [r7, #20]
200012da:	f000 fccb 	bl	20001c74 <restore_interrupts>
    }
}
200012de:	f107 0718 	add.w	r7, r7, #24
200012e2:	46bd      	mov	sp, r7
200012e4:	bd80      	pop	{r7, pc}
200012e6:	bf00      	nop

200012e8 <MSS_I2C_wait_complete>:
mss_i2c_status_t MSS_I2C_wait_complete
(
    mss_i2c_instance_t * this_i2c,
    uint32_t timeout_ms
)
{
200012e8:	b480      	push	{r7}
200012ea:	b085      	sub	sp, #20
200012ec:	af00      	add	r7, sp, #0
200012ee:	6078      	str	r0, [r7, #4]
200012f0:	6039      	str	r1, [r7, #0]
	mss_i2c_status_t i2c_status;
    
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
200012f2:	687a      	ldr	r2, [r7, #4]
200012f4:	f642 5388 	movw	r3, #11656	; 0x2d88
200012f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200012fc:	429a      	cmp	r2, r3
200012fe:	d007      	beq.n	20001310 <MSS_I2C_wait_complete+0x28>
20001300:	687a      	ldr	r2, [r7, #4]
20001302:	f642 53fc 	movw	r3, #11772	; 0x2dfc
20001306:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000130a:	429a      	cmp	r2, r3
2000130c:	d000      	beq.n	20001310 <MSS_I2C_wait_complete+0x28>
2000130e:	be00      	bkpt	0x0000
    
    this_i2c->master_timeout_ms = timeout_ms;
20001310:	687b      	ldr	r3, [r7, #4]
20001312:	683a      	ldr	r2, [r7, #0]
20001314:	641a      	str	r2, [r3, #64]	; 0x40

    /* Run the loop until state returns I2C_FAILED  or I2C_SUCESS*/
    do {
        i2c_status = this_i2c->master_status;
20001316:	687b      	ldr	r3, [r7, #4]
20001318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
2000131c:	73fb      	strb	r3, [r7, #15]
    } while(MSS_I2C_IN_PROGRESS == i2c_status);
2000131e:	7bfb      	ldrb	r3, [r7, #15]
20001320:	2b01      	cmp	r3, #1
20001322:	d0f8      	beq.n	20001316 <MSS_I2C_wait_complete+0x2e>

    return i2c_status;
20001324:	7bfb      	ldrb	r3, [r7, #15]
}
20001326:	4618      	mov	r0, r3
20001328:	f107 0714 	add.w	r7, r7, #20
2000132c:	46bd      	mov	sp, r7
2000132e:	bc80      	pop	{r7}
20001330:	4770      	bx	lr
20001332:	bf00      	nop

20001334 <enable_slave_if_required>:
 */
static void enable_slave_if_required
(
    mss_i2c_instance_t * this_i2c
)
{
20001334:	b480      	push	{r7}
20001336:	b083      	sub	sp, #12
20001338:	af00      	add	r7, sp, #0
2000133a:	6078      	str	r0, [r7, #4]
    if( this_i2c->is_slave_enabled )
2000133c:	687b      	ldr	r3, [r7, #4]
2000133e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
20001342:	2b00      	cmp	r3, #0
20001344:	d004      	beq.n	20001350 <enable_slave_if_required+0x1c>
    {
        this_i2c->hw_reg_bit->CTRL_AA = 1u;
20001346:	687b      	ldr	r3, [r7, #4]
20001348:	699b      	ldr	r3, [r3, #24]
2000134a:	f04f 0201 	mov.w	r2, #1
2000134e:	609a      	str	r2, [r3, #8]
    }
}
20001350:	f107 070c 	add.w	r7, r7, #12
20001354:	46bd      	mov	sp, r7
20001356:	bc80      	pop	{r7}
20001358:	4770      	bx	lr
2000135a:	bf00      	nop

2000135c <mss_i2c_isr>:
 */
static void mss_i2c_isr
(
    mss_i2c_instance_t * this_i2c
)
{
2000135c:	b580      	push	{r7, lr}
2000135e:	b084      	sub	sp, #16
20001360:	af00      	add	r7, sp, #0
20001362:	6078      	str	r0, [r7, #4]
    volatile uint8_t status;
    uint8_t data;
    uint8_t hold_bus;
    uint8_t clear_irq = 1u;
20001364:	f04f 0301 	mov.w	r3, #1
20001368:	73bb      	strb	r3, [r7, #14]
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
2000136a:	687a      	ldr	r2, [r7, #4]
2000136c:	f642 5388 	movw	r3, #11656	; 0x2d88
20001370:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001374:	429a      	cmp	r2, r3
20001376:	d007      	beq.n	20001388 <mss_i2c_isr+0x2c>
20001378:	687a      	ldr	r2, [r7, #4]
2000137a:	f642 53fc 	movw	r3, #11772	; 0x2dfc
2000137e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001382:	429a      	cmp	r2, r3
20001384:	d000      	beq.n	20001388 <mss_i2c_isr+0x2c>
20001386:	be00      	bkpt	0x0000

    status = this_i2c->hw_reg->STATUS;
20001388:	687b      	ldr	r3, [r7, #4]
2000138a:	695b      	ldr	r3, [r3, #20]
2000138c:	791b      	ldrb	r3, [r3, #4]
2000138e:	72fb      	strb	r3, [r7, #11]

    switch( status )
20001390:	7afb      	ldrb	r3, [r7, #11]
20001392:	b2db      	uxtb	r3, r3
20001394:	f1a3 0308 	sub.w	r3, r3, #8
20001398:	2bd0      	cmp	r3, #208	; 0xd0
2000139a:	f200 841c 	bhi.w	20001bd6 <mss_i2c_isr+0x87a>
2000139e:	a201      	add	r2, pc, #4	; (adr r2, 200013a4 <mss_i2c_isr+0x48>)
200013a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
200013a4:	200016e9 	.word	0x200016e9
200013a8:	20001bd7 	.word	0x20001bd7
200013ac:	20001bd7 	.word	0x20001bd7
200013b0:	20001bd7 	.word	0x20001bd7
200013b4:	20001bd7 	.word	0x20001bd7
200013b8:	20001bd7 	.word	0x20001bd7
200013bc:	20001bd7 	.word	0x20001bd7
200013c0:	20001bd7 	.word	0x20001bd7
200013c4:	200016e9 	.word	0x200016e9
200013c8:	20001bd7 	.word	0x20001bd7
200013cc:	20001bd7 	.word	0x20001bd7
200013d0:	20001bd7 	.word	0x20001bd7
200013d4:	20001bd7 	.word	0x20001bd7
200013d8:	20001bd7 	.word	0x20001bd7
200013dc:	20001bd7 	.word	0x20001bd7
200013e0:	20001bd7 	.word	0x20001bd7
200013e4:	2000178d 	.word	0x2000178d
200013e8:	20001bd7 	.word	0x20001bd7
200013ec:	20001bd7 	.word	0x20001bd7
200013f0:	20001bd7 	.word	0x20001bd7
200013f4:	20001bd7 	.word	0x20001bd7
200013f8:	20001bd7 	.word	0x20001bd7
200013fc:	20001bd7 	.word	0x20001bd7
20001400:	20001bd7 	.word	0x20001bd7
20001404:	20001769 	.word	0x20001769
20001408:	20001bd7 	.word	0x20001bd7
2000140c:	20001bd7 	.word	0x20001bd7
20001410:	20001bd7 	.word	0x20001bd7
20001414:	20001bd7 	.word	0x20001bd7
20001418:	20001bd7 	.word	0x20001bd7
2000141c:	20001bd7 	.word	0x20001bd7
20001420:	20001bd7 	.word	0x20001bd7
20001424:	2000178d 	.word	0x2000178d
20001428:	20001bd7 	.word	0x20001bd7
2000142c:	20001bd7 	.word	0x20001bd7
20001430:	20001bd7 	.word	0x20001bd7
20001434:	20001bd7 	.word	0x20001bd7
20001438:	20001bd7 	.word	0x20001bd7
2000143c:	20001bd7 	.word	0x20001bd7
20001440:	20001bd7 	.word	0x20001bd7
20001444:	20001821 	.word	0x20001821
20001448:	20001bd7 	.word	0x20001bd7
2000144c:	20001bd7 	.word	0x20001bd7
20001450:	20001bd7 	.word	0x20001bd7
20001454:	20001bd7 	.word	0x20001bd7
20001458:	20001bd7 	.word	0x20001bd7
2000145c:	20001bd7 	.word	0x20001bd7
20001460:	20001bd7 	.word	0x20001bd7
20001464:	2000175d 	.word	0x2000175d
20001468:	20001bd7 	.word	0x20001bd7
2000146c:	20001bd7 	.word	0x20001bd7
20001470:	20001bd7 	.word	0x20001bd7
20001474:	20001bd7 	.word	0x20001bd7
20001478:	20001bd7 	.word	0x20001bd7
2000147c:	20001bd7 	.word	0x20001bd7
20001480:	20001bd7 	.word	0x20001bd7
20001484:	20001845 	.word	0x20001845
20001488:	20001bd7 	.word	0x20001bd7
2000148c:	20001bd7 	.word	0x20001bd7
20001490:	20001bd7 	.word	0x20001bd7
20001494:	20001bd7 	.word	0x20001bd7
20001498:	20001bd7 	.word	0x20001bd7
2000149c:	20001bd7 	.word	0x20001bd7
200014a0:	20001bd7 	.word	0x20001bd7
200014a4:	20001895 	.word	0x20001895
200014a8:	20001bd7 	.word	0x20001bd7
200014ac:	20001bd7 	.word	0x20001bd7
200014b0:	20001bd7 	.word	0x20001bd7
200014b4:	20001bd7 	.word	0x20001bd7
200014b8:	20001bd7 	.word	0x20001bd7
200014bc:	20001bd7 	.word	0x20001bd7
200014c0:	20001bd7 	.word	0x20001bd7
200014c4:	200018b9 	.word	0x200018b9
200014c8:	20001bd7 	.word	0x20001bd7
200014cc:	20001bd7 	.word	0x20001bd7
200014d0:	20001bd7 	.word	0x20001bd7
200014d4:	20001bd7 	.word	0x20001bd7
200014d8:	20001bd7 	.word	0x20001bd7
200014dc:	20001bd7 	.word	0x20001bd7
200014e0:	20001bd7 	.word	0x20001bd7
200014e4:	200018f3 	.word	0x200018f3
200014e8:	20001bd7 	.word	0x20001bd7
200014ec:	20001bd7 	.word	0x20001bd7
200014f0:	20001bd7 	.word	0x20001bd7
200014f4:	20001bd7 	.word	0x20001bd7
200014f8:	20001bd7 	.word	0x20001bd7
200014fc:	20001bd7 	.word	0x20001bd7
20001500:	20001bd7 	.word	0x20001bd7
20001504:	20001995 	.word	0x20001995
20001508:	20001bd7 	.word	0x20001bd7
2000150c:	20001bd7 	.word	0x20001bd7
20001510:	20001bd7 	.word	0x20001bd7
20001514:	20001bd7 	.word	0x20001bd7
20001518:	20001bd7 	.word	0x20001bd7
2000151c:	20001bd7 	.word	0x20001bd7
20001520:	20001bd7 	.word	0x20001bd7
20001524:	2000198b 	.word	0x2000198b
20001528:	20001bd7 	.word	0x20001bd7
2000152c:	20001bd7 	.word	0x20001bd7
20001530:	20001bd7 	.word	0x20001bd7
20001534:	20001bd7 	.word	0x20001bd7
20001538:	20001bd7 	.word	0x20001bd7
2000153c:	20001bd7 	.word	0x20001bd7
20001540:	20001bd7 	.word	0x20001bd7
20001544:	20001995 	.word	0x20001995
20001548:	20001bd7 	.word	0x20001bd7
2000154c:	20001bd7 	.word	0x20001bd7
20001550:	20001bd7 	.word	0x20001bd7
20001554:	20001bd7 	.word	0x20001bd7
20001558:	20001bd7 	.word	0x20001bd7
2000155c:	20001bd7 	.word	0x20001bd7
20001560:	20001bd7 	.word	0x20001bd7
20001564:	2000198b 	.word	0x2000198b
20001568:	20001bd7 	.word	0x20001bd7
2000156c:	20001bd7 	.word	0x20001bd7
20001570:	20001bd7 	.word	0x20001bd7
20001574:	20001bd7 	.word	0x20001bd7
20001578:	20001bd7 	.word	0x20001bd7
2000157c:	20001bd7 	.word	0x20001bd7
20001580:	20001bd7 	.word	0x20001bd7
20001584:	200019d7 	.word	0x200019d7
20001588:	20001bd7 	.word	0x20001bd7
2000158c:	20001bd7 	.word	0x20001bd7
20001590:	20001bd7 	.word	0x20001bd7
20001594:	20001bd7 	.word	0x20001bd7
20001598:	20001bd7 	.word	0x20001bd7
2000159c:	20001bd7 	.word	0x20001bd7
200015a0:	20001bd7 	.word	0x20001bd7
200015a4:	20001957 	.word	0x20001957
200015a8:	20001bd7 	.word	0x20001bd7
200015ac:	20001bd7 	.word	0x20001bd7
200015b0:	20001bd7 	.word	0x20001bd7
200015b4:	20001bd7 	.word	0x20001bd7
200015b8:	20001bd7 	.word	0x20001bd7
200015bc:	20001bd7 	.word	0x20001bd7
200015c0:	20001bd7 	.word	0x20001bd7
200015c4:	200019d7 	.word	0x200019d7
200015c8:	20001bd7 	.word	0x20001bd7
200015cc:	20001bd7 	.word	0x20001bd7
200015d0:	20001bd7 	.word	0x20001bd7
200015d4:	20001bd7 	.word	0x20001bd7
200015d8:	20001bd7 	.word	0x20001bd7
200015dc:	20001bd7 	.word	0x20001bd7
200015e0:	20001bd7 	.word	0x20001bd7
200015e4:	20001957 	.word	0x20001957
200015e8:	20001bd7 	.word	0x20001bd7
200015ec:	20001bd7 	.word	0x20001bd7
200015f0:	20001bd7 	.word	0x20001bd7
200015f4:	20001bd7 	.word	0x20001bd7
200015f8:	20001bd7 	.word	0x20001bd7
200015fc:	20001bd7 	.word	0x20001bd7
20001600:	20001bd7 	.word	0x20001bd7
20001604:	20001a33 	.word	0x20001a33
20001608:	20001bd7 	.word	0x20001bd7
2000160c:	20001bd7 	.word	0x20001bd7
20001610:	20001bd7 	.word	0x20001bd7
20001614:	20001bd7 	.word	0x20001bd7
20001618:	20001bd7 	.word	0x20001bd7
2000161c:	20001bd7 	.word	0x20001bd7
20001620:	20001bd7 	.word	0x20001bd7
20001624:	20001b0b 	.word	0x20001b0b
20001628:	20001bd7 	.word	0x20001bd7
2000162c:	20001bd7 	.word	0x20001bd7
20001630:	20001bd7 	.word	0x20001bd7
20001634:	20001bd7 	.word	0x20001bd7
20001638:	20001bd7 	.word	0x20001bd7
2000163c:	20001bd7 	.word	0x20001bd7
20001640:	20001bd7 	.word	0x20001bd7
20001644:	20001b0b 	.word	0x20001b0b
20001648:	20001bd7 	.word	0x20001bd7
2000164c:	20001bd7 	.word	0x20001bd7
20001650:	20001bd7 	.word	0x20001bd7
20001654:	20001bd7 	.word	0x20001bd7
20001658:	20001bd7 	.word	0x20001bd7
2000165c:	20001bd7 	.word	0x20001bd7
20001660:	20001bd7 	.word	0x20001bd7
20001664:	20001b0b 	.word	0x20001b0b
20001668:	20001bd7 	.word	0x20001bd7
2000166c:	20001bd7 	.word	0x20001bd7
20001670:	20001bd7 	.word	0x20001bd7
20001674:	20001bd7 	.word	0x20001bd7
20001678:	20001bd7 	.word	0x20001bd7
2000167c:	20001bd7 	.word	0x20001bd7
20001680:	20001bd7 	.word	0x20001bd7
20001684:	20001b9d 	.word	0x20001b9d
20001688:	20001bd7 	.word	0x20001bd7
2000168c:	20001bd7 	.word	0x20001bd7
20001690:	20001bd7 	.word	0x20001bd7
20001694:	20001bd7 	.word	0x20001bd7
20001698:	20001bd7 	.word	0x20001bd7
2000169c:	20001bd7 	.word	0x20001bd7
200016a0:	20001bd7 	.word	0x20001bd7
200016a4:	20001b9d 	.word	0x20001b9d
200016a8:	20001bd7 	.word	0x20001bd7
200016ac:	20001bd7 	.word	0x20001bd7
200016b0:	20001bd7 	.word	0x20001bd7
200016b4:	20001bd7 	.word	0x20001bd7
200016b8:	20001bd7 	.word	0x20001bd7
200016bc:	20001bd7 	.word	0x20001bd7
200016c0:	20001bd7 	.word	0x20001bd7
200016c4:	20001bd7 	.word	0x20001bd7
200016c8:	20001bd7 	.word	0x20001bd7
200016cc:	20001bd7 	.word	0x20001bd7
200016d0:	20001bd7 	.word	0x20001bd7
200016d4:	20001bd7 	.word	0x20001bd7
200016d8:	20001bd7 	.word	0x20001bd7
200016dc:	20001bd7 	.word	0x20001bd7
200016e0:	20001bd7 	.word	0x20001bd7
200016e4:	20001add 	.word	0x20001add
    {
        /************** MASTER TRANSMITTER / RECEIVER *******************/
      
        case ST_START: /* start has been xmt'd */
        case ST_RESTART: /* repeated start has been xmt'd */
            this_i2c->hw_reg_bit->CTRL_STA = 0u;
200016e8:	687b      	ldr	r3, [r7, #4]
200016ea:	699b      	ldr	r3, [r3, #24]
200016ec:	f04f 0200 	mov.w	r2, #0
200016f0:	615a      	str	r2, [r3, #20]
            this_i2c->hw_reg->DATA = (uint8_t)this_i2c->target_addr;
200016f2:	687b      	ldr	r3, [r7, #4]
200016f4:	695b      	ldr	r3, [r3, #20]
200016f6:	687a      	ldr	r2, [r7, #4]
200016f8:	6852      	ldr	r2, [r2, #4]
200016fa:	b2d2      	uxtb	r2, r2
200016fc:	721a      	strb	r2, [r3, #8]
            this_i2c->hw_reg_bit->DATA_DIR = this_i2c->dir;
200016fe:	687b      	ldr	r3, [r7, #4]
20001700:	699b      	ldr	r3, [r3, #24]
20001702:	687a      	ldr	r2, [r7, #4]
20001704:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
20001706:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
            if ( this_i2c->dir == WRITE_DIR )
2000170a:	687b      	ldr	r3, [r7, #4]
2000170c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000170e:	2b00      	cmp	r3, #0
20001710:	d104      	bne.n	2000171c <mss_i2c_isr+0x3c0>
            {
                this_i2c->master_tx_idx = 0u;
20001712:	687b      	ldr	r3, [r7, #4]
20001714:	f04f 0200 	mov.w	r2, #0
20001718:	629a      	str	r2, [r3, #40]	; 0x28
2000171a:	e007      	b.n	2000172c <mss_i2c_isr+0x3d0>
            }
            else if ( this_i2c->dir == READ_DIR)
2000171c:	687b      	ldr	r3, [r7, #4]
2000171e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20001720:	2b01      	cmp	r3, #1
20001722:	d103      	bne.n	2000172c <mss_i2c_isr+0x3d0>
            {
                this_i2c->master_rx_idx = 0u;
20001724:	687b      	ldr	r3, [r7, #4]
20001726:	f04f 0200 	mov.w	r2, #0
2000172a:	639a      	str	r2, [r3, #56]	; 0x38
            /*
             * Clear the pending transaction. This condition will be true if the slave 
             * has acquired the bus to carry out pending master transaction which 
             * it had received during its slave transmission or reception mode. 
             */
            if(this_i2c->is_transaction_pending)
2000172c:	687b      	ldr	r3, [r7, #4]
2000172e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
20001732:	2b00      	cmp	r3, #0
20001734:	d004      	beq.n	20001740 <mss_i2c_isr+0x3e4>
            {
                this_i2c->is_transaction_pending = 0u;
20001736:	687b      	ldr	r3, [r7, #4]
20001738:	f04f 0200 	mov.w	r2, #0
2000173c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

            /*
             * Make sure to update proper transaction after master START
             * or RESTART
             */
            if(this_i2c->transaction != this_i2c->pending_transaction)
20001740:	687b      	ldr	r3, [r7, #4]
20001742:	7a1a      	ldrb	r2, [r3, #8]
20001744:	687b      	ldr	r3, [r7, #4]
20001746:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
2000174a:	429a      	cmp	r2, r3
2000174c:	f000 8267 	beq.w	20001c1e <mss_i2c_isr+0x8c2>
            {
                this_i2c->transaction = this_i2c->pending_transaction;
20001750:	687b      	ldr	r3, [r7, #4]
20001752:	f893 2072 	ldrb.w	r2, [r3, #114]	; 0x72
20001756:	687b      	ldr	r3, [r7, #4]
20001758:	721a      	strb	r2, [r3, #8]
            }
            break;
2000175a:	e269      	b.n	20001c30 <mss_i2c_isr+0x8d4>
            
        case ST_LOST_ARB:
            /* Set start bit.  Let's keep trying!  Don't give up! */
            this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
2000175c:	687b      	ldr	r3, [r7, #4]
2000175e:	699b      	ldr	r3, [r3, #24]
20001760:	f04f 0201 	mov.w	r2, #1
20001764:	615a      	str	r2, [r3, #20]
            break;
20001766:	e263      	b.n	20001c30 <mss_i2c_isr+0x8d4>
            
        /******************* MASTER TRANSMITTER *************************/
        case ST_SLAW_NACK:
            /* SLA+W has been transmitted; not ACK has been received - let's stop. */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
20001768:	687b      	ldr	r3, [r7, #4]
2000176a:	699b      	ldr	r3, [r3, #24]
2000176c:	f04f 0201 	mov.w	r2, #1
20001770:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
20001772:	687b      	ldr	r3, [r7, #4]
20001774:	f04f 0202 	mov.w	r2, #2
20001778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            this_i2c->transaction = NO_TRANSACTION;
2000177c:	687b      	ldr	r3, [r7, #4]
2000177e:	f04f 0200 	mov.w	r2, #0
20001782:	721a      	strb	r2, [r3, #8]
            enable_slave_if_required(this_i2c);
20001784:	6878      	ldr	r0, [r7, #4]
20001786:	f7ff fdd5 	bl	20001334 <enable_slave_if_required>
            break;
2000178a:	e251      	b.n	20001c30 <mss_i2c_isr+0x8d4>
            
        case ST_SLAW_ACK:
        case ST_TX_DATA_ACK:
            /* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
            if (this_i2c->master_tx_idx < this_i2c->master_tx_size)
2000178c:	687b      	ldr	r3, [r7, #4]
2000178e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
20001790:	687b      	ldr	r3, [r7, #4]
20001792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001794:	429a      	cmp	r2, r3
20001796:	d20d      	bcs.n	200017b4 <mss_i2c_isr+0x458>
            {    
                this_i2c->hw_reg->DATA = this_i2c->master_tx_buffer[this_i2c->master_tx_idx++];
20001798:	687b      	ldr	r3, [r7, #4]
2000179a:	695a      	ldr	r2, [r3, #20]
2000179c:	687b      	ldr	r3, [r7, #4]
2000179e:	6a19      	ldr	r1, [r3, #32]
200017a0:	687b      	ldr	r3, [r7, #4]
200017a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
200017a4:	4419      	add	r1, r3
200017a6:	7809      	ldrb	r1, [r1, #0]
200017a8:	7211      	strb	r1, [r2, #8]
200017aa:	f103 0201 	add.w	r2, r3, #1
200017ae:	687b      	ldr	r3, [r7, #4]
200017b0:	629a      	str	r2, [r3, #40]	; 0x28
                    NVIC_DisableIRQ( this_i2c->irqn );
                    clear_irq = 0u;
                }
                this_i2c->master_status = MSS_I2C_SUCCESS;
            }
            break;
200017b2:	e23d      	b.n	20001c30 <mss_i2c_isr+0x8d4>
            /* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
            if (this_i2c->master_tx_idx < this_i2c->master_tx_size)
            {    
                this_i2c->hw_reg->DATA = this_i2c->master_tx_buffer[this_i2c->master_tx_idx++];
            }
            else if ( this_i2c->transaction == MASTER_RANDOM_READ_TRANSACTION )
200017b4:	687b      	ldr	r3, [r7, #4]
200017b6:	7a1b      	ldrb	r3, [r3, #8]
200017b8:	2b03      	cmp	r3, #3
200017ba:	d109      	bne.n	200017d0 <mss_i2c_isr+0x474>
            {
                /* We are finished sending the address offset part of a random read transaction.
                 * It is is time to send a restart in order to change direction. */
                 this_i2c->dir = READ_DIR;
200017bc:	687b      	ldr	r3, [r7, #4]
200017be:	f04f 0201 	mov.w	r2, #1
200017c2:	62da      	str	r2, [r3, #44]	; 0x2c
                 this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
200017c4:	687b      	ldr	r3, [r7, #4]
200017c6:	699b      	ldr	r3, [r3, #24]
200017c8:	f04f 0201 	mov.w	r2, #1
200017cc:	615a      	str	r2, [r3, #20]
                    NVIC_DisableIRQ( this_i2c->irqn );
                    clear_irq = 0u;
                }
                this_i2c->master_status = MSS_I2C_SUCCESS;
            }
            break;
200017ce:	e22f      	b.n	20001c30 <mss_i2c_isr+0x8d4>
            {
                /*
                 * Set the transaction back to NO_TRANSACTION to allow user to do further
                 * transaction
                 */
                this_i2c->transaction = NO_TRANSACTION;
200017d0:	687b      	ldr	r3, [r7, #4]
200017d2:	f04f 0200 	mov.w	r2, #0
200017d6:	721a      	strb	r2, [r3, #8]
                hold_bus = this_i2c->options & MSS_I2C_HOLD_BUS;
200017d8:	687b      	ldr	r3, [r7, #4]
200017da:	7c1b      	ldrb	r3, [r3, #16]
200017dc:	f003 0301 	and.w	r3, r3, #1
200017e0:	737b      	strb	r3, [r7, #13]

                /* Store the information of current I2C bus status in the bus_status*/
                this_i2c->bus_status  = hold_bus;
200017e2:	687b      	ldr	r3, [r7, #4]
200017e4:	7b7a      	ldrb	r2, [r7, #13]
200017e6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                if ( hold_bus == 0u )
200017ea:	7b7b      	ldrb	r3, [r7, #13]
200017ec:	2b00      	cmp	r3, #0
200017ee:	d108      	bne.n	20001802 <mss_i2c_isr+0x4a6>
                { 
                    this_i2c->hw_reg_bit->CTRL_STO = 0x01u; /*xmt stop condition */
200017f0:	687b      	ldr	r3, [r7, #4]
200017f2:	699b      	ldr	r3, [r3, #24]
200017f4:	f04f 0201 	mov.w	r2, #1
200017f8:	611a      	str	r2, [r3, #16]
                    enable_slave_if_required(this_i2c);
200017fa:	6878      	ldr	r0, [r7, #4]
200017fc:	f7ff fd9a 	bl	20001334 <enable_slave_if_required>
20001800:	e008      	b.n	20001814 <mss_i2c_isr+0x4b8>
                }
                else
                {
                    NVIC_DisableIRQ( this_i2c->irqn );
20001802:	687b      	ldr	r3, [r7, #4]
20001804:	8a5b      	ldrh	r3, [r3, #18]
20001806:	b21b      	sxth	r3, r3
20001808:	4618      	mov	r0, r3
2000180a:	f7ff fb67 	bl	20000edc <NVIC_DisableIRQ>
                    clear_irq = 0u;
2000180e:	f04f 0300 	mov.w	r3, #0
20001812:	73bb      	strb	r3, [r7, #14]
                }
                this_i2c->master_status = MSS_I2C_SUCCESS;
20001814:	687b      	ldr	r3, [r7, #4]
20001816:	f04f 0200 	mov.w	r2, #0
2000181a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            }
            break;
2000181e:	e207      	b.n	20001c30 <mss_i2c_isr+0x8d4>
            /* data byte SENT, ACK to be received
             * In fact, this means we've received a NACK (This may not be 
             * obvious, but if we've rec'd an ACK then we would be in state 
             * 0x28!) hence, let's send a stop bit
             */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
20001820:	687b      	ldr	r3, [r7, #4]
20001822:	699b      	ldr	r3, [r3, #24]
20001824:	f04f 0201 	mov.w	r2, #1
20001828:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
2000182a:	687b      	ldr	r3, [r7, #4]
2000182c:	f04f 0202 	mov.w	r2, #2
20001830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20001834:	687b      	ldr	r3, [r7, #4]
20001836:	f04f 0200 	mov.w	r2, #0
2000183a:	721a      	strb	r2, [r3, #8]
            enable_slave_if_required(this_i2c);
2000183c:	6878      	ldr	r0, [r7, #4]
2000183e:	f7ff fd79 	bl	20001334 <enable_slave_if_required>

            break;
20001842:	e1f5      	b.n	20001c30 <mss_i2c_isr+0x8d4>
      /* STATUS codes 08H, 10H, 38H are all covered in MTX mode */
        case ST_SLAR_ACK: /* SLA+R tx'ed. */
            /* Let's make sure we ACK the first data byte received (set AA bit in CTRL) unless
             * the next byte is the last byte of the read transaction.
             */
            if(this_i2c->master_rx_size > 1u)
20001844:	687b      	ldr	r3, [r7, #4]
20001846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20001848:	2b01      	cmp	r3, #1
2000184a:	d905      	bls.n	20001858 <mss_i2c_isr+0x4fc>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
2000184c:	687b      	ldr	r3, [r7, #4]
2000184e:	699b      	ldr	r3, [r3, #24]
20001850:	f04f 0201 	mov.w	r2, #1
20001854:	609a      	str	r2, [r3, #8]
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
                this_i2c->master_status = MSS_I2C_SUCCESS;
                this_i2c->transaction = NO_TRANSACTION;
            }
            break;
20001856:	e1eb      	b.n	20001c30 <mss_i2c_isr+0x8d4>
             */
            if(this_i2c->master_rx_size > 1u)
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
            }
            else if(1u == this_i2c->master_rx_size)
20001858:	687b      	ldr	r3, [r7, #4]
2000185a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2000185c:	2b01      	cmp	r3, #1
2000185e:	d105      	bne.n	2000186c <mss_i2c_isr+0x510>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
20001860:	687b      	ldr	r3, [r7, #4]
20001862:	699b      	ldr	r3, [r3, #24]
20001864:	f04f 0200 	mov.w	r2, #0
20001868:	609a      	str	r2, [r3, #8]
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
                this_i2c->master_status = MSS_I2C_SUCCESS;
                this_i2c->transaction = NO_TRANSACTION;
            }
            break;
2000186a:	e1e1      	b.n	20001c30 <mss_i2c_isr+0x8d4>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
            }
            else /* this_i2c->master_rx_size == 0u */
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
2000186c:	687b      	ldr	r3, [r7, #4]
2000186e:	699b      	ldr	r3, [r3, #24]
20001870:	f04f 0201 	mov.w	r2, #1
20001874:	609a      	str	r2, [r3, #8]
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
20001876:	687b      	ldr	r3, [r7, #4]
20001878:	699b      	ldr	r3, [r3, #24]
2000187a:	f04f 0201 	mov.w	r2, #1
2000187e:	611a      	str	r2, [r3, #16]
                this_i2c->master_status = MSS_I2C_SUCCESS;
20001880:	687b      	ldr	r3, [r7, #4]
20001882:	f04f 0200 	mov.w	r2, #0
20001886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
                this_i2c->transaction = NO_TRANSACTION;
2000188a:	687b      	ldr	r3, [r7, #4]
2000188c:	f04f 0200 	mov.w	r2, #0
20001890:	721a      	strb	r2, [r3, #8]
            }
            break;
20001892:	e1cd      	b.n	20001c30 <mss_i2c_isr+0x8d4>
            
        case ST_SLAR_NACK: /* SLA+R tx'ed; let's release the bus (send a stop condition) */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
20001894:	687b      	ldr	r3, [r7, #4]
20001896:	699b      	ldr	r3, [r3, #24]
20001898:	f04f 0201 	mov.w	r2, #1
2000189c:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
2000189e:	687b      	ldr	r3, [r7, #4]
200018a0:	f04f 0202 	mov.w	r2, #2
200018a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
200018a8:	687b      	ldr	r3, [r7, #4]
200018aa:	f04f 0200 	mov.w	r2, #0
200018ae:	721a      	strb	r2, [r3, #8]
            enable_slave_if_required(this_i2c);
200018b0:	6878      	ldr	r0, [r7, #4]
200018b2:	f7ff fd3f 	bl	20001334 <enable_slave_if_required>
            break;
200018b6:	e1bb      	b.n	20001c30 <mss_i2c_isr+0x8d4>
          
        case ST_RX_DATA_ACK: /* Data byte received, ACK returned */
            /* First, get the data */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx++] = this_i2c->hw_reg->DATA;
200018b8:	687b      	ldr	r3, [r7, #4]
200018ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200018bc:	687b      	ldr	r3, [r7, #4]
200018be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200018c0:	441a      	add	r2, r3
200018c2:	6879      	ldr	r1, [r7, #4]
200018c4:	6949      	ldr	r1, [r1, #20]
200018c6:	7a09      	ldrb	r1, [r1, #8]
200018c8:	b2c9      	uxtb	r1, r1
200018ca:	7011      	strb	r1, [r2, #0]
200018cc:	f103 0201 	add.w	r2, r3, #1
200018d0:	687b      	ldr	r3, [r7, #4]
200018d2:	639a      	str	r2, [r3, #56]	; 0x38

            if( this_i2c->master_rx_idx >= (this_i2c->master_rx_size - 1u))
200018d4:	687b      	ldr	r3, [r7, #4]
200018d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
200018d8:	687b      	ldr	r3, [r7, #4]
200018da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
200018dc:	f103 33ff 	add.w	r3, r3, #4294967295
200018e0:	429a      	cmp	r2, r3
200018e2:	f0c0 819e 	bcc.w	20001c22 <mss_i2c_isr+0x8c6>
            {
                /* If we're at the second last byte, let's set AA to 0 so
                 * we return a NACK at the last byte. */
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
200018e6:	687b      	ldr	r3, [r7, #4]
200018e8:	699b      	ldr	r3, [r3, #24]
200018ea:	f04f 0200 	mov.w	r2, #0
200018ee:	609a      	str	r2, [r3, #8]
            }
            break;
200018f0:	e19e      	b.n	20001c30 <mss_i2c_isr+0x8d4>
            
        case ST_RX_DATA_NACK: /* Data byte received, NACK returned */
            /* Get the data, then send a stop condition */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx] = this_i2c->hw_reg->DATA;
200018f2:	687b      	ldr	r3, [r7, #4]
200018f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200018f6:	687b      	ldr	r3, [r7, #4]
200018f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200018fa:	4413      	add	r3, r2
200018fc:	687a      	ldr	r2, [r7, #4]
200018fe:	6952      	ldr	r2, [r2, #20]
20001900:	7a12      	ldrb	r2, [r2, #8]
20001902:	b2d2      	uxtb	r2, r2
20001904:	701a      	strb	r2, [r3, #0]
          
            hold_bus = this_i2c->options &  MSS_I2C_HOLD_BUS; 
20001906:	687b      	ldr	r3, [r7, #4]
20001908:	7c1b      	ldrb	r3, [r3, #16]
2000190a:	f003 0301 	and.w	r3, r3, #1
2000190e:	737b      	strb	r3, [r7, #13]

            /* Store the information of current I2C bus status in the bus_status*/
            this_i2c->bus_status  = hold_bus;
20001910:	687b      	ldr	r3, [r7, #4]
20001912:	7b7a      	ldrb	r2, [r7, #13]
20001914:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
            if ( hold_bus == 0u )
20001918:	7b7b      	ldrb	r3, [r7, #13]
2000191a:	2b00      	cmp	r3, #0
2000191c:	d108      	bne.n	20001930 <mss_i2c_isr+0x5d4>
            { 
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;  /*xmt stop condition */
2000191e:	687b      	ldr	r3, [r7, #4]
20001920:	699b      	ldr	r3, [r3, #24]
20001922:	f04f 0201 	mov.w	r2, #1
20001926:	611a      	str	r2, [r3, #16]

                /* Bus is released, now we can start listening to bus, if it is slave */
                   enable_slave_if_required(this_i2c);
20001928:	6878      	ldr	r0, [r7, #4]
2000192a:	f7ff fd03 	bl	20001334 <enable_slave_if_required>
2000192e:	e008      	b.n	20001942 <mss_i2c_isr+0x5e6>
            }
            else
            {
                NVIC_DisableIRQ( this_i2c->irqn );
20001930:	687b      	ldr	r3, [r7, #4]
20001932:	8a5b      	ldrh	r3, [r3, #18]
20001934:	b21b      	sxth	r3, r3
20001936:	4618      	mov	r0, r3
20001938:	f7ff fad0 	bl	20000edc <NVIC_DisableIRQ>
                clear_irq = 0u;
2000193c:	f04f 0300 	mov.w	r3, #0
20001940:	73bb      	strb	r3, [r7, #14]

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20001942:	687b      	ldr	r3, [r7, #4]
20001944:	f04f 0200 	mov.w	r2, #0
20001948:	721a      	strb	r2, [r3, #8]
            this_i2c->master_status = MSS_I2C_SUCCESS;
2000194a:	687b      	ldr	r3, [r7, #4]
2000194c:	f04f 0200 	mov.w	r2, #0
20001950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            break;
20001954:	e16c      	b.n	20001c30 <mss_i2c_isr+0x8d4>
        
        /******************** SLAVE RECEIVER **************************/
        case ST_GCA_NACK: /* NACK after, GCA addressing */
        case ST_SLA_NACK: /* Re-enable AA (assert ack) bit for future transmissions */
            this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20001956:	687b      	ldr	r3, [r7, #4]
20001958:	699b      	ldr	r3, [r3, #24]
2000195a:	f04f 0201 	mov.w	r2, #1
2000195e:	609a      	str	r2, [r3, #8]
            
            this_i2c->transaction = NO_TRANSACTION;
20001960:	687b      	ldr	r3, [r7, #4]
20001962:	f04f 0200 	mov.w	r2, #0
20001966:	721a      	strb	r2, [r3, #8]
            this_i2c->slave_status = MSS_I2C_SUCCESS;
20001968:	687b      	ldr	r3, [r7, #4]
2000196a:	f04f 0200 	mov.w	r2, #0
2000196e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
20001972:	687b      	ldr	r3, [r7, #4]
20001974:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
20001978:	2b00      	cmp	r3, #0
2000197a:	f000 8154 	beq.w	20001c26 <mss_i2c_isr+0x8ca>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
2000197e:	687b      	ldr	r3, [r7, #4]
20001980:	699b      	ldr	r3, [r3, #24]
20001982:	f04f 0201 	mov.w	r2, #1
20001986:	615a      	str	r2, [r3, #20]
            }
            break;
20001988:	e152      	b.n	20001c30 <mss_i2c_isr+0x8d4>
        case ST_SLV_LA: /* Arbitr. lost (SLA rec'd) */
            /*
             *  We lost arbitration and either the GCE or our address was the
             *  one received so pend the master operation we were starting.
             */
            this_i2c->is_transaction_pending = 1u;
2000198a:	687b      	ldr	r3, [r7, #4]
2000198c:	f04f 0201 	mov.w	r2, #1
20001990:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
            /* Fall through to normal ST processing as we are now in slave mode */

        case ST_GCA: /* General call address received, ACK returned */
        case ST_SLAVE_SLAW: /* SLA+W received, ACK returned */

            this_i2c->transaction = WRITE_SLAVE_TRANSACTION;
20001994:	687b      	ldr	r3, [r7, #4]
20001996:	f04f 0204 	mov.w	r2, #4
2000199a:	721a      	strb	r2, [r3, #8]
            this_i2c->slave_rx_idx = 0u;
2000199c:	687b      	ldr	r3, [r7, #4]
2000199e:	f04f 0200 	mov.w	r2, #0
200019a2:	659a      	str	r2, [r3, #88]	; 0x58
            this_i2c->random_read_addr = 0u;
200019a4:	687b      	ldr	r3, [r7, #4]
200019a6:	f04f 0200 	mov.w	r2, #0
200019aa:	60da      	str	r2, [r3, #12]

             /* If Start Bit is set, clear it, but store that information since it is because of
              * pending transaction
              */
            if(this_i2c->hw_reg_bit->CTRL_STA)
200019ac:	687b      	ldr	r3, [r7, #4]
200019ae:	699b      	ldr	r3, [r3, #24]
200019b0:	695b      	ldr	r3, [r3, #20]
200019b2:	2b00      	cmp	r3, #0
200019b4:	d009      	beq.n	200019ca <mss_i2c_isr+0x66e>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 0u ;
200019b6:	687b      	ldr	r3, [r7, #4]
200019b8:	699b      	ldr	r3, [r3, #24]
200019ba:	f04f 0200 	mov.w	r2, #0
200019be:	615a      	str	r2, [r3, #20]
                this_i2c->is_transaction_pending = 1u;
200019c0:	687b      	ldr	r3, [r7, #4]
200019c2:	f04f 0201 	mov.w	r2, #1
200019c6:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
            }
            this_i2c->slave_status = MSS_I2C_IN_PROGRESS;
200019ca:	687b      	ldr	r3, [r7, #4]
200019cc:	f04f 0201 	mov.w	r2, #1
200019d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
#ifdef MSS_I2C_INCLUDE_SLA_IN_RX_PAYLOAD
            /* Fall through to put address as first byte in payload buffer */
#else
            /* Only break from this case if the slave address must NOT be included at the
             * beginning of the received write data. */
            break;
200019d4:	e12c      	b.n	20001c30 <mss_i2c_isr+0x8d4>
#endif            
        case ST_GCA_ACK: /* DATA received; ACK sent after GCA */
        case ST_RDATA: /* DATA received; must clear DATA register */
            if((this_i2c->slave_rx_buffer != (uint8_t *)0)
200019d6:	687b      	ldr	r3, [r7, #4]
200019d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
200019da:	2b00      	cmp	r3, #0
200019dc:	d01c      	beq.n	20001a18 <mss_i2c_isr+0x6bc>
               && (this_i2c->slave_rx_idx < this_i2c->slave_rx_size))
200019de:	687b      	ldr	r3, [r7, #4]
200019e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
200019e2:	687b      	ldr	r3, [r7, #4]
200019e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
             * beginning of the received write data. */
            break;
#endif            
        case ST_GCA_ACK: /* DATA received; ACK sent after GCA */
        case ST_RDATA: /* DATA received; must clear DATA register */
            if((this_i2c->slave_rx_buffer != (uint8_t *)0)
200019e6:	429a      	cmp	r2, r3
200019e8:	d216      	bcs.n	20001a18 <mss_i2c_isr+0x6bc>
               && (this_i2c->slave_rx_idx < this_i2c->slave_rx_size))
            {
                data = this_i2c->hw_reg->DATA;
200019ea:	687b      	ldr	r3, [r7, #4]
200019ec:	695b      	ldr	r3, [r3, #20]
200019ee:	7a1b      	ldrb	r3, [r3, #8]
200019f0:	733b      	strb	r3, [r7, #12]
                this_i2c->slave_rx_buffer[this_i2c->slave_rx_idx++] = data;
200019f2:	687b      	ldr	r3, [r7, #4]
200019f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
200019f6:	687b      	ldr	r3, [r7, #4]
200019f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
200019fa:	441a      	add	r2, r3
200019fc:	7b39      	ldrb	r1, [r7, #12]
200019fe:	7011      	strb	r1, [r2, #0]
20001a00:	f103 0201 	add.w	r2, r3, #1
20001a04:	687b      	ldr	r3, [r7, #4]
20001a06:	659a      	str	r2, [r3, #88]	; 0x58
                {
                    /* Ignore the slave address byte in the random read address
                       computation in the case where INCLUDE_SLA_IN_RX_PAYLOAD
                       is defined. */
#endif
                    this_i2c->random_read_addr = (this_i2c->random_read_addr << 8) + data;
20001a08:	687b      	ldr	r3, [r7, #4]
20001a0a:	68db      	ldr	r3, [r3, #12]
20001a0c:	ea4f 2203 	mov.w	r2, r3, lsl #8
20001a10:	7b3b      	ldrb	r3, [r7, #12]
20001a12:	441a      	add	r2, r3
20001a14:	687b      	ldr	r3, [r7, #4]
20001a16:	60da      	str	r2, [r3, #12]
#ifdef MSS_I2C_INCLUDE_SLA_IN_RX_PAYLOAD
                }
#endif
            }
            
            if (this_i2c->slave_rx_idx >= this_i2c->slave_rx_size)
20001a18:	687b      	ldr	r3, [r7, #4]
20001a1a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
20001a1c:	687b      	ldr	r3, [r7, #4]
20001a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20001a20:	429a      	cmp	r2, r3
20001a22:	f0c0 8102 	bcc.w	20001c2a <mss_i2c_isr+0x8ce>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;   /* send a NACK when done (next reception) */
20001a26:	687b      	ldr	r3, [r7, #4]
20001a28:	699b      	ldr	r3, [r3, #24]
20001a2a:	f04f 0200 	mov.w	r2, #0
20001a2e:	609a      	str	r2, [r3, #8]
            }
            break;
20001a30:	e0fe      	b.n	20001c30 <mss_i2c_isr+0x8d4>
            /* STOP or repeated START occurred. */
            /* We cannot be sure if the transaction has actually completed as
             * this hardware state reports that either a STOP or repeated START
             * condition has occurred. We assume that this is a repeated START
             * if the transaction was a write from the master to this point.*/
            if ( this_i2c->transaction == WRITE_SLAVE_TRANSACTION )
20001a32:	687b      	ldr	r3, [r7, #4]
20001a34:	7a1b      	ldrb	r3, [r3, #8]
20001a36:	2b04      	cmp	r3, #4
20001a38:	d135      	bne.n	20001aa6 <mss_i2c_isr+0x74a>
            {
                if ( this_i2c->slave_rx_idx == this_i2c->slave_mem_offset_length )
20001a3a:	687b      	ldr	r3, [r7, #4]
20001a3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
20001a3e:	687b      	ldr	r3, [r7, #4]
20001a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
20001a42:	429a      	cmp	r2, r3
20001a44:	d103      	bne.n	20001a4e <mss_i2c_isr+0x6f2>
                {
                    this_i2c->slave_tx_idx = this_i2c->random_read_addr;
20001a46:	687b      	ldr	r3, [r7, #4]
20001a48:	68da      	ldr	r2, [r3, #12]
20001a4a:	687b      	ldr	r3, [r7, #4]
20001a4c:	64da      	str	r2, [r3, #76]	; 0x4c
                }
                {
                    /* Call the slave's write transaction handler if it exists. */
                    if ( this_i2c->slave_write_handler != 0u )
20001a4e:	687b      	ldr	r3, [r7, #4]
20001a50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
20001a52:	2b00      	cmp	r3, #0
20001a54:	d021      	beq.n	20001a9a <mss_i2c_isr+0x73e>
                    {
                        mss_i2c_slave_handler_ret_t h_ret;
                        h_ret = this_i2c->slave_write_handler( this_i2c, this_i2c->slave_rx_buffer, (uint16_t)this_i2c->slave_rx_idx );
20001a56:	687b      	ldr	r3, [r7, #4]
20001a58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
20001a5a:	687a      	ldr	r2, [r7, #4]
20001a5c:	6d11      	ldr	r1, [r2, #80]	; 0x50
20001a5e:	687a      	ldr	r2, [r7, #4]
20001a60:	6d92      	ldr	r2, [r2, #88]	; 0x58
20001a62:	b292      	uxth	r2, r2
20001a64:	6878      	ldr	r0, [r7, #4]
20001a66:	4798      	blx	r3
20001a68:	4603      	mov	r3, r0
20001a6a:	73fb      	strb	r3, [r7, #15]
                        if ( MSS_I2C_REENABLE_SLAVE_RX == h_ret )
20001a6c:	7bfb      	ldrb	r3, [r7, #15]
20001a6e:	2b00      	cmp	r3, #0
20001a70:	d108      	bne.n	20001a84 <mss_i2c_isr+0x728>
                        {
                            /* There is a small risk that the write handler could
                             * call MSS_I2C_disable_slave() but return
                             * MSS_I2C_REENABLE_SLAVE_RX in error so we only
                             * enable ACKs if still in slave mode. */
                             enable_slave_if_required(this_i2c);
20001a72:	6878      	ldr	r0, [r7, #4]
20001a74:	f7ff fc5e 	bl	20001334 <enable_slave_if_required>
                             this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20001a78:	687b      	ldr	r3, [r7, #4]
20001a7a:	699b      	ldr	r3, [r3, #24]
20001a7c:	f04f 0201 	mov.w	r2, #1
20001a80:	609a      	str	r2, [r3, #8]
                        }
                    }
                    else
                    {
                        /* Re-enable address acknowledge in case we were ready to nack the next received byte. */
                        this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20001a82:	e017      	b.n	20001ab4 <mss_i2c_isr+0x758>
                             enable_slave_if_required(this_i2c);
                             this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
                        }
                        else
                        {
                            this_i2c->hw_reg_bit->CTRL_AA = 0u;
20001a84:	687b      	ldr	r3, [r7, #4]
20001a86:	699b      	ldr	r3, [r3, #24]
20001a88:	f04f 0200 	mov.w	r2, #0
20001a8c:	609a      	str	r2, [r3, #8]
                            /* Clear slave mode flag as well otherwise in mixed
                             * master/slave applications, the AA bit will get set by
                             * subsequent master operations. */
                            this_i2c->is_slave_enabled = 0u;
20001a8e:	687b      	ldr	r3, [r7, #4]
20001a90:	f04f 0200 	mov.w	r2, #0
20001a94:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                        }
                    }
                    else
                    {
                        /* Re-enable address acknowledge in case we were ready to nack the next received byte. */
                        this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20001a98:	e00c      	b.n	20001ab4 <mss_i2c_isr+0x758>
20001a9a:	687b      	ldr	r3, [r7, #4]
20001a9c:	699b      	ldr	r3, [r3, #24]
20001a9e:	f04f 0201 	mov.w	r2, #1
20001aa2:	609a      	str	r2, [r3, #8]
20001aa4:	e006      	b.n	20001ab4 <mss_i2c_isr+0x758>
            {
                /*
                 * Reset slave_tx_idx so that a subsequent read will result in the slave's
                 * transmit buffer being sent from the first byte.
                 */
                this_i2c->slave_tx_idx = 0u;
20001aa6:	687b      	ldr	r3, [r7, #4]
20001aa8:	f04f 0200 	mov.w	r2, #0
20001aac:	64da      	str	r2, [r3, #76]	; 0x4c
                /*
                 * See if we need to re-enable acknowledgement as some error conditions, such
                 * as a master prematurely ending a transfer, can see us get here with AA set
                 * to 0 which will disable slave operation if we are not careful.
                 */
                enable_slave_if_required(this_i2c);
20001aae:	6878      	ldr	r0, [r7, #4]
20001ab0:	f7ff fc40 	bl	20001334 <enable_slave_if_required>
            }

            /* Mark any previous master write transaction as complete. */
            this_i2c->slave_status = MSS_I2C_SUCCESS;
20001ab4:	687b      	ldr	r3, [r7, #4]
20001ab6:	f04f 0200 	mov.w	r2, #0
20001aba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
20001abe:	687b      	ldr	r3, [r7, #4]
20001ac0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
20001ac4:	2b00      	cmp	r3, #0
20001ac6:	d004      	beq.n	20001ad2 <mss_i2c_isr+0x776>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
20001ac8:	687b      	ldr	r3, [r7, #4]
20001aca:	699b      	ldr	r3, [r3, #24]
20001acc:	f04f 0201 	mov.w	r2, #1
20001ad0:	615a      	str	r2, [r3, #20]

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20001ad2:	687b      	ldr	r3, [r7, #4]
20001ad4:	f04f 0200 	mov.w	r2, #0
20001ad8:	721a      	strb	r2, [r3, #8]
            break;
20001ada:	e0a9      	b.n	20001c30 <mss_i2c_isr+0x8d4>
        case ST_SLV_RST: /* SMBUS ONLY: timeout state. must clear interrupt */
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction.
             */
            this_i2c->transaction = NO_TRANSACTION;
20001adc:	687b      	ldr	r3, [r7, #4]
20001ade:	f04f 0200 	mov.w	r2, #0
20001ae2:	721a      	strb	r2, [r3, #8]
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
20001ae4:	687b      	ldr	r3, [r7, #4]
20001ae6:	f04f 0200 	mov.w	r2, #0
20001aea:	64da      	str	r2, [r3, #76]	; 0x4c
            /*
             * Clear status to I2C_FAILED only if there was an operation in progress.
             */
            if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
20001aec:	687b      	ldr	r3, [r7, #4]
20001aee:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
20001af2:	b2db      	uxtb	r3, r3
20001af4:	2b01      	cmp	r3, #1
20001af6:	d104      	bne.n	20001b02 <mss_i2c_isr+0x7a6>
            {
                this_i2c->slave_status = MSS_I2C_FAILED;
20001af8:	687b      	ldr	r3, [r7, #4]
20001afa:	f04f 0202 	mov.w	r2, #2
20001afe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            }

            enable_slave_if_required(this_i2c); /* Make sure AA is set correctly */
20001b02:	6878      	ldr	r0, [r7, #4]
20001b04:	f7ff fc16 	bl	20001334 <enable_slave_if_required>

            break;
20001b08:	e092      	b.n	20001c30 <mss_i2c_isr+0x8d4>
            
        /****************** SLAVE TRANSMITTER **************************/
        case ST_SLAVE_SLAR_ACK: /* SLA+R received, ACK returned */
        case ST_SLARW_LA:   /* Arbitration lost, SLA+R received, ACK returned */
        case ST_RACK: /* Data tx'ed, ACK received */
            if ( status == ST_SLAVE_SLAR_ACK )
20001b0a:	7afb      	ldrb	r3, [r7, #11]
20001b0c:	b2db      	uxtb	r3, r3
20001b0e:	2ba8      	cmp	r3, #168	; 0xa8
20001b10:	d11b      	bne.n	20001b4a <mss_i2c_isr+0x7ee>
            {
                this_i2c->transaction = READ_SLAVE_TRANSACTION;
20001b12:	687b      	ldr	r3, [r7, #4]
20001b14:	f04f 0205 	mov.w	r2, #5
20001b18:	721a      	strb	r2, [r3, #8]
                this_i2c->random_read_addr = 0u;
20001b1a:	687b      	ldr	r3, [r7, #4]
20001b1c:	f04f 0200 	mov.w	r2, #0
20001b20:	60da      	str	r2, [r3, #12]

                this_i2c->slave_status = MSS_I2C_IN_PROGRESS;
20001b22:	687b      	ldr	r3, [r7, #4]
20001b24:	f04f 0201 	mov.w	r2, #1
20001b28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

                /* If Start Bit is set, clear it, but store that information since it is because of
                 * pending transaction
                 */
                if(this_i2c->hw_reg_bit->CTRL_STA)
20001b2c:	687b      	ldr	r3, [r7, #4]
20001b2e:	699b      	ldr	r3, [r3, #24]
20001b30:	695b      	ldr	r3, [r3, #20]
20001b32:	2b00      	cmp	r3, #0
20001b34:	d009      	beq.n	20001b4a <mss_i2c_isr+0x7ee>
                {
                    this_i2c->hw_reg_bit->CTRL_STA = 0u ;
20001b36:	687b      	ldr	r3, [r7, #4]
20001b38:	699b      	ldr	r3, [r3, #24]
20001b3a:	f04f 0200 	mov.w	r2, #0
20001b3e:	615a      	str	r2, [r3, #20]
                    this_i2c->is_transaction_pending = 1u;
20001b40:	687b      	ldr	r3, [r7, #4]
20001b42:	f04f 0201 	mov.w	r2, #1
20001b46:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                }
            }
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size)
20001b4a:	687b      	ldr	r3, [r7, #4]
20001b4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
20001b4e:	687b      	ldr	r3, [r7, #4]
20001b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20001b52:	429a      	cmp	r2, r3
20001b54:	d305      	bcc.n	20001b62 <mss_i2c_isr+0x806>
            {
                /* Ensure 0xFF is returned to the master when the slave specifies
                 * an empty transmit buffer. */
                this_i2c->hw_reg->DATA = 0xFFu;
20001b56:	687b      	ldr	r3, [r7, #4]
20001b58:	695b      	ldr	r3, [r3, #20]
20001b5a:	f04f 32ff 	mov.w	r2, #4294967295
20001b5e:	721a      	strb	r2, [r3, #8]
20001b60:	e00c      	b.n	20001b7c <mss_i2c_isr+0x820>
            }
            else
            {
                /* Load the data the data byte to be sent to the master. */
                this_i2c->hw_reg->DATA = this_i2c->slave_tx_buffer[this_i2c->slave_tx_idx++];
20001b62:	687b      	ldr	r3, [r7, #4]
20001b64:	695a      	ldr	r2, [r3, #20]
20001b66:	687b      	ldr	r3, [r7, #4]
20001b68:	6c59      	ldr	r1, [r3, #68]	; 0x44
20001b6a:	687b      	ldr	r3, [r7, #4]
20001b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20001b6e:	4419      	add	r1, r3
20001b70:	7809      	ldrb	r1, [r1, #0]
20001b72:	7211      	strb	r1, [r2, #8]
20001b74:	f103 0201 	add.w	r2, r3, #1
20001b78:	687b      	ldr	r3, [r7, #4]
20001b7a:	64da      	str	r2, [r3, #76]	; 0x4c
            }
            /* Determine if this is the last data byte to send to the master. */
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size) /* last byte? */
20001b7c:	687b      	ldr	r3, [r7, #4]
20001b7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
20001b80:	687b      	ldr	r3, [r7, #4]
20001b82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20001b84:	429a      	cmp	r2, r3
20001b86:	d352      	bcc.n	20001c2e <mss_i2c_isr+0x8d2>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
20001b88:	687b      	ldr	r3, [r7, #4]
20001b8a:	699b      	ldr	r3, [r3, #24]
20001b8c:	f04f 0200 	mov.w	r2, #0
20001b90:	609a      	str	r2, [r3, #8]
                /* Next read transaction will result in slave's transmit buffer
                 * being sent from the first byte. */
                this_i2c->slave_tx_idx = 0u;
20001b92:	687b      	ldr	r3, [r7, #4]
20001b94:	f04f 0200 	mov.w	r2, #0
20001b98:	64da      	str	r2, [r3, #76]	; 0x4c
            }
            break;
20001b9a:	e049      	b.n	20001c30 <mss_i2c_isr+0x8d4>
        case ST_SLAVE_RNACK:    /* Data byte has been transmitted; not-ACK has been received. */
        case ST_FINAL: /* Last Data byte tx'ed, ACK received */
            /* We assume that the transaction will be stopped by the master.
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte. */
            this_i2c->slave_tx_idx = 0u;
20001b9c:	687b      	ldr	r3, [r7, #4]
20001b9e:	f04f 0200 	mov.w	r2, #0
20001ba2:	64da      	str	r2, [r3, #76]	; 0x4c
            this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20001ba4:	687b      	ldr	r3, [r7, #4]
20001ba6:	699b      	ldr	r3, [r3, #24]
20001ba8:	f04f 0201 	mov.w	r2, #1
20001bac:	609a      	str	r2, [r3, #8]

            /*  Mark previous state as complete */
            this_i2c->slave_status = MSS_I2C_SUCCESS;
20001bae:	687b      	ldr	r3, [r7, #4]
20001bb0:	f04f 0200 	mov.w	r2, #0
20001bb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
20001bb8:	687b      	ldr	r3, [r7, #4]
20001bba:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
20001bbe:	2b00      	cmp	r3, #0
20001bc0:	d004      	beq.n	20001bcc <mss_i2c_isr+0x870>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
20001bc2:	687b      	ldr	r3, [r7, #4]
20001bc4:	699b      	ldr	r3, [r3, #24]
20001bc6:	f04f 0201 	mov.w	r2, #1
20001bca:	615a      	str	r2, [r3, #20]

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20001bcc:	687b      	ldr	r3, [r7, #4]
20001bce:	f04f 0200 	mov.w	r2, #0
20001bd2:	721a      	strb	r2, [r3, #8]
            break;
20001bd4:	e02c      	b.n	20001c30 <mss_i2c_isr+0x8d4>
        case ST_RESET_ACTIVATED:
        case ST_BUS_ERROR: /* Bus error during MST or selected slave modes */
        default:
            /* Some undefined state has encountered. Clear Start bit to make
             * sure, next good transaction happen */
            this_i2c->hw_reg_bit->CTRL_STA = 0x00u;
20001bd6:	687b      	ldr	r3, [r7, #4]
20001bd8:	699b      	ldr	r3, [r3, #24]
20001bda:	f04f 0200 	mov.w	r2, #0
20001bde:	615a      	str	r2, [r3, #20]
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20001be0:	687b      	ldr	r3, [r7, #4]
20001be2:	f04f 0200 	mov.w	r2, #0
20001be6:	721a      	strb	r2, [r3, #8]
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
20001be8:	687b      	ldr	r3, [r7, #4]
20001bea:	f04f 0200 	mov.w	r2, #0
20001bee:	64da      	str	r2, [r3, #76]	; 0x4c
            /*
             * Clear statuses to I2C_FAILED only if there was an operation in progress.
             */
            if(MSS_I2C_IN_PROGRESS == this_i2c->master_status)
20001bf0:	687b      	ldr	r3, [r7, #4]
20001bf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
20001bf6:	b2db      	uxtb	r3, r3
20001bf8:	2b01      	cmp	r3, #1
20001bfa:	d104      	bne.n	20001c06 <mss_i2c_isr+0x8aa>
            {
                this_i2c->master_status = MSS_I2C_FAILED;
20001bfc:	687b      	ldr	r3, [r7, #4]
20001bfe:	f04f 0202 	mov.w	r2, #2
20001c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            }

            if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
20001c06:	687b      	ldr	r3, [r7, #4]
20001c08:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
20001c0c:	b2db      	uxtb	r3, r3
20001c0e:	2b01      	cmp	r3, #1
20001c10:	d10e      	bne.n	20001c30 <mss_i2c_isr+0x8d4>
            {
                this_i2c->slave_status = MSS_I2C_FAILED;
20001c12:	687b      	ldr	r3, [r7, #4]
20001c14:	f04f 0202 	mov.w	r2, #2
20001c18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
20001c1c:	e008      	b.n	20001c30 <mss_i2c_isr+0x8d4>
             */
            if(this_i2c->transaction != this_i2c->pending_transaction)
            {
                this_i2c->transaction = this_i2c->pending_transaction;
            }
            break;
20001c1e:	bf00      	nop
20001c20:	e006      	b.n	20001c30 <mss_i2c_isr+0x8d4>
            {
                /* If we're at the second last byte, let's set AA to 0 so
                 * we return a NACK at the last byte. */
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
            }
            break;
20001c22:	bf00      	nop
20001c24:	e004      	b.n	20001c30 <mss_i2c_isr+0x8d4>
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
            }
            break;
20001c26:	bf00      	nop
20001c28:	e002      	b.n	20001c30 <mss_i2c_isr+0x8d4>
            
            if (this_i2c->slave_rx_idx >= this_i2c->slave_rx_size)
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;   /* send a NACK when done (next reception) */
            }
            break;
20001c2a:	bf00      	nop
20001c2c:	e000      	b.n	20001c30 <mss_i2c_isr+0x8d4>
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
                /* Next read transaction will result in slave's transmit buffer
                 * being sent from the first byte. */
                this_i2c->slave_tx_idx = 0u;
            }
            break;
20001c2e:	bf00      	nop


            break;
    }
    
    if ( clear_irq )
20001c30:	7bbb      	ldrb	r3, [r7, #14]
20001c32:	2b00      	cmp	r3, #0
20001c34:	d004      	beq.n	20001c40 <mss_i2c_isr+0x8e4>
    {
        /* clear interrupt. */
        this_i2c->hw_reg_bit->CTRL_SI = 0u;
20001c36:	687b      	ldr	r3, [r7, #4]
20001c38:	699b      	ldr	r3, [r3, #24]
20001c3a:	f04f 0200 	mov.w	r2, #0
20001c3e:	60da      	str	r2, [r3, #12]
    }
    
    /* Read the status register to ensure the last I2C registers write took place
     * in a system built around a bus making use of posted writes. */
    status = this_i2c->hw_reg->STATUS;
20001c40:	687b      	ldr	r3, [r7, #4]
20001c42:	695b      	ldr	r3, [r3, #20]
20001c44:	791b      	ldrb	r3, [r3, #4]
20001c46:	72fb      	strb	r3, [r7, #11]
}
20001c48:	f107 0710 	add.w	r7, r7, #16
20001c4c:	46bd      	mov	sp, r7
20001c4e:	bd80      	pop	{r7, pc}

20001c50 <disable_interrupts>:
}
/*------------------------------------------------------------------------------
 *
 */
static uint32_t disable_interrupts( void )
{
20001c50:	b580      	push	{r7, lr}
20001c52:	b082      	sub	sp, #8
20001c54:	af00      	add	r7, sp, #0
    uint32_t primask;
    primask = __get_PRIMASK();
20001c56:	f000 f845 	bl	20001ce4 <__get_PRIMASK>
20001c5a:	4603      	mov	r3, r0
20001c5c:	607b      	str	r3, [r7, #4]
    __set_PRIMASK(1u);
20001c5e:	f04f 0001 	mov.w	r0, #1
20001c62:	f000 f84f 	bl	20001d04 <__set_PRIMASK>
    return primask;
20001c66:	687b      	ldr	r3, [r7, #4]
}
20001c68:	4618      	mov	r0, r3
20001c6a:	f107 0708 	add.w	r7, r7, #8
20001c6e:	46bd      	mov	sp, r7
20001c70:	bd80      	pop	{r7, pc}
20001c72:	bf00      	nop

20001c74 <restore_interrupts>:

/*------------------------------------------------------------------------------
 *
 */
static void restore_interrupts( uint32_t primask )
{
20001c74:	b580      	push	{r7, lr}
20001c76:	b082      	sub	sp, #8
20001c78:	af00      	add	r7, sp, #0
20001c7a:	6078      	str	r0, [r7, #4]
    __set_PRIMASK( primask );
20001c7c:	6878      	ldr	r0, [r7, #4]
20001c7e:	f000 f841 	bl	20001d04 <__set_PRIMASK>
}
20001c82:	f107 0708 	add.w	r7, r7, #8
20001c86:	46bd      	mov	sp, r7
20001c88:	bd80      	pop	{r7, pc}
20001c8a:	bf00      	nop

20001c8c <I2C0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void I2C0_IRQHandler( void )
#else
void I2C0_IRQHandler( void )
#endif
{
20001c8c:	4668      	mov	r0, sp
20001c8e:	f020 0107 	bic.w	r1, r0, #7
20001c92:	468d      	mov	sp, r1
20001c94:	b589      	push	{r0, r3, r7, lr}
20001c96:	af00      	add	r7, sp, #0
    mss_i2c_isr( &g_mss_i2c0 );
20001c98:	f642 5088 	movw	r0, #11656	; 0x2d88
20001c9c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001ca0:	f7ff fb5c 	bl	2000135c <mss_i2c_isr>
    NVIC_ClearPendingIRQ( I2C0_IRQn );
20001ca4:	f04f 000e 	mov.w	r0, #14
20001ca8:	f7ff f936 	bl	20000f18 <NVIC_ClearPendingIRQ>
}
20001cac:	46bd      	mov	sp, r7
20001cae:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001cb2:	4685      	mov	sp, r0
20001cb4:	4770      	bx	lr
20001cb6:	bf00      	nop

20001cb8 <I2C1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void I2C1_IRQHandler( void )
#else
void I2C1_IRQHandler( void )
#endif
{
20001cb8:	4668      	mov	r0, sp
20001cba:	f020 0107 	bic.w	r1, r0, #7
20001cbe:	468d      	mov	sp, r1
20001cc0:	b589      	push	{r0, r3, r7, lr}
20001cc2:	af00      	add	r7, sp, #0
    mss_i2c_isr( &g_mss_i2c1 );
20001cc4:	f642 50fc 	movw	r0, #11772	; 0x2dfc
20001cc8:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001ccc:	f7ff fb46 	bl	2000135c <mss_i2c_isr>
    NVIC_ClearPendingIRQ( I2C1_IRQn );
20001cd0:	f04f 0011 	mov.w	r0, #17
20001cd4:	f7ff f920 	bl	20000f18 <NVIC_ClearPendingIRQ>
}
20001cd8:	46bd      	mov	sp, r7
20001cda:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20001cde:	4685      	mov	sp, r0
20001ce0:	4770      	bx	lr
20001ce2:	bf00      	nop

20001ce4 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
20001ce4:	b480      	push	{r7}
20001ce6:	b083      	sub	sp, #12
20001ce8:	af00      	add	r7, sp, #0
  uint32_t result=0;
20001cea:	f04f 0300 	mov.w	r3, #0
20001cee:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
20001cf0:	f3ef 8310 	mrs	r3, PRIMASK
20001cf4:	607b      	str	r3, [r7, #4]
  return(result);
20001cf6:	687b      	ldr	r3, [r7, #4]
}
20001cf8:	4618      	mov	r0, r3
20001cfa:	f107 070c 	add.w	r7, r7, #12
20001cfe:	46bd      	mov	sp, r7
20001d00:	bc80      	pop	{r7}
20001d02:	4770      	bx	lr

20001d04 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
20001d04:	b480      	push	{r7}
20001d06:	b083      	sub	sp, #12
20001d08:	af00      	add	r7, sp, #0
20001d0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
20001d0c:	687b      	ldr	r3, [r7, #4]
20001d0e:	f383 8810 	msr	PRIMASK, r3
}
20001d12:	f107 070c 	add.w	r7, r7, #12
20001d16:	46bd      	mov	sp, r7
20001d18:	bc80      	pop	{r7}
20001d1a:	4770      	bx	lr

20001d1c <SystemInit>:

/***************************************************************************//**
 * See system_a2fxxxm3f.h for details.
 */
void SystemInit(void)
{
20001d1c:	b480      	push	{r7}
20001d1e:	af00      	add	r7, sp, #0
    /*
     * Do not make use of global variables or make any asumptions regarding
     * memory content if modifying this function. The memory content has not been
     * initialised by the time this function is called by the start-up code.
     */
}
20001d20:	46bd      	mov	sp, r7
20001d22:	bc80      	pop	{r7}
20001d24:	4770      	bx	lr
20001d26:	bf00      	nop

20001d28 <__aeabi_drsub>:
20001d28:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
20001d2c:	e002      	b.n	20001d34 <__adddf3>
20001d2e:	bf00      	nop

20001d30 <__aeabi_dsub>:
20001d30:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

20001d34 <__adddf3>:
20001d34:	b530      	push	{r4, r5, lr}
20001d36:	ea4f 0441 	mov.w	r4, r1, lsl #1
20001d3a:	ea4f 0543 	mov.w	r5, r3, lsl #1
20001d3e:	ea94 0f05 	teq	r4, r5
20001d42:	bf08      	it	eq
20001d44:	ea90 0f02 	teqeq	r0, r2
20001d48:	bf1f      	itttt	ne
20001d4a:	ea54 0c00 	orrsne.w	ip, r4, r0
20001d4e:	ea55 0c02 	orrsne.w	ip, r5, r2
20001d52:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
20001d56:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
20001d5a:	f000 80e2 	beq.w	20001f22 <__adddf3+0x1ee>
20001d5e:	ea4f 5454 	mov.w	r4, r4, lsr #21
20001d62:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
20001d66:	bfb8      	it	lt
20001d68:	426d      	neglt	r5, r5
20001d6a:	dd0c      	ble.n	20001d86 <__adddf3+0x52>
20001d6c:	442c      	add	r4, r5
20001d6e:	ea80 0202 	eor.w	r2, r0, r2
20001d72:	ea81 0303 	eor.w	r3, r1, r3
20001d76:	ea82 0000 	eor.w	r0, r2, r0
20001d7a:	ea83 0101 	eor.w	r1, r3, r1
20001d7e:	ea80 0202 	eor.w	r2, r0, r2
20001d82:	ea81 0303 	eor.w	r3, r1, r3
20001d86:	2d36      	cmp	r5, #54	; 0x36
20001d88:	bf88      	it	hi
20001d8a:	bd30      	pophi	{r4, r5, pc}
20001d8c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
20001d90:	ea4f 3101 	mov.w	r1, r1, lsl #12
20001d94:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
20001d98:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
20001d9c:	d002      	beq.n	20001da4 <__adddf3+0x70>
20001d9e:	4240      	negs	r0, r0
20001da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
20001da4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
20001da8:	ea4f 3303 	mov.w	r3, r3, lsl #12
20001dac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
20001db0:	d002      	beq.n	20001db8 <__adddf3+0x84>
20001db2:	4252      	negs	r2, r2
20001db4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
20001db8:	ea94 0f05 	teq	r4, r5
20001dbc:	f000 80a7 	beq.w	20001f0e <__adddf3+0x1da>
20001dc0:	f1a4 0401 	sub.w	r4, r4, #1
20001dc4:	f1d5 0e20 	rsbs	lr, r5, #32
20001dc8:	db0d      	blt.n	20001de6 <__adddf3+0xb2>
20001dca:	fa02 fc0e 	lsl.w	ip, r2, lr
20001dce:	fa22 f205 	lsr.w	r2, r2, r5
20001dd2:	1880      	adds	r0, r0, r2
20001dd4:	f141 0100 	adc.w	r1, r1, #0
20001dd8:	fa03 f20e 	lsl.w	r2, r3, lr
20001ddc:	1880      	adds	r0, r0, r2
20001dde:	fa43 f305 	asr.w	r3, r3, r5
20001de2:	4159      	adcs	r1, r3
20001de4:	e00e      	b.n	20001e04 <__adddf3+0xd0>
20001de6:	f1a5 0520 	sub.w	r5, r5, #32
20001dea:	f10e 0e20 	add.w	lr, lr, #32
20001dee:	2a01      	cmp	r2, #1
20001df0:	fa03 fc0e 	lsl.w	ip, r3, lr
20001df4:	bf28      	it	cs
20001df6:	f04c 0c02 	orrcs.w	ip, ip, #2
20001dfa:	fa43 f305 	asr.w	r3, r3, r5
20001dfe:	18c0      	adds	r0, r0, r3
20001e00:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
20001e04:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
20001e08:	d507      	bpl.n	20001e1a <__adddf3+0xe6>
20001e0a:	f04f 0e00 	mov.w	lr, #0
20001e0e:	f1dc 0c00 	rsbs	ip, ip, #0
20001e12:	eb7e 0000 	sbcs.w	r0, lr, r0
20001e16:	eb6e 0101 	sbc.w	r1, lr, r1
20001e1a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
20001e1e:	d31b      	bcc.n	20001e58 <__adddf3+0x124>
20001e20:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
20001e24:	d30c      	bcc.n	20001e40 <__adddf3+0x10c>
20001e26:	0849      	lsrs	r1, r1, #1
20001e28:	ea5f 0030 	movs.w	r0, r0, rrx
20001e2c:	ea4f 0c3c 	mov.w	ip, ip, rrx
20001e30:	f104 0401 	add.w	r4, r4, #1
20001e34:	ea4f 5244 	mov.w	r2, r4, lsl #21
20001e38:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
20001e3c:	f080 809a 	bcs.w	20001f74 <__adddf3+0x240>
20001e40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
20001e44:	bf08      	it	eq
20001e46:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
20001e4a:	f150 0000 	adcs.w	r0, r0, #0
20001e4e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
20001e52:	ea41 0105 	orr.w	r1, r1, r5
20001e56:	bd30      	pop	{r4, r5, pc}
20001e58:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
20001e5c:	4140      	adcs	r0, r0
20001e5e:	eb41 0101 	adc.w	r1, r1, r1
20001e62:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
20001e66:	f1a4 0401 	sub.w	r4, r4, #1
20001e6a:	d1e9      	bne.n	20001e40 <__adddf3+0x10c>
20001e6c:	f091 0f00 	teq	r1, #0
20001e70:	bf04      	itt	eq
20001e72:	4601      	moveq	r1, r0
20001e74:	2000      	moveq	r0, #0
20001e76:	fab1 f381 	clz	r3, r1
20001e7a:	bf08      	it	eq
20001e7c:	3320      	addeq	r3, #32
20001e7e:	f1a3 030b 	sub.w	r3, r3, #11
20001e82:	f1b3 0220 	subs.w	r2, r3, #32
20001e86:	da0c      	bge.n	20001ea2 <__adddf3+0x16e>
20001e88:	320c      	adds	r2, #12
20001e8a:	dd08      	ble.n	20001e9e <__adddf3+0x16a>
20001e8c:	f102 0c14 	add.w	ip, r2, #20
20001e90:	f1c2 020c 	rsb	r2, r2, #12
20001e94:	fa01 f00c 	lsl.w	r0, r1, ip
20001e98:	fa21 f102 	lsr.w	r1, r1, r2
20001e9c:	e00c      	b.n	20001eb8 <__adddf3+0x184>
20001e9e:	f102 0214 	add.w	r2, r2, #20
20001ea2:	bfd8      	it	le
20001ea4:	f1c2 0c20 	rsble	ip, r2, #32
20001ea8:	fa01 f102 	lsl.w	r1, r1, r2
20001eac:	fa20 fc0c 	lsr.w	ip, r0, ip
20001eb0:	bfdc      	itt	le
20001eb2:	ea41 010c 	orrle.w	r1, r1, ip
20001eb6:	4090      	lslle	r0, r2
20001eb8:	1ae4      	subs	r4, r4, r3
20001eba:	bfa2      	ittt	ge
20001ebc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
20001ec0:	4329      	orrge	r1, r5
20001ec2:	bd30      	popge	{r4, r5, pc}
20001ec4:	ea6f 0404 	mvn.w	r4, r4
20001ec8:	3c1f      	subs	r4, #31
20001eca:	da1c      	bge.n	20001f06 <__adddf3+0x1d2>
20001ecc:	340c      	adds	r4, #12
20001ece:	dc0e      	bgt.n	20001eee <__adddf3+0x1ba>
20001ed0:	f104 0414 	add.w	r4, r4, #20
20001ed4:	f1c4 0220 	rsb	r2, r4, #32
20001ed8:	fa20 f004 	lsr.w	r0, r0, r4
20001edc:	fa01 f302 	lsl.w	r3, r1, r2
20001ee0:	ea40 0003 	orr.w	r0, r0, r3
20001ee4:	fa21 f304 	lsr.w	r3, r1, r4
20001ee8:	ea45 0103 	orr.w	r1, r5, r3
20001eec:	bd30      	pop	{r4, r5, pc}
20001eee:	f1c4 040c 	rsb	r4, r4, #12
20001ef2:	f1c4 0220 	rsb	r2, r4, #32
20001ef6:	fa20 f002 	lsr.w	r0, r0, r2
20001efa:	fa01 f304 	lsl.w	r3, r1, r4
20001efe:	ea40 0003 	orr.w	r0, r0, r3
20001f02:	4629      	mov	r1, r5
20001f04:	bd30      	pop	{r4, r5, pc}
20001f06:	fa21 f004 	lsr.w	r0, r1, r4
20001f0a:	4629      	mov	r1, r5
20001f0c:	bd30      	pop	{r4, r5, pc}
20001f0e:	f094 0f00 	teq	r4, #0
20001f12:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
20001f16:	bf06      	itte	eq
20001f18:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
20001f1c:	3401      	addeq	r4, #1
20001f1e:	3d01      	subne	r5, #1
20001f20:	e74e      	b.n	20001dc0 <__adddf3+0x8c>
20001f22:	ea7f 5c64 	mvns.w	ip, r4, asr #21
20001f26:	bf18      	it	ne
20001f28:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
20001f2c:	d029      	beq.n	20001f82 <__adddf3+0x24e>
20001f2e:	ea94 0f05 	teq	r4, r5
20001f32:	bf08      	it	eq
20001f34:	ea90 0f02 	teqeq	r0, r2
20001f38:	d005      	beq.n	20001f46 <__adddf3+0x212>
20001f3a:	ea54 0c00 	orrs.w	ip, r4, r0
20001f3e:	bf04      	itt	eq
20001f40:	4619      	moveq	r1, r3
20001f42:	4610      	moveq	r0, r2
20001f44:	bd30      	pop	{r4, r5, pc}
20001f46:	ea91 0f03 	teq	r1, r3
20001f4a:	bf1e      	ittt	ne
20001f4c:	2100      	movne	r1, #0
20001f4e:	2000      	movne	r0, #0
20001f50:	bd30      	popne	{r4, r5, pc}
20001f52:	ea5f 5c54 	movs.w	ip, r4, lsr #21
20001f56:	d105      	bne.n	20001f64 <__adddf3+0x230>
20001f58:	0040      	lsls	r0, r0, #1
20001f5a:	4149      	adcs	r1, r1
20001f5c:	bf28      	it	cs
20001f5e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
20001f62:	bd30      	pop	{r4, r5, pc}
20001f64:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
20001f68:	bf3c      	itt	cc
20001f6a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
20001f6e:	bd30      	popcc	{r4, r5, pc}
20001f70:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
20001f74:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
20001f78:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
20001f7c:	f04f 0000 	mov.w	r0, #0
20001f80:	bd30      	pop	{r4, r5, pc}
20001f82:	ea7f 5c64 	mvns.w	ip, r4, asr #21
20001f86:	bf1a      	itte	ne
20001f88:	4619      	movne	r1, r3
20001f8a:	4610      	movne	r0, r2
20001f8c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
20001f90:	bf1c      	itt	ne
20001f92:	460b      	movne	r3, r1
20001f94:	4602      	movne	r2, r0
20001f96:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
20001f9a:	bf06      	itte	eq
20001f9c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
20001fa0:	ea91 0f03 	teqeq	r1, r3
20001fa4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
20001fa8:	bd30      	pop	{r4, r5, pc}
20001faa:	bf00      	nop

20001fac <__aeabi_ui2d>:
20001fac:	f090 0f00 	teq	r0, #0
20001fb0:	bf04      	itt	eq
20001fb2:	2100      	moveq	r1, #0
20001fb4:	4770      	bxeq	lr
20001fb6:	b530      	push	{r4, r5, lr}
20001fb8:	f44f 6480 	mov.w	r4, #1024	; 0x400
20001fbc:	f104 0432 	add.w	r4, r4, #50	; 0x32
20001fc0:	f04f 0500 	mov.w	r5, #0
20001fc4:	f04f 0100 	mov.w	r1, #0
20001fc8:	e750      	b.n	20001e6c <__adddf3+0x138>
20001fca:	bf00      	nop

20001fcc <__aeabi_i2d>:
20001fcc:	f090 0f00 	teq	r0, #0
20001fd0:	bf04      	itt	eq
20001fd2:	2100      	moveq	r1, #0
20001fd4:	4770      	bxeq	lr
20001fd6:	b530      	push	{r4, r5, lr}
20001fd8:	f44f 6480 	mov.w	r4, #1024	; 0x400
20001fdc:	f104 0432 	add.w	r4, r4, #50	; 0x32
20001fe0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
20001fe4:	bf48      	it	mi
20001fe6:	4240      	negmi	r0, r0
20001fe8:	f04f 0100 	mov.w	r1, #0
20001fec:	e73e      	b.n	20001e6c <__adddf3+0x138>
20001fee:	bf00      	nop

20001ff0 <__aeabi_f2d>:
20001ff0:	0042      	lsls	r2, r0, #1
20001ff2:	ea4f 01e2 	mov.w	r1, r2, asr #3
20001ff6:	ea4f 0131 	mov.w	r1, r1, rrx
20001ffa:	ea4f 7002 	mov.w	r0, r2, lsl #28
20001ffe:	bf1f      	itttt	ne
20002000:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
20002004:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
20002008:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
2000200c:	4770      	bxne	lr
2000200e:	f092 0f00 	teq	r2, #0
20002012:	bf14      	ite	ne
20002014:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
20002018:	4770      	bxeq	lr
2000201a:	b530      	push	{r4, r5, lr}
2000201c:	f44f 7460 	mov.w	r4, #896	; 0x380
20002020:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
20002024:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
20002028:	e720      	b.n	20001e6c <__adddf3+0x138>
2000202a:	bf00      	nop

2000202c <__aeabi_ul2d>:
2000202c:	ea50 0201 	orrs.w	r2, r0, r1
20002030:	bf08      	it	eq
20002032:	4770      	bxeq	lr
20002034:	b530      	push	{r4, r5, lr}
20002036:	f04f 0500 	mov.w	r5, #0
2000203a:	e00a      	b.n	20002052 <__aeabi_l2d+0x16>

2000203c <__aeabi_l2d>:
2000203c:	ea50 0201 	orrs.w	r2, r0, r1
20002040:	bf08      	it	eq
20002042:	4770      	bxeq	lr
20002044:	b530      	push	{r4, r5, lr}
20002046:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
2000204a:	d502      	bpl.n	20002052 <__aeabi_l2d+0x16>
2000204c:	4240      	negs	r0, r0
2000204e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
20002052:	f44f 6480 	mov.w	r4, #1024	; 0x400
20002056:	f104 0432 	add.w	r4, r4, #50	; 0x32
2000205a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
2000205e:	f43f aedc 	beq.w	20001e1a <__adddf3+0xe6>
20002062:	f04f 0203 	mov.w	r2, #3
20002066:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
2000206a:	bf18      	it	ne
2000206c:	3203      	addne	r2, #3
2000206e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
20002072:	bf18      	it	ne
20002074:	3203      	addne	r2, #3
20002076:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
2000207a:	f1c2 0320 	rsb	r3, r2, #32
2000207e:	fa00 fc03 	lsl.w	ip, r0, r3
20002082:	fa20 f002 	lsr.w	r0, r0, r2
20002086:	fa01 fe03 	lsl.w	lr, r1, r3
2000208a:	ea40 000e 	orr.w	r0, r0, lr
2000208e:	fa21 f102 	lsr.w	r1, r1, r2
20002092:	4414      	add	r4, r2
20002094:	e6c1      	b.n	20001e1a <__adddf3+0xe6>
20002096:	bf00      	nop

20002098 <__aeabi_dmul>:
20002098:	b570      	push	{r4, r5, r6, lr}
2000209a:	f04f 0cff 	mov.w	ip, #255	; 0xff
2000209e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
200020a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
200020a6:	bf1d      	ittte	ne
200020a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
200020ac:	ea94 0f0c 	teqne	r4, ip
200020b0:	ea95 0f0c 	teqne	r5, ip
200020b4:	f000 f8de 	bleq	20002274 <__aeabi_dmul+0x1dc>
200020b8:	442c      	add	r4, r5
200020ba:	ea81 0603 	eor.w	r6, r1, r3
200020be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
200020c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
200020c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
200020ca:	bf18      	it	ne
200020cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
200020d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
200020d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
200020d8:	d038      	beq.n	2000214c <__aeabi_dmul+0xb4>
200020da:	fba0 ce02 	umull	ip, lr, r0, r2
200020de:	f04f 0500 	mov.w	r5, #0
200020e2:	fbe1 e502 	umlal	lr, r5, r1, r2
200020e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
200020ea:	fbe0 e503 	umlal	lr, r5, r0, r3
200020ee:	f04f 0600 	mov.w	r6, #0
200020f2:	fbe1 5603 	umlal	r5, r6, r1, r3
200020f6:	f09c 0f00 	teq	ip, #0
200020fa:	bf18      	it	ne
200020fc:	f04e 0e01 	orrne.w	lr, lr, #1
20002100:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
20002104:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
20002108:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
2000210c:	d204      	bcs.n	20002118 <__aeabi_dmul+0x80>
2000210e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
20002112:	416d      	adcs	r5, r5
20002114:	eb46 0606 	adc.w	r6, r6, r6
20002118:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
2000211c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
20002120:	ea4f 20c5 	mov.w	r0, r5, lsl #11
20002124:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
20002128:	ea4f 2ece 	mov.w	lr, lr, lsl #11
2000212c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
20002130:	bf88      	it	hi
20002132:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
20002136:	d81e      	bhi.n	20002176 <__aeabi_dmul+0xde>
20002138:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
2000213c:	bf08      	it	eq
2000213e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
20002142:	f150 0000 	adcs.w	r0, r0, #0
20002146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
2000214a:	bd70      	pop	{r4, r5, r6, pc}
2000214c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
20002150:	ea46 0101 	orr.w	r1, r6, r1
20002154:	ea40 0002 	orr.w	r0, r0, r2
20002158:	ea81 0103 	eor.w	r1, r1, r3
2000215c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
20002160:	bfc2      	ittt	gt
20002162:	ebd4 050c 	rsbsgt	r5, r4, ip
20002166:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
2000216a:	bd70      	popgt	{r4, r5, r6, pc}
2000216c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
20002170:	f04f 0e00 	mov.w	lr, #0
20002174:	3c01      	subs	r4, #1
20002176:	f300 80ab 	bgt.w	200022d0 <__aeabi_dmul+0x238>
2000217a:	f114 0f36 	cmn.w	r4, #54	; 0x36
2000217e:	bfde      	ittt	le
20002180:	2000      	movle	r0, #0
20002182:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
20002186:	bd70      	pople	{r4, r5, r6, pc}
20002188:	f1c4 0400 	rsb	r4, r4, #0
2000218c:	3c20      	subs	r4, #32
2000218e:	da35      	bge.n	200021fc <__aeabi_dmul+0x164>
20002190:	340c      	adds	r4, #12
20002192:	dc1b      	bgt.n	200021cc <__aeabi_dmul+0x134>
20002194:	f104 0414 	add.w	r4, r4, #20
20002198:	f1c4 0520 	rsb	r5, r4, #32
2000219c:	fa00 f305 	lsl.w	r3, r0, r5
200021a0:	fa20 f004 	lsr.w	r0, r0, r4
200021a4:	fa01 f205 	lsl.w	r2, r1, r5
200021a8:	ea40 0002 	orr.w	r0, r0, r2
200021ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
200021b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
200021b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
200021b8:	fa21 f604 	lsr.w	r6, r1, r4
200021bc:	eb42 0106 	adc.w	r1, r2, r6
200021c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
200021c4:	bf08      	it	eq
200021c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
200021ca:	bd70      	pop	{r4, r5, r6, pc}
200021cc:	f1c4 040c 	rsb	r4, r4, #12
200021d0:	f1c4 0520 	rsb	r5, r4, #32
200021d4:	fa00 f304 	lsl.w	r3, r0, r4
200021d8:	fa20 f005 	lsr.w	r0, r0, r5
200021dc:	fa01 f204 	lsl.w	r2, r1, r4
200021e0:	ea40 0002 	orr.w	r0, r0, r2
200021e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
200021e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
200021ec:	f141 0100 	adc.w	r1, r1, #0
200021f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
200021f4:	bf08      	it	eq
200021f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
200021fa:	bd70      	pop	{r4, r5, r6, pc}
200021fc:	f1c4 0520 	rsb	r5, r4, #32
20002200:	fa00 f205 	lsl.w	r2, r0, r5
20002204:	ea4e 0e02 	orr.w	lr, lr, r2
20002208:	fa20 f304 	lsr.w	r3, r0, r4
2000220c:	fa01 f205 	lsl.w	r2, r1, r5
20002210:	ea43 0302 	orr.w	r3, r3, r2
20002214:	fa21 f004 	lsr.w	r0, r1, r4
20002218:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
2000221c:	fa21 f204 	lsr.w	r2, r1, r4
20002220:	ea20 0002 	bic.w	r0, r0, r2
20002224:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
20002228:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
2000222c:	bf08      	it	eq
2000222e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
20002232:	bd70      	pop	{r4, r5, r6, pc}
20002234:	f094 0f00 	teq	r4, #0
20002238:	d10f      	bne.n	2000225a <__aeabi_dmul+0x1c2>
2000223a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
2000223e:	0040      	lsls	r0, r0, #1
20002240:	eb41 0101 	adc.w	r1, r1, r1
20002244:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
20002248:	bf08      	it	eq
2000224a:	3c01      	subeq	r4, #1
2000224c:	d0f7      	beq.n	2000223e <__aeabi_dmul+0x1a6>
2000224e:	ea41 0106 	orr.w	r1, r1, r6
20002252:	f095 0f00 	teq	r5, #0
20002256:	bf18      	it	ne
20002258:	4770      	bxne	lr
2000225a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
2000225e:	0052      	lsls	r2, r2, #1
20002260:	eb43 0303 	adc.w	r3, r3, r3
20002264:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
20002268:	bf08      	it	eq
2000226a:	3d01      	subeq	r5, #1
2000226c:	d0f7      	beq.n	2000225e <__aeabi_dmul+0x1c6>
2000226e:	ea43 0306 	orr.w	r3, r3, r6
20002272:	4770      	bx	lr
20002274:	ea94 0f0c 	teq	r4, ip
20002278:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
2000227c:	bf18      	it	ne
2000227e:	ea95 0f0c 	teqne	r5, ip
20002282:	d00c      	beq.n	2000229e <__aeabi_dmul+0x206>
20002284:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
20002288:	bf18      	it	ne
2000228a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
2000228e:	d1d1      	bne.n	20002234 <__aeabi_dmul+0x19c>
20002290:	ea81 0103 	eor.w	r1, r1, r3
20002294:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
20002298:	f04f 0000 	mov.w	r0, #0
2000229c:	bd70      	pop	{r4, r5, r6, pc}
2000229e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
200022a2:	bf06      	itte	eq
200022a4:	4610      	moveq	r0, r2
200022a6:	4619      	moveq	r1, r3
200022a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
200022ac:	d019      	beq.n	200022e2 <__aeabi_dmul+0x24a>
200022ae:	ea94 0f0c 	teq	r4, ip
200022b2:	d102      	bne.n	200022ba <__aeabi_dmul+0x222>
200022b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
200022b8:	d113      	bne.n	200022e2 <__aeabi_dmul+0x24a>
200022ba:	ea95 0f0c 	teq	r5, ip
200022be:	d105      	bne.n	200022cc <__aeabi_dmul+0x234>
200022c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
200022c4:	bf1c      	itt	ne
200022c6:	4610      	movne	r0, r2
200022c8:	4619      	movne	r1, r3
200022ca:	d10a      	bne.n	200022e2 <__aeabi_dmul+0x24a>
200022cc:	ea81 0103 	eor.w	r1, r1, r3
200022d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
200022d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
200022d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
200022dc:	f04f 0000 	mov.w	r0, #0
200022e0:	bd70      	pop	{r4, r5, r6, pc}
200022e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
200022e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
200022ea:	bd70      	pop	{r4, r5, r6, pc}

200022ec <__aeabi_ddiv>:
200022ec:	b570      	push	{r4, r5, r6, lr}
200022ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
200022f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
200022f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
200022fa:	bf1d      	ittte	ne
200022fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
20002300:	ea94 0f0c 	teqne	r4, ip
20002304:	ea95 0f0c 	teqne	r5, ip
20002308:	f000 f8a7 	bleq	2000245a <__aeabi_ddiv+0x16e>
2000230c:	eba4 0405 	sub.w	r4, r4, r5
20002310:	ea81 0e03 	eor.w	lr, r1, r3
20002314:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
20002318:	ea4f 3101 	mov.w	r1, r1, lsl #12
2000231c:	f000 8088 	beq.w	20002430 <__aeabi_ddiv+0x144>
20002320:	ea4f 3303 	mov.w	r3, r3, lsl #12
20002324:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
20002328:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
2000232c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
20002330:	ea4f 2202 	mov.w	r2, r2, lsl #8
20002334:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
20002338:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
2000233c:	ea4f 2600 	mov.w	r6, r0, lsl #8
20002340:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
20002344:	429d      	cmp	r5, r3
20002346:	bf08      	it	eq
20002348:	4296      	cmpeq	r6, r2
2000234a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
2000234e:	f504 7440 	add.w	r4, r4, #768	; 0x300
20002352:	d202      	bcs.n	2000235a <__aeabi_ddiv+0x6e>
20002354:	085b      	lsrs	r3, r3, #1
20002356:	ea4f 0232 	mov.w	r2, r2, rrx
2000235a:	1ab6      	subs	r6, r6, r2
2000235c:	eb65 0503 	sbc.w	r5, r5, r3
20002360:	085b      	lsrs	r3, r3, #1
20002362:	ea4f 0232 	mov.w	r2, r2, rrx
20002366:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
2000236a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
2000236e:	ebb6 0e02 	subs.w	lr, r6, r2
20002372:	eb75 0e03 	sbcs.w	lr, r5, r3
20002376:	bf22      	ittt	cs
20002378:	1ab6      	subcs	r6, r6, r2
2000237a:	4675      	movcs	r5, lr
2000237c:	ea40 000c 	orrcs.w	r0, r0, ip
20002380:	085b      	lsrs	r3, r3, #1
20002382:	ea4f 0232 	mov.w	r2, r2, rrx
20002386:	ebb6 0e02 	subs.w	lr, r6, r2
2000238a:	eb75 0e03 	sbcs.w	lr, r5, r3
2000238e:	bf22      	ittt	cs
20002390:	1ab6      	subcs	r6, r6, r2
20002392:	4675      	movcs	r5, lr
20002394:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
20002398:	085b      	lsrs	r3, r3, #1
2000239a:	ea4f 0232 	mov.w	r2, r2, rrx
2000239e:	ebb6 0e02 	subs.w	lr, r6, r2
200023a2:	eb75 0e03 	sbcs.w	lr, r5, r3
200023a6:	bf22      	ittt	cs
200023a8:	1ab6      	subcs	r6, r6, r2
200023aa:	4675      	movcs	r5, lr
200023ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
200023b0:	085b      	lsrs	r3, r3, #1
200023b2:	ea4f 0232 	mov.w	r2, r2, rrx
200023b6:	ebb6 0e02 	subs.w	lr, r6, r2
200023ba:	eb75 0e03 	sbcs.w	lr, r5, r3
200023be:	bf22      	ittt	cs
200023c0:	1ab6      	subcs	r6, r6, r2
200023c2:	4675      	movcs	r5, lr
200023c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
200023c8:	ea55 0e06 	orrs.w	lr, r5, r6
200023cc:	d018      	beq.n	20002400 <__aeabi_ddiv+0x114>
200023ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
200023d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
200023d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
200023da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
200023de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
200023e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
200023e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
200023ea:	d1c0      	bne.n	2000236e <__aeabi_ddiv+0x82>
200023ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
200023f0:	d10b      	bne.n	2000240a <__aeabi_ddiv+0x11e>
200023f2:	ea41 0100 	orr.w	r1, r1, r0
200023f6:	f04f 0000 	mov.w	r0, #0
200023fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
200023fe:	e7b6      	b.n	2000236e <__aeabi_ddiv+0x82>
20002400:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
20002404:	bf04      	itt	eq
20002406:	4301      	orreq	r1, r0
20002408:	2000      	moveq	r0, #0
2000240a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
2000240e:	bf88      	it	hi
20002410:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
20002414:	f63f aeaf 	bhi.w	20002176 <__aeabi_dmul+0xde>
20002418:	ebb5 0c03 	subs.w	ip, r5, r3
2000241c:	bf04      	itt	eq
2000241e:	ebb6 0c02 	subseq.w	ip, r6, r2
20002422:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
20002426:	f150 0000 	adcs.w	r0, r0, #0
2000242a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
2000242e:	bd70      	pop	{r4, r5, r6, pc}
20002430:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
20002434:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
20002438:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
2000243c:	bfc2      	ittt	gt
2000243e:	ebd4 050c 	rsbsgt	r5, r4, ip
20002442:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
20002446:	bd70      	popgt	{r4, r5, r6, pc}
20002448:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
2000244c:	f04f 0e00 	mov.w	lr, #0
20002450:	3c01      	subs	r4, #1
20002452:	e690      	b.n	20002176 <__aeabi_dmul+0xde>
20002454:	ea45 0e06 	orr.w	lr, r5, r6
20002458:	e68d      	b.n	20002176 <__aeabi_dmul+0xde>
2000245a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
2000245e:	ea94 0f0c 	teq	r4, ip
20002462:	bf08      	it	eq
20002464:	ea95 0f0c 	teqeq	r5, ip
20002468:	f43f af3b 	beq.w	200022e2 <__aeabi_dmul+0x24a>
2000246c:	ea94 0f0c 	teq	r4, ip
20002470:	d10a      	bne.n	20002488 <__aeabi_ddiv+0x19c>
20002472:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
20002476:	f47f af34 	bne.w	200022e2 <__aeabi_dmul+0x24a>
2000247a:	ea95 0f0c 	teq	r5, ip
2000247e:	f47f af25 	bne.w	200022cc <__aeabi_dmul+0x234>
20002482:	4610      	mov	r0, r2
20002484:	4619      	mov	r1, r3
20002486:	e72c      	b.n	200022e2 <__aeabi_dmul+0x24a>
20002488:	ea95 0f0c 	teq	r5, ip
2000248c:	d106      	bne.n	2000249c <__aeabi_ddiv+0x1b0>
2000248e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
20002492:	f43f aefd 	beq.w	20002290 <__aeabi_dmul+0x1f8>
20002496:	4610      	mov	r0, r2
20002498:	4619      	mov	r1, r3
2000249a:	e722      	b.n	200022e2 <__aeabi_dmul+0x24a>
2000249c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
200024a0:	bf18      	it	ne
200024a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
200024a6:	f47f aec5 	bne.w	20002234 <__aeabi_dmul+0x19c>
200024aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
200024ae:	f47f af0d 	bne.w	200022cc <__aeabi_dmul+0x234>
200024b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
200024b6:	f47f aeeb 	bne.w	20002290 <__aeabi_dmul+0x1f8>
200024ba:	e712      	b.n	200022e2 <__aeabi_dmul+0x24a>

200024bc <__gedf2>:
200024bc:	f04f 3cff 	mov.w	ip, #4294967295
200024c0:	e006      	b.n	200024d0 <__cmpdf2+0x4>
200024c2:	bf00      	nop

200024c4 <__ledf2>:
200024c4:	f04f 0c01 	mov.w	ip, #1
200024c8:	e002      	b.n	200024d0 <__cmpdf2+0x4>
200024ca:	bf00      	nop

200024cc <__cmpdf2>:
200024cc:	f04f 0c01 	mov.w	ip, #1
200024d0:	f84d cd04 	str.w	ip, [sp, #-4]!
200024d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
200024d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
200024dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
200024e0:	bf18      	it	ne
200024e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
200024e6:	d01b      	beq.n	20002520 <__cmpdf2+0x54>
200024e8:	b001      	add	sp, #4
200024ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
200024ee:	bf0c      	ite	eq
200024f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
200024f4:	ea91 0f03 	teqne	r1, r3
200024f8:	bf02      	ittt	eq
200024fa:	ea90 0f02 	teqeq	r0, r2
200024fe:	2000      	moveq	r0, #0
20002500:	4770      	bxeq	lr
20002502:	f110 0f00 	cmn.w	r0, #0
20002506:	ea91 0f03 	teq	r1, r3
2000250a:	bf58      	it	pl
2000250c:	4299      	cmppl	r1, r3
2000250e:	bf08      	it	eq
20002510:	4290      	cmpeq	r0, r2
20002512:	bf2c      	ite	cs
20002514:	17d8      	asrcs	r0, r3, #31
20002516:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
2000251a:	f040 0001 	orr.w	r0, r0, #1
2000251e:	4770      	bx	lr
20002520:	ea4f 0c41 	mov.w	ip, r1, lsl #1
20002524:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
20002528:	d102      	bne.n	20002530 <__cmpdf2+0x64>
2000252a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
2000252e:	d107      	bne.n	20002540 <__cmpdf2+0x74>
20002530:	ea4f 0c43 	mov.w	ip, r3, lsl #1
20002534:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
20002538:	d1d6      	bne.n	200024e8 <__cmpdf2+0x1c>
2000253a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
2000253e:	d0d3      	beq.n	200024e8 <__cmpdf2+0x1c>
20002540:	f85d 0b04 	ldr.w	r0, [sp], #4
20002544:	4770      	bx	lr
20002546:	bf00      	nop

20002548 <__aeabi_cdrcmple>:
20002548:	4684      	mov	ip, r0
2000254a:	4610      	mov	r0, r2
2000254c:	4662      	mov	r2, ip
2000254e:	468c      	mov	ip, r1
20002550:	4619      	mov	r1, r3
20002552:	4663      	mov	r3, ip
20002554:	e000      	b.n	20002558 <__aeabi_cdcmpeq>
20002556:	bf00      	nop

20002558 <__aeabi_cdcmpeq>:
20002558:	b501      	push	{r0, lr}
2000255a:	f7ff ffb7 	bl	200024cc <__cmpdf2>
2000255e:	2800      	cmp	r0, #0
20002560:	bf48      	it	mi
20002562:	f110 0f00 	cmnmi.w	r0, #0
20002566:	bd01      	pop	{r0, pc}

20002568 <__aeabi_dcmpeq>:
20002568:	f84d ed08 	str.w	lr, [sp, #-8]!
2000256c:	f7ff fff4 	bl	20002558 <__aeabi_cdcmpeq>
20002570:	bf0c      	ite	eq
20002572:	2001      	moveq	r0, #1
20002574:	2000      	movne	r0, #0
20002576:	f85d fb08 	ldr.w	pc, [sp], #8
2000257a:	bf00      	nop

2000257c <__aeabi_dcmplt>:
2000257c:	f84d ed08 	str.w	lr, [sp, #-8]!
20002580:	f7ff ffea 	bl	20002558 <__aeabi_cdcmpeq>
20002584:	bf34      	ite	cc
20002586:	2001      	movcc	r0, #1
20002588:	2000      	movcs	r0, #0
2000258a:	f85d fb08 	ldr.w	pc, [sp], #8
2000258e:	bf00      	nop

20002590 <__aeabi_dcmple>:
20002590:	f84d ed08 	str.w	lr, [sp, #-8]!
20002594:	f7ff ffe0 	bl	20002558 <__aeabi_cdcmpeq>
20002598:	bf94      	ite	ls
2000259a:	2001      	movls	r0, #1
2000259c:	2000      	movhi	r0, #0
2000259e:	f85d fb08 	ldr.w	pc, [sp], #8
200025a2:	bf00      	nop

200025a4 <__aeabi_dcmpge>:
200025a4:	f84d ed08 	str.w	lr, [sp, #-8]!
200025a8:	f7ff ffce 	bl	20002548 <__aeabi_cdrcmple>
200025ac:	bf94      	ite	ls
200025ae:	2001      	movls	r0, #1
200025b0:	2000      	movhi	r0, #0
200025b2:	f85d fb08 	ldr.w	pc, [sp], #8
200025b6:	bf00      	nop

200025b8 <__aeabi_dcmpgt>:
200025b8:	f84d ed08 	str.w	lr, [sp, #-8]!
200025bc:	f7ff ffc4 	bl	20002548 <__aeabi_cdrcmple>
200025c0:	bf34      	ite	cc
200025c2:	2001      	movcc	r0, #1
200025c4:	2000      	movcs	r0, #0
200025c6:	f85d fb08 	ldr.w	pc, [sp], #8
200025ca:	bf00      	nop

200025cc <__aeabi_d2iz>:
200025cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
200025d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
200025d4:	d215      	bcs.n	20002602 <__aeabi_d2iz+0x36>
200025d6:	d511      	bpl.n	200025fc <__aeabi_d2iz+0x30>
200025d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
200025dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
200025e0:	d912      	bls.n	20002608 <__aeabi_d2iz+0x3c>
200025e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
200025e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
200025ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
200025ee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
200025f2:	fa23 f002 	lsr.w	r0, r3, r2
200025f6:	bf18      	it	ne
200025f8:	4240      	negne	r0, r0
200025fa:	4770      	bx	lr
200025fc:	f04f 0000 	mov.w	r0, #0
20002600:	4770      	bx	lr
20002602:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
20002606:	d105      	bne.n	20002614 <__aeabi_d2iz+0x48>
20002608:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
2000260c:	bf08      	it	eq
2000260e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
20002612:	4770      	bx	lr
20002614:	f04f 0000 	mov.w	r0, #0
20002618:	4770      	bx	lr
2000261a:	bf00      	nop

2000261c <__aeabi_frsub>:
2000261c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
20002620:	e002      	b.n	20002628 <__addsf3>
20002622:	bf00      	nop

20002624 <__aeabi_fsub>:
20002624:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

20002628 <__addsf3>:
20002628:	0042      	lsls	r2, r0, #1
2000262a:	bf1f      	itttt	ne
2000262c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
20002630:	ea92 0f03 	teqne	r2, r3
20002634:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
20002638:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
2000263c:	d06a      	beq.n	20002714 <__addsf3+0xec>
2000263e:	ea4f 6212 	mov.w	r2, r2, lsr #24
20002642:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
20002646:	bfc1      	itttt	gt
20002648:	18d2      	addgt	r2, r2, r3
2000264a:	4041      	eorgt	r1, r0
2000264c:	4048      	eorgt	r0, r1
2000264e:	4041      	eorgt	r1, r0
20002650:	bfb8      	it	lt
20002652:	425b      	neglt	r3, r3
20002654:	2b19      	cmp	r3, #25
20002656:	bf88      	it	hi
20002658:	4770      	bxhi	lr
2000265a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
2000265e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
20002662:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
20002666:	bf18      	it	ne
20002668:	4240      	negne	r0, r0
2000266a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
2000266e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
20002672:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
20002676:	bf18      	it	ne
20002678:	4249      	negne	r1, r1
2000267a:	ea92 0f03 	teq	r2, r3
2000267e:	d03f      	beq.n	20002700 <__addsf3+0xd8>
20002680:	f1a2 0201 	sub.w	r2, r2, #1
20002684:	fa41 fc03 	asr.w	ip, r1, r3
20002688:	eb10 000c 	adds.w	r0, r0, ip
2000268c:	f1c3 0320 	rsb	r3, r3, #32
20002690:	fa01 f103 	lsl.w	r1, r1, r3
20002694:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
20002698:	d502      	bpl.n	200026a0 <__addsf3+0x78>
2000269a:	4249      	negs	r1, r1
2000269c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
200026a0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
200026a4:	d313      	bcc.n	200026ce <__addsf3+0xa6>
200026a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
200026aa:	d306      	bcc.n	200026ba <__addsf3+0x92>
200026ac:	0840      	lsrs	r0, r0, #1
200026ae:	ea4f 0131 	mov.w	r1, r1, rrx
200026b2:	f102 0201 	add.w	r2, r2, #1
200026b6:	2afe      	cmp	r2, #254	; 0xfe
200026b8:	d251      	bcs.n	2000275e <__addsf3+0x136>
200026ba:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
200026be:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
200026c2:	bf08      	it	eq
200026c4:	f020 0001 	biceq.w	r0, r0, #1
200026c8:	ea40 0003 	orr.w	r0, r0, r3
200026cc:	4770      	bx	lr
200026ce:	0049      	lsls	r1, r1, #1
200026d0:	eb40 0000 	adc.w	r0, r0, r0
200026d4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
200026d8:	f1a2 0201 	sub.w	r2, r2, #1
200026dc:	d1ed      	bne.n	200026ba <__addsf3+0x92>
200026de:	fab0 fc80 	clz	ip, r0
200026e2:	f1ac 0c08 	sub.w	ip, ip, #8
200026e6:	ebb2 020c 	subs.w	r2, r2, ip
200026ea:	fa00 f00c 	lsl.w	r0, r0, ip
200026ee:	bfaa      	itet	ge
200026f0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
200026f4:	4252      	neglt	r2, r2
200026f6:	4318      	orrge	r0, r3
200026f8:	bfbc      	itt	lt
200026fa:	40d0      	lsrlt	r0, r2
200026fc:	4318      	orrlt	r0, r3
200026fe:	4770      	bx	lr
20002700:	f092 0f00 	teq	r2, #0
20002704:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
20002708:	bf06      	itte	eq
2000270a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
2000270e:	3201      	addeq	r2, #1
20002710:	3b01      	subne	r3, #1
20002712:	e7b5      	b.n	20002680 <__addsf3+0x58>
20002714:	ea4f 0341 	mov.w	r3, r1, lsl #1
20002718:	ea7f 6c22 	mvns.w	ip, r2, asr #24
2000271c:	bf18      	it	ne
2000271e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
20002722:	d021      	beq.n	20002768 <__addsf3+0x140>
20002724:	ea92 0f03 	teq	r2, r3
20002728:	d004      	beq.n	20002734 <__addsf3+0x10c>
2000272a:	f092 0f00 	teq	r2, #0
2000272e:	bf08      	it	eq
20002730:	4608      	moveq	r0, r1
20002732:	4770      	bx	lr
20002734:	ea90 0f01 	teq	r0, r1
20002738:	bf1c      	itt	ne
2000273a:	2000      	movne	r0, #0
2000273c:	4770      	bxne	lr
2000273e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
20002742:	d104      	bne.n	2000274e <__addsf3+0x126>
20002744:	0040      	lsls	r0, r0, #1
20002746:	bf28      	it	cs
20002748:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
2000274c:	4770      	bx	lr
2000274e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
20002752:	bf3c      	itt	cc
20002754:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
20002758:	4770      	bxcc	lr
2000275a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
2000275e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
20002762:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
20002766:	4770      	bx	lr
20002768:	ea7f 6222 	mvns.w	r2, r2, asr #24
2000276c:	bf16      	itet	ne
2000276e:	4608      	movne	r0, r1
20002770:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
20002774:	4601      	movne	r1, r0
20002776:	0242      	lsls	r2, r0, #9
20002778:	bf06      	itte	eq
2000277a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
2000277e:	ea90 0f01 	teqeq	r0, r1
20002782:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
20002786:	4770      	bx	lr

20002788 <__aeabi_ui2f>:
20002788:	f04f 0300 	mov.w	r3, #0
2000278c:	e004      	b.n	20002798 <__aeabi_i2f+0x8>
2000278e:	bf00      	nop

20002790 <__aeabi_i2f>:
20002790:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
20002794:	bf48      	it	mi
20002796:	4240      	negmi	r0, r0
20002798:	ea5f 0c00 	movs.w	ip, r0
2000279c:	bf08      	it	eq
2000279e:	4770      	bxeq	lr
200027a0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
200027a4:	4601      	mov	r1, r0
200027a6:	f04f 0000 	mov.w	r0, #0
200027aa:	e01c      	b.n	200027e6 <__aeabi_l2f+0x2a>

200027ac <__aeabi_ul2f>:
200027ac:	ea50 0201 	orrs.w	r2, r0, r1
200027b0:	bf08      	it	eq
200027b2:	4770      	bxeq	lr
200027b4:	f04f 0300 	mov.w	r3, #0
200027b8:	e00a      	b.n	200027d0 <__aeabi_l2f+0x14>
200027ba:	bf00      	nop

200027bc <__aeabi_l2f>:
200027bc:	ea50 0201 	orrs.w	r2, r0, r1
200027c0:	bf08      	it	eq
200027c2:	4770      	bxeq	lr
200027c4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
200027c8:	d502      	bpl.n	200027d0 <__aeabi_l2f+0x14>
200027ca:	4240      	negs	r0, r0
200027cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
200027d0:	ea5f 0c01 	movs.w	ip, r1
200027d4:	bf02      	ittt	eq
200027d6:	4684      	moveq	ip, r0
200027d8:	4601      	moveq	r1, r0
200027da:	2000      	moveq	r0, #0
200027dc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
200027e0:	bf08      	it	eq
200027e2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
200027e6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
200027ea:	fabc f28c 	clz	r2, ip
200027ee:	3a08      	subs	r2, #8
200027f0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
200027f4:	db10      	blt.n	20002818 <__aeabi_l2f+0x5c>
200027f6:	fa01 fc02 	lsl.w	ip, r1, r2
200027fa:	4463      	add	r3, ip
200027fc:	fa00 fc02 	lsl.w	ip, r0, r2
20002800:	f1c2 0220 	rsb	r2, r2, #32
20002804:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
20002808:	fa20 f202 	lsr.w	r2, r0, r2
2000280c:	eb43 0002 	adc.w	r0, r3, r2
20002810:	bf08      	it	eq
20002812:	f020 0001 	biceq.w	r0, r0, #1
20002816:	4770      	bx	lr
20002818:	f102 0220 	add.w	r2, r2, #32
2000281c:	fa01 fc02 	lsl.w	ip, r1, r2
20002820:	f1c2 0220 	rsb	r2, r2, #32
20002824:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
20002828:	fa21 f202 	lsr.w	r2, r1, r2
2000282c:	eb43 0002 	adc.w	r0, r3, r2
20002830:	bf08      	it	eq
20002832:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
20002836:	4770      	bx	lr

20002838 <__aeabi_fmul>:
20002838:	f04f 0cff 	mov.w	ip, #255	; 0xff
2000283c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
20002840:	bf1e      	ittt	ne
20002842:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
20002846:	ea92 0f0c 	teqne	r2, ip
2000284a:	ea93 0f0c 	teqne	r3, ip
2000284e:	d06f      	beq.n	20002930 <__aeabi_fmul+0xf8>
20002850:	441a      	add	r2, r3
20002852:	ea80 0c01 	eor.w	ip, r0, r1
20002856:	0240      	lsls	r0, r0, #9
20002858:	bf18      	it	ne
2000285a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
2000285e:	d01e      	beq.n	2000289e <__aeabi_fmul+0x66>
20002860:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
20002864:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
20002868:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
2000286c:	fba0 3101 	umull	r3, r1, r0, r1
20002870:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
20002874:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
20002878:	bf3e      	ittt	cc
2000287a:	0049      	lslcc	r1, r1, #1
2000287c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
20002880:	005b      	lslcc	r3, r3, #1
20002882:	ea40 0001 	orr.w	r0, r0, r1
20002886:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
2000288a:	2afd      	cmp	r2, #253	; 0xfd
2000288c:	d81d      	bhi.n	200028ca <__aeabi_fmul+0x92>
2000288e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
20002892:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
20002896:	bf08      	it	eq
20002898:	f020 0001 	biceq.w	r0, r0, #1
2000289c:	4770      	bx	lr
2000289e:	f090 0f00 	teq	r0, #0
200028a2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
200028a6:	bf08      	it	eq
200028a8:	0249      	lsleq	r1, r1, #9
200028aa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
200028ae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
200028b2:	3a7f      	subs	r2, #127	; 0x7f
200028b4:	bfc2      	ittt	gt
200028b6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
200028ba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
200028be:	4770      	bxgt	lr
200028c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
200028c4:	f04f 0300 	mov.w	r3, #0
200028c8:	3a01      	subs	r2, #1
200028ca:	dc5d      	bgt.n	20002988 <__aeabi_fmul+0x150>
200028cc:	f112 0f19 	cmn.w	r2, #25
200028d0:	bfdc      	itt	le
200028d2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
200028d6:	4770      	bxle	lr
200028d8:	f1c2 0200 	rsb	r2, r2, #0
200028dc:	0041      	lsls	r1, r0, #1
200028de:	fa21 f102 	lsr.w	r1, r1, r2
200028e2:	f1c2 0220 	rsb	r2, r2, #32
200028e6:	fa00 fc02 	lsl.w	ip, r0, r2
200028ea:	ea5f 0031 	movs.w	r0, r1, rrx
200028ee:	f140 0000 	adc.w	r0, r0, #0
200028f2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
200028f6:	bf08      	it	eq
200028f8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
200028fc:	4770      	bx	lr
200028fe:	f092 0f00 	teq	r2, #0
20002902:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
20002906:	bf02      	ittt	eq
20002908:	0040      	lsleq	r0, r0, #1
2000290a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
2000290e:	3a01      	subeq	r2, #1
20002910:	d0f9      	beq.n	20002906 <__aeabi_fmul+0xce>
20002912:	ea40 000c 	orr.w	r0, r0, ip
20002916:	f093 0f00 	teq	r3, #0
2000291a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
2000291e:	bf02      	ittt	eq
20002920:	0049      	lsleq	r1, r1, #1
20002922:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
20002926:	3b01      	subeq	r3, #1
20002928:	d0f9      	beq.n	2000291e <__aeabi_fmul+0xe6>
2000292a:	ea41 010c 	orr.w	r1, r1, ip
2000292e:	e78f      	b.n	20002850 <__aeabi_fmul+0x18>
20002930:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
20002934:	ea92 0f0c 	teq	r2, ip
20002938:	bf18      	it	ne
2000293a:	ea93 0f0c 	teqne	r3, ip
2000293e:	d00a      	beq.n	20002956 <__aeabi_fmul+0x11e>
20002940:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
20002944:	bf18      	it	ne
20002946:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
2000294a:	d1d8      	bne.n	200028fe <__aeabi_fmul+0xc6>
2000294c:	ea80 0001 	eor.w	r0, r0, r1
20002950:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
20002954:	4770      	bx	lr
20002956:	f090 0f00 	teq	r0, #0
2000295a:	bf17      	itett	ne
2000295c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
20002960:	4608      	moveq	r0, r1
20002962:	f091 0f00 	teqne	r1, #0
20002966:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
2000296a:	d014      	beq.n	20002996 <__aeabi_fmul+0x15e>
2000296c:	ea92 0f0c 	teq	r2, ip
20002970:	d101      	bne.n	20002976 <__aeabi_fmul+0x13e>
20002972:	0242      	lsls	r2, r0, #9
20002974:	d10f      	bne.n	20002996 <__aeabi_fmul+0x15e>
20002976:	ea93 0f0c 	teq	r3, ip
2000297a:	d103      	bne.n	20002984 <__aeabi_fmul+0x14c>
2000297c:	024b      	lsls	r3, r1, #9
2000297e:	bf18      	it	ne
20002980:	4608      	movne	r0, r1
20002982:	d108      	bne.n	20002996 <__aeabi_fmul+0x15e>
20002984:	ea80 0001 	eor.w	r0, r0, r1
20002988:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
2000298c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
20002990:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
20002994:	4770      	bx	lr
20002996:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
2000299a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
2000299e:	4770      	bx	lr

200029a0 <__aeabi_fdiv>:
200029a0:	f04f 0cff 	mov.w	ip, #255	; 0xff
200029a4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
200029a8:	bf1e      	ittt	ne
200029aa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
200029ae:	ea92 0f0c 	teqne	r2, ip
200029b2:	ea93 0f0c 	teqne	r3, ip
200029b6:	d069      	beq.n	20002a8c <__aeabi_fdiv+0xec>
200029b8:	eba2 0203 	sub.w	r2, r2, r3
200029bc:	ea80 0c01 	eor.w	ip, r0, r1
200029c0:	0249      	lsls	r1, r1, #9
200029c2:	ea4f 2040 	mov.w	r0, r0, lsl #9
200029c6:	d037      	beq.n	20002a38 <__aeabi_fdiv+0x98>
200029c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
200029cc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
200029d0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
200029d4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
200029d8:	428b      	cmp	r3, r1
200029da:	bf38      	it	cc
200029dc:	005b      	lslcc	r3, r3, #1
200029de:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
200029e2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
200029e6:	428b      	cmp	r3, r1
200029e8:	bf24      	itt	cs
200029ea:	1a5b      	subcs	r3, r3, r1
200029ec:	ea40 000c 	orrcs.w	r0, r0, ip
200029f0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
200029f4:	bf24      	itt	cs
200029f6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
200029fa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
200029fe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
20002a02:	bf24      	itt	cs
20002a04:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
20002a08:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
20002a0c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
20002a10:	bf24      	itt	cs
20002a12:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
20002a16:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
20002a1a:	011b      	lsls	r3, r3, #4
20002a1c:	bf18      	it	ne
20002a1e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
20002a22:	d1e0      	bne.n	200029e6 <__aeabi_fdiv+0x46>
20002a24:	2afd      	cmp	r2, #253	; 0xfd
20002a26:	f63f af50 	bhi.w	200028ca <__aeabi_fmul+0x92>
20002a2a:	428b      	cmp	r3, r1
20002a2c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
20002a30:	bf08      	it	eq
20002a32:	f020 0001 	biceq.w	r0, r0, #1
20002a36:	4770      	bx	lr
20002a38:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
20002a3c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
20002a40:	327f      	adds	r2, #127	; 0x7f
20002a42:	bfc2      	ittt	gt
20002a44:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
20002a48:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
20002a4c:	4770      	bxgt	lr
20002a4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
20002a52:	f04f 0300 	mov.w	r3, #0
20002a56:	3a01      	subs	r2, #1
20002a58:	e737      	b.n	200028ca <__aeabi_fmul+0x92>
20002a5a:	f092 0f00 	teq	r2, #0
20002a5e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
20002a62:	bf02      	ittt	eq
20002a64:	0040      	lsleq	r0, r0, #1
20002a66:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
20002a6a:	3a01      	subeq	r2, #1
20002a6c:	d0f9      	beq.n	20002a62 <__aeabi_fdiv+0xc2>
20002a6e:	ea40 000c 	orr.w	r0, r0, ip
20002a72:	f093 0f00 	teq	r3, #0
20002a76:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
20002a7a:	bf02      	ittt	eq
20002a7c:	0049      	lsleq	r1, r1, #1
20002a7e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
20002a82:	3b01      	subeq	r3, #1
20002a84:	d0f9      	beq.n	20002a7a <__aeabi_fdiv+0xda>
20002a86:	ea41 010c 	orr.w	r1, r1, ip
20002a8a:	e795      	b.n	200029b8 <__aeabi_fdiv+0x18>
20002a8c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
20002a90:	ea92 0f0c 	teq	r2, ip
20002a94:	d108      	bne.n	20002aa8 <__aeabi_fdiv+0x108>
20002a96:	0242      	lsls	r2, r0, #9
20002a98:	f47f af7d 	bne.w	20002996 <__aeabi_fmul+0x15e>
20002a9c:	ea93 0f0c 	teq	r3, ip
20002aa0:	f47f af70 	bne.w	20002984 <__aeabi_fmul+0x14c>
20002aa4:	4608      	mov	r0, r1
20002aa6:	e776      	b.n	20002996 <__aeabi_fmul+0x15e>
20002aa8:	ea93 0f0c 	teq	r3, ip
20002aac:	d104      	bne.n	20002ab8 <__aeabi_fdiv+0x118>
20002aae:	024b      	lsls	r3, r1, #9
20002ab0:	f43f af4c 	beq.w	2000294c <__aeabi_fmul+0x114>
20002ab4:	4608      	mov	r0, r1
20002ab6:	e76e      	b.n	20002996 <__aeabi_fmul+0x15e>
20002ab8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
20002abc:	bf18      	it	ne
20002abe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
20002ac2:	d1ca      	bne.n	20002a5a <__aeabi_fdiv+0xba>
20002ac4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
20002ac8:	f47f af5c 	bne.w	20002984 <__aeabi_fmul+0x14c>
20002acc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
20002ad0:	f47f af3c 	bne.w	2000294c <__aeabi_fmul+0x114>
20002ad4:	e75f      	b.n	20002996 <__aeabi_fmul+0x15e>
20002ad6:	bf00      	nop

20002ad8 <__gesf2>:
20002ad8:	f04f 3cff 	mov.w	ip, #4294967295
20002adc:	e006      	b.n	20002aec <__cmpsf2+0x4>
20002ade:	bf00      	nop

20002ae0 <__lesf2>:
20002ae0:	f04f 0c01 	mov.w	ip, #1
20002ae4:	e002      	b.n	20002aec <__cmpsf2+0x4>
20002ae6:	bf00      	nop

20002ae8 <__cmpsf2>:
20002ae8:	f04f 0c01 	mov.w	ip, #1
20002aec:	f84d cd04 	str.w	ip, [sp, #-4]!
20002af0:	ea4f 0240 	mov.w	r2, r0, lsl #1
20002af4:	ea4f 0341 	mov.w	r3, r1, lsl #1
20002af8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
20002afc:	bf18      	it	ne
20002afe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
20002b02:	d011      	beq.n	20002b28 <__cmpsf2+0x40>
20002b04:	b001      	add	sp, #4
20002b06:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
20002b0a:	bf18      	it	ne
20002b0c:	ea90 0f01 	teqne	r0, r1
20002b10:	bf58      	it	pl
20002b12:	ebb2 0003 	subspl.w	r0, r2, r3
20002b16:	bf88      	it	hi
20002b18:	17c8      	asrhi	r0, r1, #31
20002b1a:	bf38      	it	cc
20002b1c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
20002b20:	bf18      	it	ne
20002b22:	f040 0001 	orrne.w	r0, r0, #1
20002b26:	4770      	bx	lr
20002b28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
20002b2c:	d102      	bne.n	20002b34 <__cmpsf2+0x4c>
20002b2e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
20002b32:	d105      	bne.n	20002b40 <__cmpsf2+0x58>
20002b34:	ea7f 6c23 	mvns.w	ip, r3, asr #24
20002b38:	d1e4      	bne.n	20002b04 <__cmpsf2+0x1c>
20002b3a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
20002b3e:	d0e1      	beq.n	20002b04 <__cmpsf2+0x1c>
20002b40:	f85d 0b04 	ldr.w	r0, [sp], #4
20002b44:	4770      	bx	lr
20002b46:	bf00      	nop

20002b48 <__aeabi_cfrcmple>:
20002b48:	4684      	mov	ip, r0
20002b4a:	4608      	mov	r0, r1
20002b4c:	4661      	mov	r1, ip
20002b4e:	e7ff      	b.n	20002b50 <__aeabi_cfcmpeq>

20002b50 <__aeabi_cfcmpeq>:
20002b50:	b50f      	push	{r0, r1, r2, r3, lr}
20002b52:	f7ff ffc9 	bl	20002ae8 <__cmpsf2>
20002b56:	2800      	cmp	r0, #0
20002b58:	bf48      	it	mi
20002b5a:	f110 0f00 	cmnmi.w	r0, #0
20002b5e:	bd0f      	pop	{r0, r1, r2, r3, pc}

20002b60 <__aeabi_fcmpeq>:
20002b60:	f84d ed08 	str.w	lr, [sp, #-8]!
20002b64:	f7ff fff4 	bl	20002b50 <__aeabi_cfcmpeq>
20002b68:	bf0c      	ite	eq
20002b6a:	2001      	moveq	r0, #1
20002b6c:	2000      	movne	r0, #0
20002b6e:	f85d fb08 	ldr.w	pc, [sp], #8
20002b72:	bf00      	nop

20002b74 <__aeabi_fcmplt>:
20002b74:	f84d ed08 	str.w	lr, [sp, #-8]!
20002b78:	f7ff ffea 	bl	20002b50 <__aeabi_cfcmpeq>
20002b7c:	bf34      	ite	cc
20002b7e:	2001      	movcc	r0, #1
20002b80:	2000      	movcs	r0, #0
20002b82:	f85d fb08 	ldr.w	pc, [sp], #8
20002b86:	bf00      	nop

20002b88 <__aeabi_fcmple>:
20002b88:	f84d ed08 	str.w	lr, [sp, #-8]!
20002b8c:	f7ff ffe0 	bl	20002b50 <__aeabi_cfcmpeq>
20002b90:	bf94      	ite	ls
20002b92:	2001      	movls	r0, #1
20002b94:	2000      	movhi	r0, #0
20002b96:	f85d fb08 	ldr.w	pc, [sp], #8
20002b9a:	bf00      	nop

20002b9c <__aeabi_fcmpge>:
20002b9c:	f84d ed08 	str.w	lr, [sp, #-8]!
20002ba0:	f7ff ffd2 	bl	20002b48 <__aeabi_cfrcmple>
20002ba4:	bf94      	ite	ls
20002ba6:	2001      	movls	r0, #1
20002ba8:	2000      	movhi	r0, #0
20002baa:	f85d fb08 	ldr.w	pc, [sp], #8
20002bae:	bf00      	nop

20002bb0 <__aeabi_fcmpgt>:
20002bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
20002bb4:	f7ff ffc8 	bl	20002b48 <__aeabi_cfrcmple>
20002bb8:	bf34      	ite	cc
20002bba:	2001      	movcc	r0, #1
20002bbc:	2000      	movcs	r0, #0
20002bbe:	f85d fb08 	ldr.w	pc, [sp], #8
20002bc2:	bf00      	nop

20002bc4 <__libc_init_array>:
20002bc4:	b570      	push	{r4, r5, r6, lr}
20002bc6:	f642 5608 	movw	r6, #11528	; 0x2d08
20002bca:	f642 5508 	movw	r5, #11528	; 0x2d08
20002bce:	f2c2 0600 	movt	r6, #8192	; 0x2000
20002bd2:	f2c2 0500 	movt	r5, #8192	; 0x2000
20002bd6:	1b76      	subs	r6, r6, r5
20002bd8:	10b6      	asrs	r6, r6, #2
20002bda:	d006      	beq.n	20002bea <__libc_init_array+0x26>
20002bdc:	2400      	movs	r4, #0
20002bde:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
20002be2:	3401      	adds	r4, #1
20002be4:	4798      	blx	r3
20002be6:	42a6      	cmp	r6, r4
20002be8:	d8f9      	bhi.n	20002bde <__libc_init_array+0x1a>
20002bea:	f642 5508 	movw	r5, #11528	; 0x2d08
20002bee:	f642 560c 	movw	r6, #11532	; 0x2d0c
20002bf2:	f2c2 0500 	movt	r5, #8192	; 0x2000
20002bf6:	f2c2 0600 	movt	r6, #8192	; 0x2000
20002bfa:	1b76      	subs	r6, r6, r5
20002bfc:	f000 f878 	bl	20002cf0 <_init>
20002c00:	10b6      	asrs	r6, r6, #2
20002c02:	d006      	beq.n	20002c12 <__libc_init_array+0x4e>
20002c04:	2400      	movs	r4, #0
20002c06:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
20002c0a:	3401      	adds	r4, #1
20002c0c:	4798      	blx	r3
20002c0e:	42a6      	cmp	r6, r4
20002c10:	d8f9      	bhi.n	20002c06 <__libc_init_array+0x42>
20002c12:	bd70      	pop	{r4, r5, r6, pc}

20002c14 <memset>:
20002c14:	2a03      	cmp	r2, #3
20002c16:	b2c9      	uxtb	r1, r1
20002c18:	b430      	push	{r4, r5}
20002c1a:	d807      	bhi.n	20002c2c <memset+0x18>
20002c1c:	b122      	cbz	r2, 20002c28 <memset+0x14>
20002c1e:	2300      	movs	r3, #0
20002c20:	54c1      	strb	r1, [r0, r3]
20002c22:	3301      	adds	r3, #1
20002c24:	4293      	cmp	r3, r2
20002c26:	d1fb      	bne.n	20002c20 <memset+0xc>
20002c28:	bc30      	pop	{r4, r5}
20002c2a:	4770      	bx	lr
20002c2c:	eb00 0c02 	add.w	ip, r0, r2
20002c30:	4603      	mov	r3, r0
20002c32:	e001      	b.n	20002c38 <memset+0x24>
20002c34:	f803 1c01 	strb.w	r1, [r3, #-1]
20002c38:	f003 0403 	and.w	r4, r3, #3
20002c3c:	461a      	mov	r2, r3
20002c3e:	3301      	adds	r3, #1
20002c40:	2c00      	cmp	r4, #0
20002c42:	d1f7      	bne.n	20002c34 <memset+0x20>
20002c44:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
20002c48:	ebc2 040c 	rsb	r4, r2, ip
20002c4c:	fb03 f301 	mul.w	r3, r3, r1
20002c50:	e01f      	b.n	20002c92 <memset+0x7e>
20002c52:	f842 3c40 	str.w	r3, [r2, #-64]
20002c56:	f842 3c3c 	str.w	r3, [r2, #-60]
20002c5a:	f842 3c38 	str.w	r3, [r2, #-56]
20002c5e:	f842 3c34 	str.w	r3, [r2, #-52]
20002c62:	f842 3c30 	str.w	r3, [r2, #-48]
20002c66:	f842 3c2c 	str.w	r3, [r2, #-44]
20002c6a:	f842 3c28 	str.w	r3, [r2, #-40]
20002c6e:	f842 3c24 	str.w	r3, [r2, #-36]
20002c72:	f842 3c20 	str.w	r3, [r2, #-32]
20002c76:	f842 3c1c 	str.w	r3, [r2, #-28]
20002c7a:	f842 3c18 	str.w	r3, [r2, #-24]
20002c7e:	f842 3c14 	str.w	r3, [r2, #-20]
20002c82:	f842 3c10 	str.w	r3, [r2, #-16]
20002c86:	f842 3c0c 	str.w	r3, [r2, #-12]
20002c8a:	f842 3c08 	str.w	r3, [r2, #-8]
20002c8e:	f842 3c04 	str.w	r3, [r2, #-4]
20002c92:	4615      	mov	r5, r2
20002c94:	3240      	adds	r2, #64	; 0x40
20002c96:	2c3f      	cmp	r4, #63	; 0x3f
20002c98:	f1a4 0440 	sub.w	r4, r4, #64	; 0x40
20002c9c:	dcd9      	bgt.n	20002c52 <memset+0x3e>
20002c9e:	462a      	mov	r2, r5
20002ca0:	ebc5 040c 	rsb	r4, r5, ip
20002ca4:	e007      	b.n	20002cb6 <memset+0xa2>
20002ca6:	f842 3c10 	str.w	r3, [r2, #-16]
20002caa:	f842 3c0c 	str.w	r3, [r2, #-12]
20002cae:	f842 3c08 	str.w	r3, [r2, #-8]
20002cb2:	f842 3c04 	str.w	r3, [r2, #-4]
20002cb6:	4615      	mov	r5, r2
20002cb8:	3210      	adds	r2, #16
20002cba:	2c0f      	cmp	r4, #15
20002cbc:	f1a4 0410 	sub.w	r4, r4, #16
20002cc0:	dcf1      	bgt.n	20002ca6 <memset+0x92>
20002cc2:	462a      	mov	r2, r5
20002cc4:	ebc5 050c 	rsb	r5, r5, ip
20002cc8:	e001      	b.n	20002cce <memset+0xba>
20002cca:	f842 3c04 	str.w	r3, [r2, #-4]
20002cce:	4614      	mov	r4, r2
20002cd0:	3204      	adds	r2, #4
20002cd2:	2d03      	cmp	r5, #3
20002cd4:	f1a5 0504 	sub.w	r5, r5, #4
20002cd8:	dcf7      	bgt.n	20002cca <memset+0xb6>
20002cda:	e001      	b.n	20002ce0 <memset+0xcc>
20002cdc:	f804 1b01 	strb.w	r1, [r4], #1
20002ce0:	4564      	cmp	r4, ip
20002ce2:	d3fb      	bcc.n	20002cdc <memset+0xc8>
20002ce4:	e7a0      	b.n	20002c28 <memset+0x14>
20002ce6:	bf00      	nop

20002ce8 <C.34.3880>:
20002ce8:	1b1a 0000                                   ....

20002cec <C.33.3874>:
20002cec:	0c3d 0000                                   =...

20002cf0 <_init>:
20002cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20002cf2:	bf00      	nop
20002cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
20002cf6:	bc08      	pop	{r3}
20002cf8:	469e      	mov	lr, r3
20002cfa:	4770      	bx	lr

20002cfc <_fini>:
20002cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20002cfe:	bf00      	nop
20002d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
20002d02:	bc08      	pop	{r3}
20002d04:	469e      	mov	lr, r3
20002d06:	4770      	bx	lr

20002d08 <__frame_dummy_init_array_entry>:
20002d08:	0485 2000                                   ... 

20002d0c <__do_global_dtors_aux_fini_array_entry>:
20002d0c:	0471 2000                                   q.. 
