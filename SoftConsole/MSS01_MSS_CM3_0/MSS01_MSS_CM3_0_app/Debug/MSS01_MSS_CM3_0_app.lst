
MSS01_MSS_CM3_0_app:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004240  20000000  20000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  20004240  20004240  0000c240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000280  20004348  20004348  0000c348  2**3
                  ALLOC
  3 .stack        00003000  200045c8  200045c8  0000c348  2**0
                  ALLOC
  4 .comment      0000012d  00000000  00000000  0000c348  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000518  00000000  00000000  0000c475  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000baf  00000000  00000000  0000c98d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006f45  00000000  00000000  0000d53c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000c31  00000000  00000000  00014481  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002570  00000000  00000000  000150b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001e4c  00000000  00000000  00017624  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000296d  00000000  00000000  00019470  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001d18  00000000  00000000  0001bddd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 0002e7fe  00000000  00000000  0001daf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 00000025  00000000  00000000  0004c2f3  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 000004f8  00000000  00000000  0004c318  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

20000000 <__text_start>:
20000000:	20010000 	.word	0x20010000
20000004:	20000299 	.word	0x20000299
20000008:	20000309 	.word	0x20000309
2000000c:	2000030b 	.word	0x2000030b
20000010:	2000030d 	.word	0x2000030d
20000014:	2000030f 	.word	0x2000030f
20000018:	20000311 	.word	0x20000311
	...
2000002c:	20000313 	.word	0x20000313
20000030:	20000315 	.word	0x20000315
20000034:	00000000 	.word	0x00000000
20000038:	20000317 	.word	0x20000317
2000003c:	20000319 	.word	0x20000319
20000040:	2000031b 	.word	0x2000031b
20000044:	2000031d 	.word	0x2000031d
20000048:	2000031f 	.word	0x2000031f
2000004c:	20000321 	.word	0x20000321
20000050:	20000323 	.word	0x20000323
20000054:	20000325 	.word	0x20000325
20000058:	20000327 	.word	0x20000327
2000005c:	20000329 	.word	0x20000329
20000060:	2000032b 	.word	0x2000032b
20000064:	2000032d 	.word	0x2000032d
20000068:	20001681 	.word	0x20001681
2000006c:	200016ad 	.word	0x200016ad
20000070:	20000333 	.word	0x20000333
20000074:	20000335 	.word	0x20000335
20000078:	200024c1 	.word	0x200024c1
2000007c:	20000339 	.word	0x20000339
20000080:	2000033b 	.word	0x2000033b
20000084:	200024ed 	.word	0x200024ed
20000088:	2000033f 	.word	0x2000033f
2000008c:	20000341 	.word	0x20000341
20000090:	20000343 	.word	0x20000343
20000094:	20000345 	.word	0x20000345
20000098:	20000347 	.word	0x20000347
2000009c:	20000349 	.word	0x20000349
200000a0:	2000034b 	.word	0x2000034b
	...
200000bc:	2000034d 	.word	0x2000034d
200000c0:	20000df9 	.word	0x20000df9
200000c4:	20000e21 	.word	0x20000e21
200000c8:	20000353 	.word	0x20000353
200000cc:	20000355 	.word	0x20000355
200000d0:	20000357 	.word	0x20000357
200000d4:	20000359 	.word	0x20000359
200000d8:	2000035b 	.word	0x2000035b
200000dc:	2000035d 	.word	0x2000035d
200000e0:	2000035f 	.word	0x2000035f
200000e4:	20000361 	.word	0x20000361
200000e8:	20000363 	.word	0x20000363
200000ec:	20000365 	.word	0x20000365
200000f0:	20000367 	.word	0x20000367
200000f4:	20000369 	.word	0x20000369
200000f8:	2000036b 	.word	0x2000036b
200000fc:	2000036d 	.word	0x2000036d
20000100:	2000036f 	.word	0x2000036f
20000104:	20000371 	.word	0x20000371
20000108:	20000373 	.word	0x20000373
2000010c:	20000375 	.word	0x20000375
20000110:	20000377 	.word	0x20000377
20000114:	20000379 	.word	0x20000379
20000118:	2000037b 	.word	0x2000037b
2000011c:	2000037d 	.word	0x2000037d
20000120:	2000037f 	.word	0x2000037f
20000124:	20000381 	.word	0x20000381
20000128:	20000383 	.word	0x20000383
2000012c:	20000385 	.word	0x20000385
20000130:	20000387 	.word	0x20000387
20000134:	20000389 	.word	0x20000389
20000138:	2000038b 	.word	0x2000038b
2000013c:	2000038d 	.word	0x2000038d
20000140:	2000038f 	.word	0x2000038f
20000144:	20000391 	.word	0x20000391
20000148:	20000393 	.word	0x20000393
2000014c:	20000395 	.word	0x20000395
20000150:	20000397 	.word	0x20000397
20000154:	20000399 	.word	0x20000399
20000158:	2000039b 	.word	0x2000039b
2000015c:	2000039d 	.word	0x2000039d
20000160:	2000039f 	.word	0x2000039f
20000164:	200003a1 	.word	0x200003a1
20000168:	200003a3 	.word	0x200003a3
2000016c:	200003a5 	.word	0x200003a5
20000170:	200003a7 	.word	0x200003a7
20000174:	200003a9 	.word	0x200003a9
20000178:	200003ab 	.word	0x200003ab
2000017c:	200003ad 	.word	0x200003ad
20000180:	200003af 	.word	0x200003af
20000184:	200003b1 	.word	0x200003b1
20000188:	200003b3 	.word	0x200003b3
2000018c:	200003b5 	.word	0x200003b5
20000190:	200003b7 	.word	0x200003b7
20000194:	200003b9 	.word	0x200003b9
20000198:	200003bb 	.word	0x200003bb
2000019c:	200003bd 	.word	0x200003bd
200001a0:	200003bf 	.word	0x200003bf
200001a4:	200003c1 	.word	0x200003c1
200001a8:	200003c3 	.word	0x200003c3
200001ac:	200003c5 	.word	0x200003c5
200001b0:	200003c7 	.word	0x200003c7
200001b4:	200003c9 	.word	0x200003c9
200001b8:	200003cb 	.word	0x200003cb
200001bc:	200003cd 	.word	0x200003cd
200001c0:	200003cf 	.word	0x200003cf
200001c4:	200003d1 	.word	0x200003d1
200001c8:	200003d3 	.word	0x200003d3
200001cc:	200003d5 	.word	0x200003d5
200001d0:	200003d7 	.word	0x200003d7
200001d4:	200003d9 	.word	0x200003d9
200001d8:	200003db 	.word	0x200003db
200001dc:	200003dd 	.word	0x200003dd
200001e0:	200003df 	.word	0x200003df
200001e4:	200003e1 	.word	0x200003e1
200001e8:	200003e3 	.word	0x200003e3
200001ec:	200003e5 	.word	0x200003e5
200001f0:	200003e7 	.word	0x200003e7
200001f4:	200003e9 	.word	0x200003e9
200001f8:	200003eb 	.word	0x200003eb
200001fc:	200003ed 	.word	0x200003ed
20000200:	200003ef 	.word	0x200003ef
20000204:	200003f1 	.word	0x200003f1
20000208:	200003f3 	.word	0x200003f3
2000020c:	200003f5 	.word	0x200003f5
20000210:	200003f7 	.word	0x200003f7
20000214:	200003f9 	.word	0x200003f9
20000218:	200003fb 	.word	0x200003fb
2000021c:	200003fd 	.word	0x200003fd
20000220:	200003ff 	.word	0x200003ff
20000224:	20000401 	.word	0x20000401
20000228:	20000403 	.word	0x20000403
2000022c:	20000405 	.word	0x20000405
20000230:	20000407 	.word	0x20000407
20000234:	20000409 	.word	0x20000409
20000238:	2000040b 	.word	0x2000040b
2000023c:	2000040d 	.word	0x2000040d
20000240:	2000040f 	.word	0x2000040f
20000244:	20000411 	.word	0x20000411
20000248:	20000413 	.word	0x20000413
2000024c:	20000415 	.word	0x20000415
20000250:	20000417 	.word	0x20000417
20000254:	20000419 	.word	0x20000419
20000258:	2000041b 	.word	0x2000041b
2000025c:	2000041d 	.word	0x2000041d
20000260:	2000041f 	.word	0x2000041f
20000264:	20000421 	.word	0x20000421
20000268:	20000423 	.word	0x20000423
2000026c:	20000425 	.word	0x20000425
20000270:	20000427 	.word	0x20000427
20000274:	20000429 	.word	0x20000429
20000278:	2000042b 	.word	0x2000042b
2000027c:	2000042d 	.word	0x2000042d
20000280:	2000042f 	.word	0x2000042f
20000284:	20000431 	.word	0x20000431
20000288:	20000433 	.word	0x20000433
2000028c:	20000435 	.word	0x20000435
20000290:	20000437 	.word	0x20000437
20000294:	20000439 	.word	0x20000439

20000298 <Reset_Handler>:
20000298:	4868      	ldr	r0, [pc, #416]	; (2000043c <ACE_PPE_Flag31_IRQHandler+0x4>)
2000029a:	4780      	blx	r0
2000029c:	4868      	ldr	r0, [pc, #416]	; (20000440 <ACE_PPE_Flag31_IRQHandler+0x8>)
2000029e:	2800      	cmp	r0, #0
200002a0:	d10b      	bne.n	200002ba <copy_data>
200002a2:	4868      	ldr	r0, [pc, #416]	; (20000444 <ACE_PPE_Flag31_IRQHandler+0xc>)
200002a4:	4968      	ldr	r1, [pc, #416]	; (20000448 <ACE_PPE_Flag31_IRQHandler+0x10>)
200002a6:	4a69      	ldr	r2, [pc, #420]	; (2000044c <ACE_PPE_Flag31_IRQHandler+0x14>)
200002a8:	4288      	cmp	r0, r1
200002aa:	d006      	beq.n	200002ba <copy_data>

200002ac <copy_code_loop>:
200002ac:	4291      	cmp	r1, r2
200002ae:	bf1c      	itt	ne
200002b0:	f850 3b04 	ldrne.w	r3, [r0], #4
200002b4:	f841 3b04 	strne.w	r3, [r1], #4
200002b8:	d1f8      	bne.n	200002ac <copy_code_loop>

200002ba <copy_data>:
200002ba:	4865      	ldr	r0, [pc, #404]	; (20000450 <ACE_PPE_Flag31_IRQHandler+0x18>)
200002bc:	4965      	ldr	r1, [pc, #404]	; (20000454 <ACE_PPE_Flag31_IRQHandler+0x1c>)
200002be:	4a66      	ldr	r2, [pc, #408]	; (20000458 <ACE_PPE_Flag31_IRQHandler+0x20>)
200002c0:	4288      	cmp	r0, r1
200002c2:	d006      	beq.n	200002d2 <clear_bss>

200002c4 <copy_data_loop>:
200002c4:	4291      	cmp	r1, r2
200002c6:	bf1c      	itt	ne
200002c8:	f850 3b04 	ldrne.w	r3, [r0], #4
200002cc:	f841 3b04 	strne.w	r3, [r1], #4
200002d0:	d1f8      	bne.n	200002c4 <copy_data_loop>

200002d2 <clear_bss>:
200002d2:	4862      	ldr	r0, [pc, #392]	; (2000045c <ACE_PPE_Flag31_IRQHandler+0x24>)
200002d4:	4962      	ldr	r1, [pc, #392]	; (20000460 <ACE_PPE_Flag31_IRQHandler+0x28>)
200002d6:	4a63      	ldr	r2, [pc, #396]	; (20000464 <ACE_PPE_Flag31_IRQHandler+0x2c>)

200002d8 <clear_bss_loop>:
200002d8:	4291      	cmp	r1, r2
200002da:	bf18      	it	ne
200002dc:	f841 0b04 	strne.w	r0, [r1], #4
200002e0:	d1fa      	bne.n	200002d8 <clear_bss_loop>
	...

200002f0 <call_glob_ctor>:
200002f0:	f8df 0174 	ldr.w	r0, [pc, #372]	; 20000468 <ACE_PPE_Flag31_IRQHandler+0x30>
200002f4:	f20f 0e03 	addw	lr, pc, #3
200002f8:	4700      	bx	r0

200002fa <branch_to_main>:
200002fa:	f04f 0000 	mov.w	r0, #0
200002fe:	f04f 0100 	mov.w	r1, #0
20000302:	f8df f168 	ldr.w	pc, [pc, #360]	; 2000046c <ACE_PPE_Flag31_IRQHandler+0x34>

20000306 <ExitLoop>:
20000306:	e7fe      	b.n	20000306 <ExitLoop>

20000308 <NMI_Handler>:
20000308:	e7fe      	b.n	20000308 <NMI_Handler>

2000030a <HardFault_Handler>:
2000030a:	e7fe      	b.n	2000030a <HardFault_Handler>

2000030c <MemManage_Handler>:
2000030c:	e7fe      	b.n	2000030c <MemManage_Handler>

2000030e <BusFault_Handler>:
2000030e:	e7fe      	b.n	2000030e <BusFault_Handler>

20000310 <UsageFault_Handler>:
20000310:	e7fe      	b.n	20000310 <UsageFault_Handler>

20000312 <SVC_Handler>:
20000312:	e7fe      	b.n	20000312 <SVC_Handler>

20000314 <DebugMon_Handler>:
20000314:	e7fe      	b.n	20000314 <DebugMon_Handler>

20000316 <PendSV_Handler>:
20000316:	e7fe      	b.n	20000316 <PendSV_Handler>

20000318 <SysTick_Handler>:
20000318:	e7fe      	b.n	20000318 <SysTick_Handler>

2000031a <WdogWakeup_IRQHandler>:
2000031a:	e7fe      	b.n	2000031a <WdogWakeup_IRQHandler>

2000031c <BrownOut_1_5V_IRQHandler>:
2000031c:	e7fe      	b.n	2000031c <BrownOut_1_5V_IRQHandler>

2000031e <BrownOut_3_3V_IRQHandler>:
2000031e:	e7fe      	b.n	2000031e <BrownOut_3_3V_IRQHandler>

20000320 <RTC_Match_IRQHandler>:
20000320:	e7fe      	b.n	20000320 <RTC_Match_IRQHandler>

20000322 <RTCIF_Pub_IRQHandler>:
20000322:	e7fe      	b.n	20000322 <RTCIF_Pub_IRQHandler>

20000324 <EthernetMAC_IRQHandler>:
20000324:	e7fe      	b.n	20000324 <EthernetMAC_IRQHandler>

20000326 <IAP_IRQHandler>:
20000326:	e7fe      	b.n	20000326 <IAP_IRQHandler>

20000328 <ENVM0_IRQHandler>:
20000328:	e7fe      	b.n	20000328 <ENVM0_IRQHandler>

2000032a <ENVM1_IRQHandler>:
2000032a:	e7fe      	b.n	2000032a <ENVM1_IRQHandler>

2000032c <DMA_IRQHandler>:
2000032c:	e7fe      	b.n	2000032c <DMA_IRQHandler>
2000032e:	e7fe      	b.n	2000032e <DMA_IRQHandler+0x2>
20000330:	e7fe      	b.n	20000330 <DMA_IRQHandler+0x4>

20000332 <SPI0_IRQHandler>:
20000332:	e7fe      	b.n	20000332 <SPI0_IRQHandler>

20000334 <SPI1_IRQHandler>:
20000334:	e7fe      	b.n	20000334 <SPI1_IRQHandler>
20000336:	e7fe      	b.n	20000336 <SPI1_IRQHandler+0x2>

20000338 <I2C0_SMBAlert_IRQHandler>:
20000338:	e7fe      	b.n	20000338 <I2C0_SMBAlert_IRQHandler>

2000033a <I2C0_SMBus_IRQHandler>:
2000033a:	e7fe      	b.n	2000033a <I2C0_SMBus_IRQHandler>
2000033c:	e7fe      	b.n	2000033c <I2C0_SMBus_IRQHandler+0x2>

2000033e <I2C1_SMBAlert_IRQHandler>:
2000033e:	e7fe      	b.n	2000033e <I2C1_SMBAlert_IRQHandler>

20000340 <I2C1_SMBus_IRQHandler>:
20000340:	e7fe      	b.n	20000340 <I2C1_SMBus_IRQHandler>

20000342 <Timer1_IRQHandler>:
20000342:	e7fe      	b.n	20000342 <Timer1_IRQHandler>

20000344 <Timer2_IRQHandler>:
20000344:	e7fe      	b.n	20000344 <Timer2_IRQHandler>

20000346 <PLL_Lock_IRQHandler>:
20000346:	e7fe      	b.n	20000346 <PLL_Lock_IRQHandler>

20000348 <PLL_LockLost_IRQHandler>:
20000348:	e7fe      	b.n	20000348 <PLL_LockLost_IRQHandler>

2000034a <CommError_IRQHandler>:
2000034a:	e7fe      	b.n	2000034a <CommError_IRQHandler>

2000034c <Fabric_IRQHandler>:
2000034c:	e7fe      	b.n	2000034c <Fabric_IRQHandler>
2000034e:	e7fe      	b.n	2000034e <Fabric_IRQHandler+0x2>
20000350:	e7fe      	b.n	20000350 <Fabric_IRQHandler+0x4>

20000352 <GPIO2_IRQHandler>:
20000352:	e7fe      	b.n	20000352 <GPIO2_IRQHandler>

20000354 <GPIO3_IRQHandler>:
20000354:	e7fe      	b.n	20000354 <GPIO3_IRQHandler>

20000356 <GPIO4_IRQHandler>:
20000356:	e7fe      	b.n	20000356 <GPIO4_IRQHandler>

20000358 <GPIO5_IRQHandler>:
20000358:	e7fe      	b.n	20000358 <GPIO5_IRQHandler>

2000035a <GPIO6_IRQHandler>:
2000035a:	e7fe      	b.n	2000035a <GPIO6_IRQHandler>

2000035c <GPIO7_IRQHandler>:
2000035c:	e7fe      	b.n	2000035c <GPIO7_IRQHandler>

2000035e <GPIO8_IRQHandler>:
2000035e:	e7fe      	b.n	2000035e <GPIO8_IRQHandler>

20000360 <GPIO9_IRQHandler>:
20000360:	e7fe      	b.n	20000360 <GPIO9_IRQHandler>

20000362 <GPIO10_IRQHandler>:
20000362:	e7fe      	b.n	20000362 <GPIO10_IRQHandler>

20000364 <GPIO11_IRQHandler>:
20000364:	e7fe      	b.n	20000364 <GPIO11_IRQHandler>

20000366 <GPIO12_IRQHandler>:
20000366:	e7fe      	b.n	20000366 <GPIO12_IRQHandler>

20000368 <GPIO13_IRQHandler>:
20000368:	e7fe      	b.n	20000368 <GPIO13_IRQHandler>

2000036a <GPIO14_IRQHandler>:
2000036a:	e7fe      	b.n	2000036a <GPIO14_IRQHandler>

2000036c <GPIO15_IRQHandler>:
2000036c:	e7fe      	b.n	2000036c <GPIO15_IRQHandler>

2000036e <GPIO16_IRQHandler>:
2000036e:	e7fe      	b.n	2000036e <GPIO16_IRQHandler>

20000370 <GPIO17_IRQHandler>:
20000370:	e7fe      	b.n	20000370 <GPIO17_IRQHandler>

20000372 <GPIO18_IRQHandler>:
20000372:	e7fe      	b.n	20000372 <GPIO18_IRQHandler>

20000374 <GPIO19_IRQHandler>:
20000374:	e7fe      	b.n	20000374 <GPIO19_IRQHandler>

20000376 <GPIO20_IRQHandler>:
20000376:	e7fe      	b.n	20000376 <GPIO20_IRQHandler>

20000378 <GPIO21_IRQHandler>:
20000378:	e7fe      	b.n	20000378 <GPIO21_IRQHandler>

2000037a <GPIO22_IRQHandler>:
2000037a:	e7fe      	b.n	2000037a <GPIO22_IRQHandler>

2000037c <GPIO23_IRQHandler>:
2000037c:	e7fe      	b.n	2000037c <GPIO23_IRQHandler>

2000037e <GPIO24_IRQHandler>:
2000037e:	e7fe      	b.n	2000037e <GPIO24_IRQHandler>

20000380 <GPIO25_IRQHandler>:
20000380:	e7fe      	b.n	20000380 <GPIO25_IRQHandler>

20000382 <GPIO26_IRQHandler>:
20000382:	e7fe      	b.n	20000382 <GPIO26_IRQHandler>

20000384 <GPIO27_IRQHandler>:
20000384:	e7fe      	b.n	20000384 <GPIO27_IRQHandler>

20000386 <GPIO28_IRQHandler>:
20000386:	e7fe      	b.n	20000386 <GPIO28_IRQHandler>

20000388 <GPIO29_IRQHandler>:
20000388:	e7fe      	b.n	20000388 <GPIO29_IRQHandler>

2000038a <GPIO30_IRQHandler>:
2000038a:	e7fe      	b.n	2000038a <GPIO30_IRQHandler>

2000038c <GPIO31_IRQHandler>:
2000038c:	e7fe      	b.n	2000038c <GPIO31_IRQHandler>

2000038e <ACE_PC0_Flag0_IRQHandler>:
2000038e:	e7fe      	b.n	2000038e <ACE_PC0_Flag0_IRQHandler>

20000390 <ACE_PC0_Flag1_IRQHandler>:
20000390:	e7fe      	b.n	20000390 <ACE_PC0_Flag1_IRQHandler>

20000392 <ACE_PC0_Flag2_IRQHandler>:
20000392:	e7fe      	b.n	20000392 <ACE_PC0_Flag2_IRQHandler>

20000394 <ACE_PC0_Flag3_IRQHandler>:
20000394:	e7fe      	b.n	20000394 <ACE_PC0_Flag3_IRQHandler>

20000396 <ACE_PC1_Flag0_IRQHandler>:
20000396:	e7fe      	b.n	20000396 <ACE_PC1_Flag0_IRQHandler>

20000398 <ACE_PC1_Flag1_IRQHandler>:
20000398:	e7fe      	b.n	20000398 <ACE_PC1_Flag1_IRQHandler>

2000039a <ACE_PC1_Flag2_IRQHandler>:
2000039a:	e7fe      	b.n	2000039a <ACE_PC1_Flag2_IRQHandler>

2000039c <ACE_PC1_Flag3_IRQHandler>:
2000039c:	e7fe      	b.n	2000039c <ACE_PC1_Flag3_IRQHandler>

2000039e <ACE_PC2_Flag0_IRQHandler>:
2000039e:	e7fe      	b.n	2000039e <ACE_PC2_Flag0_IRQHandler>

200003a0 <ACE_PC2_Flag1_IRQHandler>:
200003a0:	e7fe      	b.n	200003a0 <ACE_PC2_Flag1_IRQHandler>

200003a2 <ACE_PC2_Flag2_IRQHandler>:
200003a2:	e7fe      	b.n	200003a2 <ACE_PC2_Flag2_IRQHandler>

200003a4 <ACE_PC2_Flag3_IRQHandler>:
200003a4:	e7fe      	b.n	200003a4 <ACE_PC2_Flag3_IRQHandler>

200003a6 <ACE_ADC0_DataValid_IRQHandler>:
200003a6:	e7fe      	b.n	200003a6 <ACE_ADC0_DataValid_IRQHandler>

200003a8 <ACE_ADC1_DataValid_IRQHandler>:
200003a8:	e7fe      	b.n	200003a8 <ACE_ADC1_DataValid_IRQHandler>

200003aa <ACE_ADC2_DataValid_IRQHandler>:
200003aa:	e7fe      	b.n	200003aa <ACE_ADC2_DataValid_IRQHandler>

200003ac <ACE_ADC0_CalDone_IRQHandler>:
200003ac:	e7fe      	b.n	200003ac <ACE_ADC0_CalDone_IRQHandler>

200003ae <ACE_ADC1_CalDone_IRQHandler>:
200003ae:	e7fe      	b.n	200003ae <ACE_ADC1_CalDone_IRQHandler>

200003b0 <ACE_ADC2_CalDone_IRQHandler>:
200003b0:	e7fe      	b.n	200003b0 <ACE_ADC2_CalDone_IRQHandler>

200003b2 <ACE_ADC0_CalStart_IRQHandler>:
200003b2:	e7fe      	b.n	200003b2 <ACE_ADC0_CalStart_IRQHandler>

200003b4 <ACE_ADC1_CalStart_IRQHandler>:
200003b4:	e7fe      	b.n	200003b4 <ACE_ADC1_CalStart_IRQHandler>

200003b6 <ACE_ADC2_CalStart_IRQHandler>:
200003b6:	e7fe      	b.n	200003b6 <ACE_ADC2_CalStart_IRQHandler>

200003b8 <ACE_Comp0_Fall_IRQHandler>:
200003b8:	e7fe      	b.n	200003b8 <ACE_Comp0_Fall_IRQHandler>

200003ba <ACE_Comp1_Fall_IRQHandler>:
200003ba:	e7fe      	b.n	200003ba <ACE_Comp1_Fall_IRQHandler>

200003bc <ACE_Comp2_Fall_IRQHandler>:
200003bc:	e7fe      	b.n	200003bc <ACE_Comp2_Fall_IRQHandler>

200003be <ACE_Comp3_Fall_IRQHandler>:
200003be:	e7fe      	b.n	200003be <ACE_Comp3_Fall_IRQHandler>

200003c0 <ACE_Comp4_Fall_IRQHandler>:
200003c0:	e7fe      	b.n	200003c0 <ACE_Comp4_Fall_IRQHandler>

200003c2 <ACE_Comp5_Fall_IRQHandler>:
200003c2:	e7fe      	b.n	200003c2 <ACE_Comp5_Fall_IRQHandler>

200003c4 <ACE_Comp6_Fall_IRQHandler>:
200003c4:	e7fe      	b.n	200003c4 <ACE_Comp6_Fall_IRQHandler>

200003c6 <ACE_Comp7_Fall_IRQHandler>:
200003c6:	e7fe      	b.n	200003c6 <ACE_Comp7_Fall_IRQHandler>

200003c8 <ACE_Comp8_Fall_IRQHandler>:
200003c8:	e7fe      	b.n	200003c8 <ACE_Comp8_Fall_IRQHandler>

200003ca <ACE_Comp9_Fall_IRQHandler>:
200003ca:	e7fe      	b.n	200003ca <ACE_Comp9_Fall_IRQHandler>

200003cc <ACE_Comp10_Fall_IRQHandler>:
200003cc:	e7fe      	b.n	200003cc <ACE_Comp10_Fall_IRQHandler>

200003ce <ACE_Comp11_Fall_IRQHandler>:
200003ce:	e7fe      	b.n	200003ce <ACE_Comp11_Fall_IRQHandler>

200003d0 <ACE_Comp0_Rise_IRQHandler>:
200003d0:	e7fe      	b.n	200003d0 <ACE_Comp0_Rise_IRQHandler>

200003d2 <ACE_Comp1_Rise_IRQHandler>:
200003d2:	e7fe      	b.n	200003d2 <ACE_Comp1_Rise_IRQHandler>

200003d4 <ACE_Comp2_Rise_IRQHandler>:
200003d4:	e7fe      	b.n	200003d4 <ACE_Comp2_Rise_IRQHandler>

200003d6 <ACE_Comp3_Rise_IRQHandler>:
200003d6:	e7fe      	b.n	200003d6 <ACE_Comp3_Rise_IRQHandler>

200003d8 <ACE_Comp4_Rise_IRQHandler>:
200003d8:	e7fe      	b.n	200003d8 <ACE_Comp4_Rise_IRQHandler>

200003da <ACE_Comp5_Rise_IRQHandler>:
200003da:	e7fe      	b.n	200003da <ACE_Comp5_Rise_IRQHandler>

200003dc <ACE_Comp6_Rise_IRQHandler>:
200003dc:	e7fe      	b.n	200003dc <ACE_Comp6_Rise_IRQHandler>

200003de <ACE_Comp7_Rise_IRQHandler>:
200003de:	e7fe      	b.n	200003de <ACE_Comp7_Rise_IRQHandler>

200003e0 <ACE_Comp8_Rise_IRQHandler>:
200003e0:	e7fe      	b.n	200003e0 <ACE_Comp8_Rise_IRQHandler>

200003e2 <ACE_Comp9_Rise_IRQHandler>:
200003e2:	e7fe      	b.n	200003e2 <ACE_Comp9_Rise_IRQHandler>

200003e4 <ACE_Comp10_Rise_IRQHandler>:
200003e4:	e7fe      	b.n	200003e4 <ACE_Comp10_Rise_IRQHandler>

200003e6 <ACE_Comp11_Rise_IRQHandler>:
200003e6:	e7fe      	b.n	200003e6 <ACE_Comp11_Rise_IRQHandler>

200003e8 <ACE_ADC0_FifoFull_IRQHandler>:
200003e8:	e7fe      	b.n	200003e8 <ACE_ADC0_FifoFull_IRQHandler>

200003ea <ACE_ADC0_FifoAFull_IRQHandler>:
200003ea:	e7fe      	b.n	200003ea <ACE_ADC0_FifoAFull_IRQHandler>

200003ec <ACE_ADC0_FifoEmpty_IRQHandler>:
200003ec:	e7fe      	b.n	200003ec <ACE_ADC0_FifoEmpty_IRQHandler>

200003ee <ACE_ADC1_FifoFull_IRQHandler>:
200003ee:	e7fe      	b.n	200003ee <ACE_ADC1_FifoFull_IRQHandler>

200003f0 <ACE_ADC1_FifoAFull_IRQHandler>:
200003f0:	e7fe      	b.n	200003f0 <ACE_ADC1_FifoAFull_IRQHandler>

200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>:
200003f2:	e7fe      	b.n	200003f2 <ACE_ADC1_FifoEmpty_IRQHandler>

200003f4 <ACE_ADC2_FifoFull_IRQHandler>:
200003f4:	e7fe      	b.n	200003f4 <ACE_ADC2_FifoFull_IRQHandler>

200003f6 <ACE_ADC2_FifoAFull_IRQHandler>:
200003f6:	e7fe      	b.n	200003f6 <ACE_ADC2_FifoAFull_IRQHandler>

200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>:
200003f8:	e7fe      	b.n	200003f8 <ACE_ADC2_FifoEmpty_IRQHandler>

200003fa <ACE_PPE_Flag0_IRQHandler>:
200003fa:	e7fe      	b.n	200003fa <ACE_PPE_Flag0_IRQHandler>

200003fc <ACE_PPE_Flag1_IRQHandler>:
200003fc:	e7fe      	b.n	200003fc <ACE_PPE_Flag1_IRQHandler>

200003fe <ACE_PPE_Flag2_IRQHandler>:
200003fe:	e7fe      	b.n	200003fe <ACE_PPE_Flag2_IRQHandler>

20000400 <ACE_PPE_Flag3_IRQHandler>:
20000400:	e7fe      	b.n	20000400 <ACE_PPE_Flag3_IRQHandler>

20000402 <ACE_PPE_Flag4_IRQHandler>:
20000402:	e7fe      	b.n	20000402 <ACE_PPE_Flag4_IRQHandler>

20000404 <ACE_PPE_Flag5_IRQHandler>:
20000404:	e7fe      	b.n	20000404 <ACE_PPE_Flag5_IRQHandler>

20000406 <ACE_PPE_Flag6_IRQHandler>:
20000406:	e7fe      	b.n	20000406 <ACE_PPE_Flag6_IRQHandler>

20000408 <ACE_PPE_Flag7_IRQHandler>:
20000408:	e7fe      	b.n	20000408 <ACE_PPE_Flag7_IRQHandler>

2000040a <ACE_PPE_Flag8_IRQHandler>:
2000040a:	e7fe      	b.n	2000040a <ACE_PPE_Flag8_IRQHandler>

2000040c <ACE_PPE_Flag9_IRQHandler>:
2000040c:	e7fe      	b.n	2000040c <ACE_PPE_Flag9_IRQHandler>

2000040e <ACE_PPE_Flag10_IRQHandler>:
2000040e:	e7fe      	b.n	2000040e <ACE_PPE_Flag10_IRQHandler>

20000410 <ACE_PPE_Flag11_IRQHandler>:
20000410:	e7fe      	b.n	20000410 <ACE_PPE_Flag11_IRQHandler>

20000412 <ACE_PPE_Flag12_IRQHandler>:
20000412:	e7fe      	b.n	20000412 <ACE_PPE_Flag12_IRQHandler>

20000414 <ACE_PPE_Flag13_IRQHandler>:
20000414:	e7fe      	b.n	20000414 <ACE_PPE_Flag13_IRQHandler>

20000416 <ACE_PPE_Flag14_IRQHandler>:
20000416:	e7fe      	b.n	20000416 <ACE_PPE_Flag14_IRQHandler>

20000418 <ACE_PPE_Flag15_IRQHandler>:
20000418:	e7fe      	b.n	20000418 <ACE_PPE_Flag15_IRQHandler>

2000041a <ACE_PPE_Flag16_IRQHandler>:
2000041a:	e7fe      	b.n	2000041a <ACE_PPE_Flag16_IRQHandler>

2000041c <ACE_PPE_Flag17_IRQHandler>:
2000041c:	e7fe      	b.n	2000041c <ACE_PPE_Flag17_IRQHandler>

2000041e <ACE_PPE_Flag18_IRQHandler>:
2000041e:	e7fe      	b.n	2000041e <ACE_PPE_Flag18_IRQHandler>

20000420 <ACE_PPE_Flag19_IRQHandler>:
20000420:	e7fe      	b.n	20000420 <ACE_PPE_Flag19_IRQHandler>

20000422 <ACE_PPE_Flag20_IRQHandler>:
20000422:	e7fe      	b.n	20000422 <ACE_PPE_Flag20_IRQHandler>

20000424 <ACE_PPE_Flag21_IRQHandler>:
20000424:	e7fe      	b.n	20000424 <ACE_PPE_Flag21_IRQHandler>

20000426 <ACE_PPE_Flag22_IRQHandler>:
20000426:	e7fe      	b.n	20000426 <ACE_PPE_Flag22_IRQHandler>

20000428 <ACE_PPE_Flag23_IRQHandler>:
20000428:	e7fe      	b.n	20000428 <ACE_PPE_Flag23_IRQHandler>

2000042a <ACE_PPE_Flag24_IRQHandler>:
2000042a:	e7fe      	b.n	2000042a <ACE_PPE_Flag24_IRQHandler>

2000042c <ACE_PPE_Flag25_IRQHandler>:
2000042c:	e7fe      	b.n	2000042c <ACE_PPE_Flag25_IRQHandler>

2000042e <ACE_PPE_Flag26_IRQHandler>:
2000042e:	e7fe      	b.n	2000042e <ACE_PPE_Flag26_IRQHandler>

20000430 <ACE_PPE_Flag27_IRQHandler>:
20000430:	e7fe      	b.n	20000430 <ACE_PPE_Flag27_IRQHandler>

20000432 <ACE_PPE_Flag28_IRQHandler>:
20000432:	e7fe      	b.n	20000432 <ACE_PPE_Flag28_IRQHandler>

20000434 <ACE_PPE_Flag29_IRQHandler>:
20000434:	e7fe      	b.n	20000434 <ACE_PPE_Flag29_IRQHandler>

20000436 <ACE_PPE_Flag30_IRQHandler>:
20000436:	e7fe      	b.n	20000436 <ACE_PPE_Flag30_IRQHandler>

20000438 <ACE_PPE_Flag31_IRQHandler>:
20000438:	e7fe      	b.n	20000438 <ACE_PPE_Flag31_IRQHandler>
2000043a:	0000      	.short	0x0000
2000043c:	20002721 	.word	0x20002721
20000440:	00000000 	.word	0x00000000
20000444:	20000000 	.word	0x20000000
20000448:	20000000 	.word	0x20000000
2000044c:	20004240 	.word	0x20004240
20000450:	20004240 	.word	0x20004240
20000454:	20004240 	.word	0x20004240
20000458:	20004348 	.word	0x20004348
2000045c:	00000000 	.word	0x00000000
20000460:	20004348 	.word	0x20004348
20000464:	200045c8 	.word	0x200045c8
20000468:	20003615 	.word	0x20003615
2000046c:	20001335 	.word	0x20001335

20000470 <__do_global_dtors_aux>:
20000470:	f244 3348 	movw	r3, #17224	; 0x4348
20000474:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000478:	781a      	ldrb	r2, [r3, #0]
2000047a:	b90a      	cbnz	r2, 20000480 <__do_global_dtors_aux+0x10>
2000047c:	2001      	movs	r0, #1
2000047e:	7018      	strb	r0, [r3, #0]
20000480:	4770      	bx	lr
20000482:	bf00      	nop

20000484 <frame_dummy>:
20000484:	f244 2040 	movw	r0, #16960	; 0x4240
20000488:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000048c:	b508      	push	{r3, lr}
2000048e:	6803      	ldr	r3, [r0, #0]
20000490:	b12b      	cbz	r3, 2000049e <frame_dummy+0x1a>
20000492:	f240 0300 	movw	r3, #0
20000496:	f2c0 0300 	movt	r3, #0
2000049a:	b103      	cbz	r3, 2000049e <frame_dummy+0x1a>
2000049c:	4798      	blx	r3
2000049e:	bd08      	pop	{r3, pc}

200004a0 <NVIC_EnableIRQ>:
 *
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
200004a0:	b480      	push	{r7}
200004a2:	b083      	sub	sp, #12
200004a4:	af00      	add	r7, sp, #0
200004a6:	4603      	mov	r3, r0
200004a8:	80fb      	strh	r3, [r7, #6]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
200004aa:	f24e 1300 	movw	r3, #57600	; 0xe100
200004ae:	f2ce 0300 	movt	r3, #57344	; 0xe000
200004b2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
200004b6:	ea4f 1252 	mov.w	r2, r2, lsr #5
200004ba:	88f9      	ldrh	r1, [r7, #6]
200004bc:	f001 011f 	and.w	r1, r1, #31
200004c0:	f04f 0001 	mov.w	r0, #1
200004c4:	fa00 f101 	lsl.w	r1, r0, r1
200004c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
200004cc:	f107 070c 	add.w	r7, r7, #12
200004d0:	46bd      	mov	sp, r7
200004d2:	bc80      	pop	{r7}
200004d4:	4770      	bx	lr
200004d6:	bf00      	nop

200004d8 <NVIC_DisableIRQ>:
 * 
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
200004d8:	b480      	push	{r7}
200004da:	b083      	sub	sp, #12
200004dc:	af00      	add	r7, sp, #0
200004de:	4603      	mov	r3, r0
200004e0:	80fb      	strh	r3, [r7, #6]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
200004e2:	f24e 1300 	movw	r3, #57600	; 0xe100
200004e6:	f2ce 0300 	movt	r3, #57344	; 0xe000
200004ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
200004ee:	ea4f 1252 	mov.w	r2, r2, lsr #5
200004f2:	88f9      	ldrh	r1, [r7, #6]
200004f4:	f001 011f 	and.w	r1, r1, #31
200004f8:	f04f 0001 	mov.w	r0, #1
200004fc:	fa00 f101 	lsl.w	r1, r0, r1
20000500:	f102 0220 	add.w	r2, r2, #32
20000504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20000508:	f107 070c 	add.w	r7, r7, #12
2000050c:	46bd      	mov	sp, r7
2000050e:	bc80      	pop	{r7}
20000510:	4770      	bx	lr
20000512:	bf00      	nop

20000514 <gridEYE_write>:
//--- Grideye Functions ---

// Perform a write to a register on the gridEYE
// reg_addr: 1-byte array containing address of register to read
// recieved_data: 1-byte array containing input data
void gridEYE_write(uint8_t* reg_addr, uint8_t* data){
20000514:	b580      	push	{r7, lr}
20000516:	b086      	sub	sp, #24
20000518:	af02      	add	r7, sp, #8
2000051a:	6078      	str	r0, [r7, #4]
2000051c:	6039      	str	r1, [r7, #0]

	uint8_t signal[] = {*reg_addr, *data};
2000051e:	687b      	ldr	r3, [r7, #4]
20000520:	781a      	ldrb	r2, [r3, #0]
20000522:	683b      	ldr	r3, [r7, #0]
20000524:	781b      	ldrb	r3, [r3, #0]
20000526:	733a      	strb	r2, [r7, #12]
20000528:	737b      	strb	r3, [r7, #13]

	MSS_I2C_write
2000052a:	f107 030c 	add.w	r3, r7, #12
2000052e:	f04f 0200 	mov.w	r2, #0
20000532:	9200      	str	r2, [sp, #0]
20000534:	f244 5054 	movw	r0, #17748	; 0x4554
20000538:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000053c:	f04f 0169 	mov.w	r1, #105	; 0x69
20000540:	461a      	mov	r2, r3
20000542:	f04f 0302 	mov.w	r3, #2
20000546:	f001 f9d5 	bl	200018f4 <MSS_I2C_write>
			signal,
			sizeof(signal),
			MSS_I2C_RELEASE_BUS
		);

	MSS_I2C_wait_complete(&g_mss_i2c1, 100);
2000054a:	f244 5054 	movw	r0, #17748	; 0x4554
2000054e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000552:	f04f 0164 	mov.w	r1, #100	; 0x64
20000556:	f001 fae1 	bl	20001b1c <MSS_I2C_wait_complete>
}//gridEYE_write()
2000055a:	f107 0710 	add.w	r7, r7, #16
2000055e:	46bd      	mov	sp, r7
20000560:	bd80      	pop	{r7, pc}
20000562:	bf00      	nop

20000564 <gridEYE_read>:


// Read from a specific register on the gridEYE
// reg_addr: 1-byte array containing address of register to read
// recieved_data: 1-byte array where received data will be placed
void gridEYE_read(uint8_t* reg_addr, uint8_t* recieved_data ){
20000564:	b580      	push	{r7, lr}
20000566:	b086      	sub	sp, #24
20000568:	af04      	add	r7, sp, #16
2000056a:	6078      	str	r0, [r7, #4]
2000056c:	6039      	str	r1, [r7, #0]

	MSS_I2C_write_read
2000056e:	683b      	ldr	r3, [r7, #0]
20000570:	9300      	str	r3, [sp, #0]
20000572:	f04f 0380 	mov.w	r3, #128	; 0x80
20000576:	9301      	str	r3, [sp, #4]
20000578:	f04f 0300 	mov.w	r3, #0
2000057c:	9302      	str	r3, [sp, #8]
2000057e:	f244 5054 	movw	r0, #17748	; 0x4554
20000582:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000586:	f04f 0169 	mov.w	r1, #105	; 0x69
2000058a:	687a      	ldr	r2, [r7, #4]
2000058c:	f04f 0301 	mov.w	r3, #1
20000590:	f001 fa2a 	bl	200019e8 <MSS_I2C_write_read>
			recieved_data,
			128,
			MSS_I2C_RELEASE_BUS
		);

	MSS_I2C_wait_complete(&g_mss_i2c1, 100);
20000594:	f244 5054 	movw	r0, #17748	; 0x4554
20000598:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000059c:	f04f 0164 	mov.w	r1, #100	; 0x64
200005a0:	f001 fabc 	bl	20001b1c <MSS_I2C_wait_complete>
}//gridEYE_read()
200005a4:	f107 0708 	add.w	r7, r7, #8
200005a8:	46bd      	mov	sp, r7
200005aa:	bd80      	pop	{r7, pc}

200005ac <gridEYE_reset>:


// Reset gridEYE
void gridEYE_reset(){
200005ac:	b580      	push	{r7, lr}
200005ae:	b082      	sub	sp, #8
200005b0:	af00      	add	r7, sp, #0

	uint8_t resAddr[] = {0x1};
200005b2:	f04f 0301 	mov.w	r3, #1
200005b6:	713b      	strb	r3, [r7, #4]
	uint8_t resVal[] = {0x3f};
200005b8:	f04f 033f 	mov.w	r3, #63	; 0x3f
200005bc:	703b      	strb	r3, [r7, #0]
	gridEYE_write(resAddr, resVal);
200005be:	f107 0204 	add.w	r2, r7, #4
200005c2:	463b      	mov	r3, r7
200005c4:	4610      	mov	r0, r2
200005c6:	4619      	mov	r1, r3
200005c8:	f7ff ffa4 	bl	20000514 <gridEYE_write>
}//gridEYE_reset()
200005cc:	f107 0708 	add.w	r7, r7, #8
200005d0:	46bd      	mov	sp, r7
200005d2:	bd80      	pop	{r7, pc}

200005d4 <gridEYE_set_normal_power>:


// Set normal power mode
void gridEYE_set_normal_power(){
200005d4:	b580      	push	{r7, lr}
200005d6:	b082      	sub	sp, #8
200005d8:	af00      	add	r7, sp, #0

	uint8_t powAddr[] = {0x0};
200005da:	f04f 0300 	mov.w	r3, #0
200005de:	713b      	strb	r3, [r7, #4]
	uint8_t powVal[] = {0x0};
200005e0:	f04f 0300 	mov.w	r3, #0
200005e4:	703b      	strb	r3, [r7, #0]
	gridEYE_write(powAddr, powVal);
200005e6:	f107 0204 	add.w	r2, r7, #4
200005ea:	463b      	mov	r3, r7
200005ec:	4610      	mov	r0, r2
200005ee:	4619      	mov	r1, r3
200005f0:	f7ff ff90 	bl	20000514 <gridEYE_write>
}//gridEYE_set_normal()
200005f4:	f107 0708 	add.w	r7, r7, #8
200005f8:	46bd      	mov	sp, r7
200005fa:	bd80      	pop	{r7, pc}

200005fc <gridEYE_init>:


// Reset device, set operation to normal power
void gridEYE_init(){
200005fc:	b580      	push	{r7, lr}
200005fe:	af00      	add	r7, sp, #0
	gridEYE_reset();
20000600:	f7ff ffd4 	bl	200005ac <gridEYE_reset>
	gridEYE_set_normal_power();
20000604:	f7ff ffe6 	bl	200005d4 <gridEYE_set_normal_power>
}//grideye_init()
20000608:	bd80      	pop	{r7, pc}
2000060a:	bf00      	nop

2000060c <raw_to_temp>:

// Function converts a 12 bit 2C number to
// a signed float
float raw_to_temp(uint8_t upper, uint8_t lower){
2000060c:	b580      	push	{r7, lr}
2000060e:	b084      	sub	sp, #16
20000610:	af00      	add	r7, sp, #0
20000612:	4602      	mov	r2, r0
20000614:	460b      	mov	r3, r1
20000616:	71fa      	strb	r2, [r7, #7]
20000618:	71bb      	strb	r3, [r7, #6]

	// TEMPERATURE CONVERSION
	// Data is recieved as a 12 bit 2's complement number
	// Each value represents a 0.25 C temperature difference

	int full = (upper << 8) | lower;
2000061a:	79fb      	ldrb	r3, [r7, #7]
2000061c:	ea4f 2203 	mov.w	r2, r3, lsl #8
20000620:	79bb      	ldrb	r3, [r7, #6]
20000622:	ea42 0303 	orr.w	r3, r2, r3
20000626:	60fb      	str	r3, [r7, #12]

	// If input is negative, perform sign extension
	if (upper &  (1 << 3)){
20000628:	79fb      	ldrb	r3, [r7, #7]
2000062a:	f003 0308 	and.w	r3, r3, #8
2000062e:	2b00      	cmp	r3, #0
20000630:	d005      	beq.n	2000063e <raw_to_temp+0x32>
		full |= 0xFFFFF000;
20000632:	68fb      	ldr	r3, [r7, #12]
20000634:	ea6f 5303 	mvn.w	r3, r3, lsl #20
20000638:	ea6f 5313 	mvn.w	r3, r3, lsr #20
2000063c:	60fb      	str	r3, [r7, #12]
	}
	return (float)full*0.25;
2000063e:	68f8      	ldr	r0, [r7, #12]
20000640:	f002 fdc8 	bl	200031d4 <__aeabi_i2f>
20000644:	4603      	mov	r3, r0
20000646:	4618      	mov	r0, r3
20000648:	4904      	ldr	r1, [pc, #16]	; (2000065c <raw_to_temp+0x50>)
2000064a:	f002 fe17 	bl	2000327c <__aeabi_fmul>
2000064e:	4603      	mov	r3, r0
}//raw_to_temp()
20000650:	4618      	mov	r0, r3
20000652:	f107 0710 	add.w	r7, r7, #16
20000656:	46bd      	mov	sp, r7
20000658:	bd80      	pop	{r7, pc}
2000065a:	bf00      	nop
2000065c:	3e800000 	.word	0x3e800000

20000660 <get_temps_forward>:

// Function converts 128 byte raw data array
// to a set of 64 signed float values
// Data is oriented in the same positions
// as the vision of the grideye (looking outward)
void get_temps_forward(uint8_t* data_in, float temps[][8]){
20000660:	b5b0      	push	{r4, r5, r7, lr}
20000662:	b086      	sub	sp, #24
20000664:	af00      	add	r7, sp, #0
20000666:	6078      	str	r0, [r7, #4]
20000668:	6039      	str	r1, [r7, #0]

	int i = 0;
2000066a:	f04f 0300 	mov.w	r3, #0
2000066e:	60fb      	str	r3, [r7, #12]
	int j = 0;
20000670:	f04f 0300 	mov.w	r3, #0
20000674:	613b      	str	r3, [r7, #16]
	int k = 7;
20000676:	f04f 0307 	mov.w	r3, #7
2000067a:	617b      	str	r3, [r7, #20]

	// Iterate through all data
	for (i = 0; i < 128; i += 2) {
2000067c:	f04f 0300 	mov.w	r3, #0
20000680:	60fb      	str	r3, [r7, #12]
20000682:	e02e      	b.n	200006e2 <get_temps_forward+0x82>
		// Move one column to the left every 16 input bytes
		if(i && i%16 == 0){
20000684:	68fb      	ldr	r3, [r7, #12]
20000686:	2b00      	cmp	r3, #0
20000688:	d00b      	beq.n	200006a2 <get_temps_forward+0x42>
2000068a:	68fb      	ldr	r3, [r7, #12]
2000068c:	f003 030f 	and.w	r3, r3, #15
20000690:	2b00      	cmp	r3, #0
20000692:	d106      	bne.n	200006a2 <get_temps_forward+0x42>
			--k;
20000694:	697b      	ldr	r3, [r7, #20]
20000696:	f103 33ff 	add.w	r3, r3, #4294967295
2000069a:	617b      	str	r3, [r7, #20]
			j = 0;
2000069c:	f04f 0300 	mov.w	r3, #0
200006a0:	613b      	str	r3, [r7, #16]
		}

		// Read upper and lower bytes, convert to float, store
		temps[j][k] = raw_to_temp(data_in[i + 1], data_in[i]);
200006a2:	693b      	ldr	r3, [r7, #16]
200006a4:	ea4f 1243 	mov.w	r2, r3, lsl #5
200006a8:	683b      	ldr	r3, [r7, #0]
200006aa:	eb02 0403 	add.w	r4, r2, r3
200006ae:	697d      	ldr	r5, [r7, #20]
200006b0:	68fb      	ldr	r3, [r7, #12]
200006b2:	f103 0201 	add.w	r2, r3, #1
200006b6:	687b      	ldr	r3, [r7, #4]
200006b8:	4413      	add	r3, r2
200006ba:	781a      	ldrb	r2, [r3, #0]
200006bc:	68f9      	ldr	r1, [r7, #12]
200006be:	687b      	ldr	r3, [r7, #4]
200006c0:	440b      	add	r3, r1
200006c2:	781b      	ldrb	r3, [r3, #0]
200006c4:	4610      	mov	r0, r2
200006c6:	4619      	mov	r1, r3
200006c8:	f7ff ffa0 	bl	2000060c <raw_to_temp>
200006cc:	4603      	mov	r3, r0
200006ce:	f844 3025 	str.w	r3, [r4, r5, lsl #2]

		++j;
200006d2:	693b      	ldr	r3, [r7, #16]
200006d4:	f103 0301 	add.w	r3, r3, #1
200006d8:	613b      	str	r3, [r7, #16]
	int i = 0;
	int j = 0;
	int k = 7;

	// Iterate through all data
	for (i = 0; i < 128; i += 2) {
200006da:	68fb      	ldr	r3, [r7, #12]
200006dc:	f103 0302 	add.w	r3, r3, #2
200006e0:	60fb      	str	r3, [r7, #12]
200006e2:	68fb      	ldr	r3, [r7, #12]
200006e4:	2b7f      	cmp	r3, #127	; 0x7f
200006e6:	ddcd      	ble.n	20000684 <get_temps_forward+0x24>
		// Read upper and lower bytes, convert to float, store
		temps[j][k] = raw_to_temp(data_in[i + 1], data_in[i]);

		++j;
	}
}//get_temps_forward()
200006e8:	f107 0718 	add.w	r7, r7, #24
200006ec:	46bd      	mov	sp, r7
200006ee:	bdb0      	pop	{r4, r5, r7, pc}

200006f0 <get_max_temp>:
	}
}//get_temps_reversed()


// Function returns the highest temperature in the 8x8 array
float get_max_temp(float temps[][8]){
200006f0:	b590      	push	{r4, r7, lr}
200006f2:	b087      	sub	sp, #28
200006f4:	af00      	add	r7, sp, #0
200006f6:	6078      	str	r0, [r7, #4]
	float current_max = 0;
200006f8:	4b1f      	ldr	r3, [pc, #124]	; (20000778 <get_max_temp+0x88>)
200006fa:	60fb      	str	r3, [r7, #12]

	int i;
	int j;
	for(i = 0; i < 8; ++i){
200006fc:	f04f 0300 	mov.w	r3, #0
20000700:	613b      	str	r3, [r7, #16]
20000702:	e02f      	b.n	20000764 <get_max_temp+0x74>
		for(j = 0; j < 8; ++j){
20000704:	f04f 0300 	mov.w	r3, #0
20000708:	617b      	str	r3, [r7, #20]
2000070a:	e024      	b.n	20000756 <get_max_temp+0x66>
			if (temps[i][j] > current_max){
2000070c:	693b      	ldr	r3, [r7, #16]
2000070e:	ea4f 1243 	mov.w	r2, r3, lsl #5
20000712:	687b      	ldr	r3, [r7, #4]
20000714:	4413      	add	r3, r2
20000716:	697a      	ldr	r2, [r7, #20]
20000718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000071c:	f04f 0200 	mov.w	r2, #0
20000720:	4614      	mov	r4, r2
20000722:	4618      	mov	r0, r3
20000724:	68f9      	ldr	r1, [r7, #12]
20000726:	f002 ff65 	bl	200035f4 <__aeabi_fcmpgt>
2000072a:	4603      	mov	r3, r0
2000072c:	2b00      	cmp	r3, #0
2000072e:	d002      	beq.n	20000736 <get_max_temp+0x46>
20000730:	f04f 0301 	mov.w	r3, #1
20000734:	461c      	mov	r4, r3
20000736:	b2e3      	uxtb	r3, r4
20000738:	2b00      	cmp	r3, #0
2000073a:	d008      	beq.n	2000074e <get_max_temp+0x5e>
				current_max = temps[i][j];
2000073c:	693b      	ldr	r3, [r7, #16]
2000073e:	ea4f 1243 	mov.w	r2, r3, lsl #5
20000742:	687b      	ldr	r3, [r7, #4]
20000744:	4413      	add	r3, r2
20000746:	697a      	ldr	r2, [r7, #20]
20000748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000074c:	60fb      	str	r3, [r7, #12]
	float current_max = 0;

	int i;
	int j;
	for(i = 0; i < 8; ++i){
		for(j = 0; j < 8; ++j){
2000074e:	697b      	ldr	r3, [r7, #20]
20000750:	f103 0301 	add.w	r3, r3, #1
20000754:	617b      	str	r3, [r7, #20]
20000756:	697b      	ldr	r3, [r7, #20]
20000758:	2b07      	cmp	r3, #7
2000075a:	ddd7      	ble.n	2000070c <get_max_temp+0x1c>
float get_max_temp(float temps[][8]){
	float current_max = 0;

	int i;
	int j;
	for(i = 0; i < 8; ++i){
2000075c:	693b      	ldr	r3, [r7, #16]
2000075e:	f103 0301 	add.w	r3, r3, #1
20000762:	613b      	str	r3, [r7, #16]
20000764:	693b      	ldr	r3, [r7, #16]
20000766:	2b07      	cmp	r3, #7
20000768:	ddcc      	ble.n	20000704 <get_max_temp+0x14>
				current_max = temps[i][j];
			}
		}
	}

	return current_max;
2000076a:	68fb      	ldr	r3, [r7, #12]
}//get_max_temp()
2000076c:	4618      	mov	r0, r3
2000076e:	f107 071c 	add.w	r7, r7, #28
20000772:	46bd      	mov	sp, r7
20000774:	bd90      	pop	{r4, r7, pc}
20000776:	bf00      	nop
20000778:	00000000 	.word	0x00000000

2000077c <LED_reset>:
 * since they're upside-down on the head piece, this is reversed.
 * thus, LED[0] is the rightmost, LED[23] is the leftmost.
 */

// Reset LED values
void LED_reset(volatile uint32_t* LED){
2000077c:	b480      	push	{r7}
2000077e:	b085      	sub	sp, #20
20000780:	af00      	add	r7, sp, #0
20000782:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < NUMLEDS; ++i){
20000784:	f04f 0300 	mov.w	r3, #0
20000788:	60fb      	str	r3, [r7, #12]
2000078a:	e00b      	b.n	200007a4 <LED_reset+0x28>
		LED[i] = off;
2000078c:	68fb      	ldr	r3, [r7, #12]
2000078e:	ea4f 0283 	mov.w	r2, r3, lsl #2
20000792:	687b      	ldr	r3, [r7, #4]
20000794:	4413      	add	r3, r2
20000796:	f04f 0200 	mov.w	r2, #0
2000079a:	601a      	str	r2, [r3, #0]
 */

// Reset LED values
void LED_reset(volatile uint32_t* LED){
	int i;
	for (i = 0; i < NUMLEDS; ++i){
2000079c:	68fb      	ldr	r3, [r7, #12]
2000079e:	f103 0301 	add.w	r3, r3, #1
200007a2:	60fb      	str	r3, [r7, #12]
200007a4:	68fb      	ldr	r3, [r7, #12]
200007a6:	2b17      	cmp	r3, #23
200007a8:	ddf0      	ble.n	2000078c <LED_reset+0x10>
		LED[i] = off;
	}
}
200007aa:	f107 0714 	add.w	r7, r7, #20
200007ae:	46bd      	mov	sp, r7
200007b0:	bc80      	pop	{r7}
200007b2:	4770      	bx	lr

200007b4 <data_to_cm>:
// Sonic globals
#define SONIC_ADDR 0x40050100;


// Returns a decimal value representation of the distance in centimeters
float data_to_cm(uint32_t in_data){
200007b4:	b580      	push	{r7, lr}
200007b6:	b084      	sub	sp, #16
200007b8:	af00      	add	r7, sp, #0
200007ba:	6078      	str	r0, [r7, #4]

	// Convert 10nS count to 1mS count
	float cm_data = (float)in_data / 100;
200007bc:	6878      	ldr	r0, [r7, #4]
200007be:	f002 fd05 	bl	200031cc <__aeabi_ui2f>
200007c2:	4603      	mov	r3, r0
200007c4:	4618      	mov	r0, r3
200007c6:	4907      	ldr	r1, [pc, #28]	; (200007e4 <data_to_cm+0x30>)
200007c8:	f002 fe0c 	bl	200033e4 <__aeabi_fdiv>
200007cc:	4603      	mov	r3, r0
200007ce:	60fb      	str	r3, [r7, #12]

	// Divide by 56 to get data in cm according to datasheet
	return cm_data/56;
200007d0:	68f8      	ldr	r0, [r7, #12]
200007d2:	4905      	ldr	r1, [pc, #20]	; (200007e8 <data_to_cm+0x34>)
200007d4:	f002 fe06 	bl	200033e4 <__aeabi_fdiv>
200007d8:	4603      	mov	r3, r0
}
200007da:	4618      	mov	r0, r3
200007dc:	f107 0710 	add.w	r7, r7, #16
200007e0:	46bd      	mov	sp, r7
200007e2:	bd80      	pop	{r7, pc}
200007e4:	42c80000 	.word	0x42c80000
200007e8:	42600000 	.word	0x42600000
200007ec:	00000000 	.word	0x00000000

200007f0 <wrap_angle_360>:
#define EUL_HEADING_LSB 		0x1A

#define CHIP_ID_REG 0x00

double wrap_angle_360(double x)
{
200007f0:	b590      	push	{r4, r7, lr}
200007f2:	b083      	sub	sp, #12
200007f4:	af00      	add	r7, sp, #0
200007f6:	e9c7 0100 	strd	r0, r1, [r7]
	while (x < 0) x += 360.0;
200007fa:	e00a      	b.n	20000812 <wrap_angle_360+0x22>
200007fc:	e9d7 0100 	ldrd	r0, r1, [r7]
20000800:	a321      	add	r3, pc, #132	; (adr r3, 20000888 <wrap_angle_360+0x98>)
20000802:	e9d3 2300 	ldrd	r2, r3, [r3]
20000806:	f001 ff97 	bl	20002738 <__adddf3>
2000080a:	4602      	mov	r2, r0
2000080c:	460b      	mov	r3, r1
2000080e:	e9c7 2300 	strd	r2, r3, [r7]
20000812:	f04f 0300 	mov.w	r3, #0
20000816:	461c      	mov	r4, r3
20000818:	e9d7 0100 	ldrd	r0, r1, [r7]
2000081c:	f04f 0200 	mov.w	r2, #0
20000820:	f04f 0300 	mov.w	r3, #0
20000824:	f002 fbac 	bl	20002f80 <__aeabi_dcmplt>
20000828:	4603      	mov	r3, r0
2000082a:	2b00      	cmp	r3, #0
2000082c:	d002      	beq.n	20000834 <wrap_angle_360+0x44>
2000082e:	f04f 0301 	mov.w	r3, #1
20000832:	461c      	mov	r4, r3
20000834:	b2e3      	uxtb	r3, r4
20000836:	2b00      	cmp	r3, #0
20000838:	d1e0      	bne.n	200007fc <wrap_angle_360+0xc>
	while (x >= 360.0) x -= 360.0;
2000083a:	e00a      	b.n	20000852 <wrap_angle_360+0x62>
2000083c:	e9d7 0100 	ldrd	r0, r1, [r7]
20000840:	a311      	add	r3, pc, #68	; (adr r3, 20000888 <wrap_angle_360+0x98>)
20000842:	e9d3 2300 	ldrd	r2, r3, [r3]
20000846:	f001 ff75 	bl	20002734 <__aeabi_dsub>
2000084a:	4602      	mov	r2, r0
2000084c:	460b      	mov	r3, r1
2000084e:	e9c7 2300 	strd	r2, r3, [r7]
20000852:	f04f 0300 	mov.w	r3, #0
20000856:	461c      	mov	r4, r3
20000858:	e9d7 0100 	ldrd	r0, r1, [r7]
2000085c:	a30a      	add	r3, pc, #40	; (adr r3, 20000888 <wrap_angle_360+0x98>)
2000085e:	e9d3 2300 	ldrd	r2, r3, [r3]
20000862:	f002 fba1 	bl	20002fa8 <__aeabi_dcmpge>
20000866:	4603      	mov	r3, r0
20000868:	2b00      	cmp	r3, #0
2000086a:	d002      	beq.n	20000872 <wrap_angle_360+0x82>
2000086c:	f04f 0301 	mov.w	r3, #1
20000870:	461c      	mov	r4, r3
20000872:	b2e3      	uxtb	r3, r4
20000874:	2b00      	cmp	r3, #0
20000876:	d1e1      	bne.n	2000083c <wrap_angle_360+0x4c>
	return x;
20000878:	e9d7 2300 	ldrd	r2, r3, [r7]
}
2000087c:	4610      	mov	r0, r2
2000087e:	4619      	mov	r1, r3
20000880:	f107 070c 	add.w	r7, r7, #12
20000884:	46bd      	mov	sp, r7
20000886:	bd90      	pop	{r4, r7, pc}
20000888:	00000000 	.word	0x00000000
2000088c:	40768000 	.word	0x40768000

20000890 <wrap_angle_180>:

double wrap_angle_180(double x)
{
20000890:	b590      	push	{r4, r7, lr}
20000892:	b083      	sub	sp, #12
20000894:	af00      	add	r7, sp, #0
20000896:	e9c7 0100 	strd	r0, r1, [r7]
	while (x < -180.0) x += 360.0;
2000089a:	e00a      	b.n	200008b2 <wrap_angle_180+0x22>
2000089c:	e9d7 0100 	ldrd	r0, r1, [r7]
200008a0:	a321      	add	r3, pc, #132	; (adr r3, 20000928 <wrap_angle_180+0x98>)
200008a2:	e9d3 2300 	ldrd	r2, r3, [r3]
200008a6:	f001 ff47 	bl	20002738 <__adddf3>
200008aa:	4602      	mov	r2, r0
200008ac:	460b      	mov	r3, r1
200008ae:	e9c7 2300 	strd	r2, r3, [r7]
200008b2:	f04f 0300 	mov.w	r3, #0
200008b6:	461c      	mov	r4, r3
200008b8:	e9d7 0100 	ldrd	r0, r1, [r7]
200008bc:	a31c      	add	r3, pc, #112	; (adr r3, 20000930 <wrap_angle_180+0xa0>)
200008be:	e9d3 2300 	ldrd	r2, r3, [r3]
200008c2:	f002 fb5d 	bl	20002f80 <__aeabi_dcmplt>
200008c6:	4603      	mov	r3, r0
200008c8:	2b00      	cmp	r3, #0
200008ca:	d002      	beq.n	200008d2 <wrap_angle_180+0x42>
200008cc:	f04f 0301 	mov.w	r3, #1
200008d0:	461c      	mov	r4, r3
200008d2:	b2e3      	uxtb	r3, r4
200008d4:	2b00      	cmp	r3, #0
200008d6:	d1e1      	bne.n	2000089c <wrap_angle_180+0xc>
	while (x >= 180.0) x -= 360.0;
200008d8:	e00a      	b.n	200008f0 <wrap_angle_180+0x60>
200008da:	e9d7 0100 	ldrd	r0, r1, [r7]
200008de:	a312      	add	r3, pc, #72	; (adr r3, 20000928 <wrap_angle_180+0x98>)
200008e0:	e9d3 2300 	ldrd	r2, r3, [r3]
200008e4:	f001 ff26 	bl	20002734 <__aeabi_dsub>
200008e8:	4602      	mov	r2, r0
200008ea:	460b      	mov	r3, r1
200008ec:	e9c7 2300 	strd	r2, r3, [r7]
200008f0:	f04f 0300 	mov.w	r3, #0
200008f4:	461c      	mov	r4, r3
200008f6:	e9d7 0100 	ldrd	r0, r1, [r7]
200008fa:	a30f      	add	r3, pc, #60	; (adr r3, 20000938 <wrap_angle_180+0xa8>)
200008fc:	e9d3 2300 	ldrd	r2, r3, [r3]
20000900:	f002 fb52 	bl	20002fa8 <__aeabi_dcmpge>
20000904:	4603      	mov	r3, r0
20000906:	2b00      	cmp	r3, #0
20000908:	d002      	beq.n	20000910 <wrap_angle_180+0x80>
2000090a:	f04f 0301 	mov.w	r3, #1
2000090e:	461c      	mov	r4, r3
20000910:	b2e3      	uxtb	r3, r4
20000912:	2b00      	cmp	r3, #0
20000914:	d1e1      	bne.n	200008da <wrap_angle_180+0x4a>
	return x;
20000916:	e9d7 2300 	ldrd	r2, r3, [r7]
}
2000091a:	4610      	mov	r0, r2
2000091c:	4619      	mov	r1, r3
2000091e:	f107 070c 	add.w	r7, r7, #12
20000922:	46bd      	mov	sp, r7
20000924:	bd90      	pop	{r4, r7, pc}
20000926:	bf00      	nop
20000928:	00000000 	.word	0x00000000
2000092c:	40768000 	.word	0x40768000
20000930:	00000000 	.word	0x00000000
20000934:	c0668000 	.word	0xc0668000
20000938:	00000000 	.word	0x00000000
2000093c:	40668000 	.word	0x40668000

20000940 <init_BNO055>:

int init_BNO055(uint8_t dev_addr, uint8_t mode)
{
20000940:	b580      	push	{r7, lr}
20000942:	b088      	sub	sp, #32
20000944:	af04      	add	r7, sp, #16
20000946:	4602      	mov	r2, r0
20000948:	460b      	mov	r3, r1
2000094a:	71fa      	strb	r2, [r7, #7]
2000094c:	71bb      	strb	r3, [r7, #6]
	// Set up MSS I2C driver struct
	MSS_I2C_init(&g_mss_i2c1 , 0x0, MSS_I2C_PCLK_DIV_256 );
2000094e:	f244 5054 	movw	r0, #17748	; 0x4554
20000952:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000956:	f04f 0100 	mov.w	r1, #0
2000095a:	f04f 0200 	mov.w	r2, #0
2000095e:	f000 ff13 	bl	20001788 <MSS_I2C_init>


	// Read chip ID
	uint8_t read_id_seq[] = {CHIP_ID_REG};
20000962:	f04f 0300 	mov.w	r3, #0
20000966:	733b      	strb	r3, [r7, #12]
	uint8_t chip_id;
	MSS_I2C_write_read
20000968:	79fa      	ldrb	r2, [r7, #7]
2000096a:	f107 030c 	add.w	r3, r7, #12
2000096e:	f107 010b 	add.w	r1, r7, #11
20000972:	9100      	str	r1, [sp, #0]
20000974:	f04f 0101 	mov.w	r1, #1
20000978:	9101      	str	r1, [sp, #4]
2000097a:	f04f 0100 	mov.w	r1, #0
2000097e:	9102      	str	r1, [sp, #8]
20000980:	f244 5054 	movw	r0, #17748	; 0x4554
20000984:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000988:	4611      	mov	r1, r2
2000098a:	461a      	mov	r2, r3
2000098c:	f04f 0301 	mov.w	r3, #1
20000990:	f001 f82a 	bl	200019e8 <MSS_I2C_write_read>
		1,
		&chip_id,
		1,
		MSS_I2C_RELEASE_BUS
	);
	MSS_I2C_wait_complete(&g_mss_i2c1, MSS_I2C_RELEASE_BUS);
20000994:	f244 5054 	movw	r0, #17748	; 0x4554
20000998:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000099c:	f04f 0100 	mov.w	r1, #0
200009a0:	f001 f8bc 	bl	20001b1c <MSS_I2C_wait_complete>
	if (chip_id != 0xA0) return -1;
200009a4:	7afb      	ldrb	r3, [r7, #11]
200009a6:	2ba0      	cmp	r3, #160	; 0xa0
200009a8:	d002      	beq.n	200009b0 <init_BNO055+0x70>
200009aa:	f04f 33ff 	mov.w	r3, #4294967295
200009ae:	e01e      	b.n	200009ee <init_BNO055+0xae>

	// Set mode to NDOF
	uint8_t write_mode_seq[] = { OPR_MODE_REG, mode };
200009b0:	f04f 033d 	mov.w	r3, #61	; 0x3d
200009b4:	723b      	strb	r3, [r7, #8]
200009b6:	79bb      	ldrb	r3, [r7, #6]
200009b8:	727b      	strb	r3, [r7, #9]
	MSS_I2C_write
200009ba:	79fa      	ldrb	r2, [r7, #7]
200009bc:	f107 0308 	add.w	r3, r7, #8
200009c0:	f04f 0100 	mov.w	r1, #0
200009c4:	9100      	str	r1, [sp, #0]
200009c6:	f244 5054 	movw	r0, #17748	; 0x4554
200009ca:	f2c2 0000 	movt	r0, #8192	; 0x2000
200009ce:	4611      	mov	r1, r2
200009d0:	461a      	mov	r2, r3
200009d2:	f04f 0302 	mov.w	r3, #2
200009d6:	f000 ff8d 	bl	200018f4 <MSS_I2C_write>
		dev_addr,
		write_mode_seq,
		2,
		MSS_I2C_RELEASE_BUS
	);
	MSS_I2C_wait_complete(&g_mss_i2c1, MSS_I2C_NO_TIMEOUT);
200009da:	f244 5054 	movw	r0, #17748	; 0x4554
200009de:	f2c2 0000 	movt	r0, #8192	; 0x2000
200009e2:	f04f 0100 	mov.w	r1, #0
200009e6:	f001 f899 	bl	20001b1c <MSS_I2C_wait_complete>

	return 0;
200009ea:	f04f 0300 	mov.w	r3, #0
}
200009ee:	4618      	mov	r0, r3
200009f0:	f107 0710 	add.w	r7, r7, #16
200009f4:	46bd      	mov	sp, r7
200009f6:	bd80      	pop	{r7, pc}

200009f8 <remap_axes_BNO055>:

void remap_axes_BNO055(uint8_t dev_addr, uint8_t new_x_axis, uint8_t new_y_axis, uint8_t new_z_axis, uint8_t new_x_sign, uint8_t new_y_sign, uint8_t new_z_sign)
{
200009f8:	b580      	push	{r7, lr}
200009fa:	b086      	sub	sp, #24
200009fc:	af02      	add	r7, sp, #8
200009fe:	71f8      	strb	r0, [r7, #7]
20000a00:	71b9      	strb	r1, [r7, #6]
20000a02:	717a      	strb	r2, [r7, #5]
20000a04:	713b      	strb	r3, [r7, #4]
	// Set new axes
	uint8_t combined_axes = (new_x_axis << 4) + (new_y_axis << 2) + new_z_axis;
20000a06:	79bb      	ldrb	r3, [r7, #6]
20000a08:	ea4f 1303 	mov.w	r3, r3, lsl #4
20000a0c:	b2da      	uxtb	r2, r3
20000a0e:	797b      	ldrb	r3, [r7, #5]
20000a10:	ea4f 0383 	mov.w	r3, r3, lsl #2
20000a14:	b2db      	uxtb	r3, r3
20000a16:	4413      	add	r3, r2
20000a18:	b2da      	uxtb	r2, r3
20000a1a:	793b      	ldrb	r3, [r7, #4]
20000a1c:	4413      	add	r3, r2
20000a1e:	73bb      	strb	r3, [r7, #14]
	uint8_t write_axes_seq[] = { AXIS_MAP_CONFIG_REG, combined_axes };
20000a20:	f04f 0341 	mov.w	r3, #65	; 0x41
20000a24:	733b      	strb	r3, [r7, #12]
20000a26:	7bbb      	ldrb	r3, [r7, #14]
20000a28:	737b      	strb	r3, [r7, #13]
	MSS_I2C_write
20000a2a:	79fa      	ldrb	r2, [r7, #7]
20000a2c:	f107 030c 	add.w	r3, r7, #12
20000a30:	f04f 0100 	mov.w	r1, #0
20000a34:	9100      	str	r1, [sp, #0]
20000a36:	f244 5054 	movw	r0, #17748	; 0x4554
20000a3a:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000a3e:	4611      	mov	r1, r2
20000a40:	461a      	mov	r2, r3
20000a42:	f04f 0302 	mov.w	r3, #2
20000a46:	f000 ff55 	bl	200018f4 <MSS_I2C_write>
		dev_addr,
		write_axes_seq,
		2,
		MSS_I2C_RELEASE_BUS
	);
	MSS_I2C_wait_complete(&g_mss_i2c1, MSS_I2C_NO_TIMEOUT);
20000a4a:	f244 5054 	movw	r0, #17748	; 0x4554
20000a4e:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000a52:	f04f 0100 	mov.w	r1, #0
20000a56:	f001 f861 	bl	20001b1c <MSS_I2C_wait_complete>

	// Set new signs
	uint8_t combined_signs = (new_x_sign << 2) + (new_y_sign << 1) + new_z_sign;
20000a5a:	7e3b      	ldrb	r3, [r7, #24]
20000a5c:	ea4f 0383 	mov.w	r3, r3, lsl #2
20000a60:	b2da      	uxtb	r2, r3
20000a62:	7f3b      	ldrb	r3, [r7, #28]
20000a64:	ea4f 0343 	mov.w	r3, r3, lsl #1
20000a68:	b2db      	uxtb	r3, r3
20000a6a:	4413      	add	r3, r2
20000a6c:	b2da      	uxtb	r2, r3
20000a6e:	f897 3020 	ldrb.w	r3, [r7, #32]
20000a72:	4413      	add	r3, r2
20000a74:	73fb      	strb	r3, [r7, #15]
	uint8_t write_signs_seq[] = { AXIS_MAP_SIGN_REG, combined_signs };
20000a76:	f04f 0342 	mov.w	r3, #66	; 0x42
20000a7a:	723b      	strb	r3, [r7, #8]
20000a7c:	7bfb      	ldrb	r3, [r7, #15]
20000a7e:	727b      	strb	r3, [r7, #9]
	MSS_I2C_write
20000a80:	79fa      	ldrb	r2, [r7, #7]
20000a82:	f107 0308 	add.w	r3, r7, #8
20000a86:	f04f 0100 	mov.w	r1, #0
20000a8a:	9100      	str	r1, [sp, #0]
20000a8c:	f244 5054 	movw	r0, #17748	; 0x4554
20000a90:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000a94:	4611      	mov	r1, r2
20000a96:	461a      	mov	r2, r3
20000a98:	f04f 0302 	mov.w	r3, #2
20000a9c:	f000 ff2a 	bl	200018f4 <MSS_I2C_write>
		dev_addr,
		write_signs_seq,
		2,
		MSS_I2C_RELEASE_BUS
	);
	MSS_I2C_wait_complete(&g_mss_i2c1, MSS_I2C_NO_TIMEOUT);
20000aa0:	f244 5054 	movw	r0, #17748	; 0x4554
20000aa4:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000aa8:	f04f 0100 	mov.w	r1, #0
20000aac:	f001 f836 	bl	20001b1c <MSS_I2C_wait_complete>
}
20000ab0:	f107 0710 	add.w	r7, r7, #16
20000ab4:	46bd      	mov	sp, r7
20000ab6:	bd80      	pop	{r7, pc}

20000ab8 <read_heading_BNO055>:

double read_heading_BNO055(uint8_t dev_addr)
{
20000ab8:	b580      	push	{r7, lr}
20000aba:	b088      	sub	sp, #32
20000abc:	af04      	add	r7, sp, #16
20000abe:	4603      	mov	r3, r0
20000ac0:	71fb      	strb	r3, [r7, #7]
	int32_t heading = 0;
20000ac2:	f04f 0300 	mov.w	r3, #0
20000ac6:	60fb      	str	r3, [r7, #12]
	uint8_t read_heading_seq[] = {EUL_HEADING_LSB, EUL_HEADING_MSB};
20000ac8:	f244 03b8 	movw	r3, #16568	; 0x40b8
20000acc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ad0:	881b      	ldrh	r3, [r3, #0]
20000ad2:	813b      	strh	r3, [r7, #8]
	MSS_I2C_write_read
20000ad4:	f107 010c 	add.w	r1, r7, #12
20000ad8:	79fa      	ldrb	r2, [r7, #7]
20000ada:	f107 0308 	add.w	r3, r7, #8
20000ade:	9100      	str	r1, [sp, #0]
20000ae0:	f04f 0102 	mov.w	r1, #2
20000ae4:	9101      	str	r1, [sp, #4]
20000ae6:	f04f 0101 	mov.w	r1, #1
20000aea:	9102      	str	r1, [sp, #8]
20000aec:	f244 5054 	movw	r0, #17748	; 0x4554
20000af0:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000af4:	4611      	mov	r1, r2
20000af6:	461a      	mov	r2, r3
20000af8:	f04f 0302 	mov.w	r3, #2
20000afc:	f000 ff74 	bl	200019e8 <MSS_I2C_write_read>
		2,
		&heading,
		2,
		MSS_I2C_HOLD_BUS
	);
	MSS_I2C_wait_complete(&g_mss_i2c1, MSS_I2C_RELEASE_BUS);
20000b00:	f244 5054 	movw	r0, #17748	; 0x4554
20000b04:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000b08:	f04f 0100 	mov.w	r1, #0
20000b0c:	f001 f806 	bl	20001b1c <MSS_I2C_wait_complete>
	return wrap_angle_360(heading/16.0);
20000b10:	68fb      	ldr	r3, [r7, #12]
20000b12:	4618      	mov	r0, r3
20000b14:	f001 ff5c 	bl	200029d0 <__aeabi_i2d>
20000b18:	4602      	mov	r2, r0
20000b1a:	460b      	mov	r3, r1
20000b1c:	4610      	mov	r0, r2
20000b1e:	4619      	mov	r1, r3
20000b20:	f04f 0200 	mov.w	r2, #0
20000b24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
20000b28:	f503 1340 	add.w	r3, r3, #3145728	; 0x300000
20000b2c:	f002 f8e0 	bl	20002cf0 <__aeabi_ddiv>
20000b30:	4602      	mov	r2, r0
20000b32:	460b      	mov	r3, r1
20000b34:	4610      	mov	r0, r2
20000b36:	4619      	mov	r1, r3
20000b38:	f7ff fe5a 	bl	200007f0 <wrap_angle_360>
20000b3c:	4602      	mov	r2, r0
20000b3e:	460b      	mov	r3, r1
}
20000b40:	4610      	mov	r0, r2
20000b42:	4619      	mov	r1, r3
20000b44:	f107 0710 	add.w	r7, r7, #16
20000b48:	46bd      	mov	sp, r7
20000b4a:	bd80      	pop	{r7, pc}

20000b4c <calc_display_angle>:

double calc_display_angle(const uint8_t display_addr, const uint8_t sensor_addr, const uint8_t init)
{
20000b4c:	b580      	push	{r7, lr}
20000b4e:	b086      	sub	sp, #24
20000b50:	af00      	add	r7, sp, #0
20000b52:	4613      	mov	r3, r2
20000b54:	4602      	mov	r2, r0
20000b56:	71fa      	strb	r2, [r7, #7]
20000b58:	460a      	mov	r2, r1
20000b5a:	71ba      	strb	r2, [r7, #6]
20000b5c:	717b      	strb	r3, [r7, #5]
	static double baseline_heading_display;
	static double baseline_heading_sensor;

	if (init)
20000b5e:	797b      	ldrb	r3, [r7, #5]
20000b60:	2b00      	cmp	r3, #0
20000b62:	d013      	beq.n	20000b8c <calc_display_angle+0x40>
	{
		baseline_heading_display = read_heading_BNO055(display_addr);
20000b64:	79fb      	ldrb	r3, [r7, #7]
20000b66:	4618      	mov	r0, r3
20000b68:	f7ff ffa6 	bl	20000ab8 <read_heading_BNO055>
20000b6c:	f244 3350 	movw	r3, #17232	; 0x4350
20000b70:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b74:	e9c3 0100 	strd	r0, r1, [r3]
		baseline_heading_sensor = read_heading_BNO055(sensor_addr);
20000b78:	79bb      	ldrb	r3, [r7, #6]
20000b7a:	4618      	mov	r0, r3
20000b7c:	f7ff ff9c 	bl	20000ab8 <read_heading_BNO055>
20000b80:	f244 3358 	movw	r3, #17240	; 0x4358
20000b84:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b88:	e9c3 0100 	strd	r0, r1, [r3]
	}

	double heading_sensor = wrap_angle_180(read_heading_BNO055(sensor_addr) - baseline_heading_sensor);
20000b8c:	79bb      	ldrb	r3, [r7, #6]
20000b8e:	4618      	mov	r0, r3
20000b90:	f7ff ff92 	bl	20000ab8 <read_heading_BNO055>
20000b94:	f244 3358 	movw	r3, #17240	; 0x4358
20000b98:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
20000ba0:	f001 fdc8 	bl	20002734 <__aeabi_dsub>
20000ba4:	4602      	mov	r2, r0
20000ba6:	460b      	mov	r3, r1
20000ba8:	4610      	mov	r0, r2
20000baa:	4619      	mov	r1, r3
20000bac:	f7ff fe70 	bl	20000890 <wrap_angle_180>
20000bb0:	4602      	mov	r2, r0
20000bb2:	460b      	mov	r3, r1
20000bb4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double heading_display = wrap_angle_180(read_heading_BNO055(display_addr) - baseline_heading_display);
20000bb8:	79fb      	ldrb	r3, [r7, #7]
20000bba:	4618      	mov	r0, r3
20000bbc:	f7ff ff7c 	bl	20000ab8 <read_heading_BNO055>
20000bc0:	f244 3350 	movw	r3, #17232	; 0x4350
20000bc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
20000bcc:	f001 fdb2 	bl	20002734 <__aeabi_dsub>
20000bd0:	4602      	mov	r2, r0
20000bd2:	460b      	mov	r3, r1
20000bd4:	4610      	mov	r0, r2
20000bd6:	4619      	mov	r1, r3
20000bd8:	f7ff fe5a 	bl	20000890 <wrap_angle_180>
20000bdc:	4602      	mov	r2, r0
20000bde:	460b      	mov	r3, r1
20000be0:	e9c7 2304 	strd	r2, r3, [r7, #16]

	return wrap_angle_180(heading_sensor - heading_display);
20000be4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
20000be8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
20000bec:	f001 fda2 	bl	20002734 <__aeabi_dsub>
20000bf0:	4602      	mov	r2, r0
20000bf2:	460b      	mov	r3, r1
20000bf4:	4610      	mov	r0, r2
20000bf6:	4619      	mov	r1, r3
20000bf8:	f7ff fe4a 	bl	20000890 <wrap_angle_180>
20000bfc:	4602      	mov	r2, r0
20000bfe:	460b      	mov	r3, r1
}
20000c00:	4610      	mov	r0, r2
20000c02:	4619      	mov	r1, r3
20000c04:	f107 0718 	add.w	r7, r7, #24
20000c08:	46bd      	mov	sp, r7
20000c0a:	bd80      	pop	{r7, pc}

20000c0c <byte_reverse>:
float temps[8][8];


// Function reverses bits in the byte
uint8_t byte_reverse(uint8_t x)
{
20000c0c:	b480      	push	{r7}
20000c0e:	b083      	sub	sp, #12
20000c10:	af00      	add	r7, sp, #0
20000c12:	4603      	mov	r3, r0
20000c14:	71fb      	strb	r3, [r7, #7]
	return  0xFF & (((x & 0b10000000) >> 7) | ((x & 0b01000000) >> 5) | ((x & 0b00100000) >> 3) | ((x & 0b00010000) >> 1) |
20000c16:	79fb      	ldrb	r3, [r7, #7]
20000c18:	ea4f 13d3 	mov.w	r3, r3, lsr #7
20000c1c:	b2db      	uxtb	r3, r3
20000c1e:	461a      	mov	r2, r3
20000c20:	79fb      	ldrb	r3, [r7, #7]
20000c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
20000c26:	ea4f 1363 	mov.w	r3, r3, asr #5
20000c2a:	b2db      	uxtb	r3, r3
20000c2c:	ea42 0303 	orr.w	r3, r2, r3
20000c30:	b2da      	uxtb	r2, r3
20000c32:	79fb      	ldrb	r3, [r7, #7]
20000c34:	f003 0320 	and.w	r3, r3, #32
20000c38:	ea4f 03e3 	mov.w	r3, r3, asr #3
20000c3c:	b2db      	uxtb	r3, r3
20000c3e:	ea42 0303 	orr.w	r3, r2, r3
20000c42:	b2da      	uxtb	r2, r3
20000c44:	79fb      	ldrb	r3, [r7, #7]
20000c46:	f003 0310 	and.w	r3, r3, #16
20000c4a:	ea4f 0363 	mov.w	r3, r3, asr #1
20000c4e:	b2db      	uxtb	r3, r3
20000c50:	ea42 0303 	orr.w	r3, r2, r3
20000c54:	b2da      	uxtb	r2, r3
		((x & 0b00001000) << 1) | ((x & 0b000000100) << 3) | ((x & 0b000000010) << 5) | ((x & 0b00000001) << 7));
20000c56:	79fb      	ldrb	r3, [r7, #7]
20000c58:	f003 0308 	and.w	r3, r3, #8
20000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1


// Function reverses bits in the byte
uint8_t byte_reverse(uint8_t x)
{
	return  0xFF & (((x & 0b10000000) >> 7) | ((x & 0b01000000) >> 5) | ((x & 0b00100000) >> 3) | ((x & 0b00010000) >> 1) |
20000c60:	b2db      	uxtb	r3, r3
20000c62:	ea42 0303 	orr.w	r3, r2, r3
20000c66:	b2da      	uxtb	r2, r3
		((x & 0b00001000) << 1) | ((x & 0b000000100) << 3) | ((x & 0b000000010) << 5) | ((x & 0b00000001) << 7));
20000c68:	79fb      	ldrb	r3, [r7, #7]
20000c6a:	f003 0304 	and.w	r3, r3, #4
20000c6e:	ea4f 03c3 	mov.w	r3, r3, lsl #3


// Function reverses bits in the byte
uint8_t byte_reverse(uint8_t x)
{
	return  0xFF & (((x & 0b10000000) >> 7) | ((x & 0b01000000) >> 5) | ((x & 0b00100000) >> 3) | ((x & 0b00010000) >> 1) |
20000c72:	b2db      	uxtb	r3, r3
20000c74:	ea42 0303 	orr.w	r3, r2, r3
20000c78:	b2da      	uxtb	r2, r3
		((x & 0b00001000) << 1) | ((x & 0b000000100) << 3) | ((x & 0b000000010) << 5) | ((x & 0b00000001) << 7));
20000c7a:	79fb      	ldrb	r3, [r7, #7]
20000c7c:	f003 0302 	and.w	r3, r3, #2
20000c80:	ea4f 1343 	mov.w	r3, r3, lsl #5


// Function reverses bits in the byte
uint8_t byte_reverse(uint8_t x)
{
	return  0xFF & (((x & 0b10000000) >> 7) | ((x & 0b01000000) >> 5) | ((x & 0b00100000) >> 3) | ((x & 0b00010000) >> 1) |
20000c84:	b2db      	uxtb	r3, r3
20000c86:	ea42 0303 	orr.w	r3, r2, r3
20000c8a:	b2da      	uxtb	r2, r3
20000c8c:	79fb      	ldrb	r3, [r7, #7]
20000c8e:	ea4f 13c3 	mov.w	r3, r3, lsl #7
20000c92:	b2db      	uxtb	r3, r3
20000c94:	ea42 0303 	orr.w	r3, r2, r3
20000c98:	b2db      	uxtb	r3, r3
20000c9a:	b2db      	uxtb	r3, r3
		((x & 0b00001000) << 1) | ((x & 0b000000100) << 3) | ((x & 0b000000010) << 5) | ((x & 0b00000001) << 7));
}
20000c9c:	4618      	mov	r0, r3
20000c9e:	f107 070c 	add.w	r7, r7, #12
20000ca2:	46bd      	mov	sp, r7
20000ca4:	bc80      	pop	{r7}
20000ca6:	4770      	bx	lr

20000ca8 <scale_brightness>:


// Function scales brightness based on distance
uint32_t scale_brightness(int32_t color, float in_dist){
20000ca8:	b590      	push	{r4, r7, lr}
20000caa:	b089      	sub	sp, #36	; 0x24
20000cac:	af00      	add	r7, sp, #0
20000cae:	6078      	str	r0, [r7, #4]
20000cb0:	6039      	str	r1, [r7, #0]
	uint i;
	uint32_t result = 0;
20000cb2:	f04f 0300 	mov.w	r3, #0
20000cb6:	60fb      	str	r3, [r7, #12]
	double scale_factor;

	for (i = 0; i<3; ++i)
20000cb8:	f04f 0300 	mov.w	r3, #0
20000cbc:	60bb      	str	r3, [r7, #8]
20000cbe:	e088      	b.n	20000dd2 <scale_brightness+0x12a>
	{
		uint8_t ind_value = byte_reverse((color >> 8*(i)) & 0xFF);
20000cc0:	68bb      	ldr	r3, [r7, #8]
20000cc2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20000cc6:	687a      	ldr	r2, [r7, #4]
20000cc8:	fa42 f303 	asr.w	r3, r2, r3
20000ccc:	b2db      	uxtb	r3, r3
20000cce:	4618      	mov	r0, r3
20000cd0:	f7ff ff9c 	bl	20000c0c <byte_reverse>
20000cd4:	4603      	mov	r3, r0
20000cd6:	77fb      	strb	r3, [r7, #31]
		scale_factor = 2.17 - 0.332*log(in_dist);
20000cd8:	6838      	ldr	r0, [r7, #0]
20000cda:	f001 fe8b 	bl	200029f4 <__aeabi_f2d>
20000cde:	4602      	mov	r2, r0
20000ce0:	460b      	mov	r3, r1
20000ce2:	4610      	mov	r0, r2
20000ce4:	4619      	mov	r1, r3
20000ce6:	f002 fdb7 	bl	20003858 <log>
20000cea:	4602      	mov	r2, r0
20000cec:	460b      	mov	r3, r1
20000cee:	4610      	mov	r0, r2
20000cf0:	4619      	mov	r1, r3
20000cf2:	a33d      	add	r3, pc, #244	; (adr r3, 20000de8 <scale_brightness+0x140>)
20000cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
20000cf8:	f001 fed0 	bl	20002a9c <__aeabi_dmul>
20000cfc:	4602      	mov	r2, r0
20000cfe:	460b      	mov	r3, r1
20000d00:	4610      	mov	r0, r2
20000d02:	4619      	mov	r1, r3
20000d04:	a33a      	add	r3, pc, #232	; (adr r3, 20000df0 <scale_brightness+0x148>)
20000d06:	e9d3 2300 	ldrd	r2, r3, [r3]
20000d0a:	f001 fd15 	bl	20002738 <__adddf3>
20000d0e:	4602      	mov	r2, r0
20000d10:	460b      	mov	r3, r1
20000d12:	e9c7 2304 	strd	r2, r3, [r7, #16]
		if (scale_factor > 1) scale_factor = 1;
20000d16:	f04f 0300 	mov.w	r3, #0
20000d1a:	461c      	mov	r4, r3
20000d1c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
20000d20:	f04f 0200 	mov.w	r2, #0
20000d24:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
20000d28:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
20000d2c:	f002 f946 	bl	20002fbc <__aeabi_dcmpgt>
20000d30:	4603      	mov	r3, r0
20000d32:	2b00      	cmp	r3, #0
20000d34:	d002      	beq.n	20000d3c <scale_brightness+0x94>
20000d36:	f04f 0301 	mov.w	r3, #1
20000d3a:	461c      	mov	r4, r3
20000d3c:	b2e3      	uxtb	r3, r4
20000d3e:	2b00      	cmp	r3, #0
20000d40:	d007      	beq.n	20000d52 <scale_brightness+0xaa>
20000d42:	f04f 0200 	mov.w	r2, #0
20000d46:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
20000d4a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
20000d4e:	e9c7 2304 	strd	r2, r3, [r7, #16]
		if (scale_factor < 0) scale_factor = 0;
20000d52:	f04f 0300 	mov.w	r3, #0
20000d56:	461c      	mov	r4, r3
20000d58:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
20000d5c:	f04f 0200 	mov.w	r2, #0
20000d60:	f04f 0300 	mov.w	r3, #0
20000d64:	f002 f90c 	bl	20002f80 <__aeabi_dcmplt>
20000d68:	4603      	mov	r3, r0
20000d6a:	2b00      	cmp	r3, #0
20000d6c:	d002      	beq.n	20000d74 <scale_brightness+0xcc>
20000d6e:	f04f 0301 	mov.w	r3, #1
20000d72:	461c      	mov	r4, r3
20000d74:	b2e3      	uxtb	r3, r4
20000d76:	2b00      	cmp	r3, #0
20000d78:	d005      	beq.n	20000d86 <scale_brightness+0xde>
20000d7a:	f04f 0200 	mov.w	r2, #0
20000d7e:	f04f 0300 	mov.w	r3, #0
20000d82:	e9c7 2304 	strd	r2, r3, [r7, #16]
		result = result | (byte_reverse(ind_value*scale_factor) << 8*(i));
20000d86:	7ffb      	ldrb	r3, [r7, #31]
20000d88:	4618      	mov	r0, r3
20000d8a:	f001 fe21 	bl	200029d0 <__aeabi_i2d>
20000d8e:	4602      	mov	r2, r0
20000d90:	460b      	mov	r3, r1
20000d92:	4610      	mov	r0, r2
20000d94:	4619      	mov	r1, r3
20000d96:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
20000d9a:	f001 fe7f 	bl	20002a9c <__aeabi_dmul>
20000d9e:	4602      	mov	r2, r0
20000da0:	460b      	mov	r3, r1
20000da2:	4610      	mov	r0, r2
20000da4:	4619      	mov	r1, r3
20000da6:	f002 f93b 	bl	20003020 <__aeabi_d2uiz>
20000daa:	4603      	mov	r3, r0
20000dac:	b2db      	uxtb	r3, r3
20000dae:	4618      	mov	r0, r3
20000db0:	f7ff ff2c 	bl	20000c0c <byte_reverse>
20000db4:	4603      	mov	r3, r0
20000db6:	461a      	mov	r2, r3
20000db8:	68bb      	ldr	r3, [r7, #8]
20000dba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20000dbe:	fa02 f303 	lsl.w	r3, r2, r3
20000dc2:	68fa      	ldr	r2, [r7, #12]
20000dc4:	ea42 0303 	orr.w	r3, r2, r3
20000dc8:	60fb      	str	r3, [r7, #12]
uint32_t scale_brightness(int32_t color, float in_dist){
	uint i;
	uint32_t result = 0;
	double scale_factor;

	for (i = 0; i<3; ++i)
20000dca:	68bb      	ldr	r3, [r7, #8]
20000dcc:	f103 0301 	add.w	r3, r3, #1
20000dd0:	60bb      	str	r3, [r7, #8]
20000dd2:	68bb      	ldr	r3, [r7, #8]
20000dd4:	2b02      	cmp	r3, #2
20000dd6:	f67f af73 	bls.w	20000cc0 <scale_brightness+0x18>
		scale_factor = 2.17 - 0.332*log(in_dist);
		if (scale_factor > 1) scale_factor = 1;
		if (scale_factor < 0) scale_factor = 0;
		result = result | (byte_reverse(ind_value*scale_factor) << 8*(i));
	}
	return result;
20000dda:	68fb      	ldr	r3, [r7, #12]
}
20000ddc:	4618      	mov	r0, r3
20000dde:	f107 0724 	add.w	r7, r7, #36	; 0x24
20000de2:	46bd      	mov	sp, r7
20000de4:	bd90      	pop	{r4, r7, pc}
20000de6:	bf00      	nop
20000de8:	ed916873 	.word	0xed916873
20000dec:	bfd53f7c 	.word	0xbfd53f7c
20000df0:	f5c28f5c 	.word	0xf5c28f5c
20000df4:	40015c28 	.word	0x40015c28

20000df8 <GPIO0_IRQHandler>:
int dist_to_LED(float in_dist){

	return (int)in_dist / 3;
}
// Interrupts for Gyroscope reset functionality (Pin J20)
void GPIO0_IRQHandler (void){
20000df8:	b580      	push	{r7, lr}
20000dfa:	af00      	add	r7, sp, #0

	IMU_offset = IMU_temp_offset;
20000dfc:	f244 3370 	movw	r3, #17264	; 0x4370
20000e00:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e04:	e9d3 0100 	ldrd	r0, r1, [r3]
20000e08:	f244 4388 	movw	r3, #17544	; 0x4488
20000e0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e10:	e9c3 0100 	strd	r0, r1, [r3]
	MSS_GPIO_clear_irq(MSS_GPIO_0);
20000e14:	f04f 0000 	mov.w	r0, #0
20000e18:	f001 fc3e 	bl	20002698 <MSS_GPIO_clear_irq>
}
20000e1c:	bd80      	pop	{r7, pc}
20000e1e:	bf00      	nop

20000e20 <GPIO1_IRQHandler>:

// Interrupts for Mode cycling (Pin J21)
void GPIO1_IRQHandler (void){
20000e20:	b580      	push	{r7, lr}
20000e22:	af00      	add	r7, sp, #0

	current_mode += 1;
20000e24:	f244 3364 	movw	r3, #17252	; 0x4364
20000e28:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e2c:	781b      	ldrb	r3, [r3, #0]
20000e2e:	f103 0301 	add.w	r3, r3, #1
20000e32:	b2da      	uxtb	r2, r3
20000e34:	f244 3364 	movw	r3, #17252	; 0x4364
20000e38:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e3c:	701a      	strb	r2, [r3, #0]
	current_mode %= 3;
20000e3e:	f244 3364 	movw	r3, #17252	; 0x4364
20000e42:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e46:	781a      	ldrb	r2, [r3, #0]
20000e48:	f64a 23ab 	movw	r3, #43691	; 0xaaab
20000e4c:	f6ca 23aa 	movt	r3, #43690	; 0xaaaa
20000e50:	fba3 1302 	umull	r1, r3, r3, r2
20000e54:	ea4f 0153 	mov.w	r1, r3, lsr #1
20000e58:	460b      	mov	r3, r1
20000e5a:	ea4f 0343 	mov.w	r3, r3, lsl #1
20000e5e:	440b      	add	r3, r1
20000e60:	ebc3 0302 	rsb	r3, r3, r2
20000e64:	b2da      	uxtb	r2, r3
20000e66:	f244 3364 	movw	r3, #17252	; 0x4364
20000e6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000e6e:	701a      	strb	r2, [r3, #0]
	MSS_GPIO_clear_irq(MSS_GPIO_1);
20000e70:	f04f 0001 	mov.w	r0, #1
20000e74:	f001 fc10 	bl	20002698 <MSS_GPIO_clear_irq>
}
20000e78:	bd80      	pop	{r7, pc}
20000e7a:	bf00      	nop

20000e7c <format_color>:

// Function formats MSB output of input blue, red, and green amounts
// for LED write transaction
uint32_t format_color(uint8_t blue_amt, uint8_t red_amt, uint8_t green_amt){
20000e7c:	b480      	push	{r7}
20000e7e:	b083      	sub	sp, #12
20000e80:	af00      	add	r7, sp, #0
20000e82:	4613      	mov	r3, r2
20000e84:	4602      	mov	r2, r0
20000e86:	71fa      	strb	r2, [r7, #7]
20000e88:	460a      	mov	r2, r1
20000e8a:	71ba      	strb	r2, [r7, #6]
20000e8c:	717b      	strb	r3, [r7, #5]
	return (blue_amt << 16) | (red_amt << 8) | green_amt;
20000e8e:	79fb      	ldrb	r3, [r7, #7]
20000e90:	ea4f 4203 	mov.w	r2, r3, lsl #16
20000e94:	79bb      	ldrb	r3, [r7, #6]
20000e96:	ea4f 2303 	mov.w	r3, r3, lsl #8
20000e9a:	ea42 0203 	orr.w	r2, r2, r3
20000e9e:	797b      	ldrb	r3, [r7, #5]
20000ea0:	ea42 0303 	orr.w	r3, r2, r3
}
20000ea4:	4618      	mov	r0, r3
20000ea6:	f107 070c 	add.w	r7, r7, #12
20000eaa:	46bd      	mov	sp, r7
20000eac:	bc80      	pop	{r7}
20000eae:	4770      	bx	lr

20000eb0 <write_scaled_LEDs>:



// Write to LEDs with brightness scaled on the distance
void write_scaled_LEDs(){
20000eb0:	b590      	push	{r4, r7, lr}
20000eb2:	b083      	sub	sp, #12
20000eb4:	af00      	add	r7, sp, #0

	int i;
	for(i = 0; i < NUMLEDS; ++i){
20000eb6:	f04f 0300 	mov.w	r3, #0
20000eba:	607b      	str	r3, [r7, #4]
20000ebc:	e03d      	b.n	20000f3a <write_scaled_LEDs+0x8a>
		if (i >= LED_num && i < LED_num + DISPLAY_POINT_WIDTH)
20000ebe:	f244 3360 	movw	r3, #17248	; 0x4360
20000ec2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ec6:	681b      	ldr	r3, [r3, #0]
20000ec8:	687a      	ldr	r2, [r7, #4]
20000eca:	429a      	cmp	r2, r3
20000ecc:	db25      	blt.n	20000f1a <write_scaled_LEDs+0x6a>
20000ece:	f244 3360 	movw	r3, #17248	; 0x4360
20000ed2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000ed6:	681b      	ldr	r3, [r3, #0]
20000ed8:	f103 0202 	add.w	r2, r3, #2
20000edc:	687b      	ldr	r3, [r7, #4]
20000ede:	429a      	cmp	r2, r3
20000ee0:	dd1b      	ble.n	20000f1a <write_scaled_LEDs+0x6a>
			LED[i] = scale_brightness(color, cm_dist);
20000ee2:	f244 2344 	movw	r3, #16964	; 0x4244
20000ee6:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000eea:	681a      	ldr	r2, [r3, #0]
20000eec:	687b      	ldr	r3, [r7, #4]
20000eee:	ea4f 0383 	mov.w	r3, r3, lsl #2
20000ef2:	eb02 0403 	add.w	r4, r2, r3
20000ef6:	f244 4380 	movw	r3, #17536	; 0x4480
20000efa:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000efe:	681b      	ldr	r3, [r3, #0]
20000f00:	461a      	mov	r2, r3
20000f02:	f244 336c 	movw	r3, #17260	; 0x436c
20000f06:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000f0a:	681b      	ldr	r3, [r3, #0]
20000f0c:	4610      	mov	r0, r2
20000f0e:	4619      	mov	r1, r3
20000f10:	f7ff feca 	bl	20000ca8 <scale_brightness>
20000f14:	4603      	mov	r3, r0
20000f16:	6023      	str	r3, [r4, #0]
// Write to LEDs with brightness scaled on the distance
void write_scaled_LEDs(){

	int i;
	for(i = 0; i < NUMLEDS; ++i){
		if (i >= LED_num && i < LED_num + DISPLAY_POINT_WIDTH)
20000f18:	e00b      	b.n	20000f32 <write_scaled_LEDs+0x82>
			LED[i] = scale_brightness(color, cm_dist);
		else
			LED[i] = off;
20000f1a:	f244 2344 	movw	r3, #16964	; 0x4244
20000f1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000f22:	681a      	ldr	r2, [r3, #0]
20000f24:	687b      	ldr	r3, [r7, #4]
20000f26:	ea4f 0383 	mov.w	r3, r3, lsl #2
20000f2a:	4413      	add	r3, r2
20000f2c:	f04f 0200 	mov.w	r2, #0
20000f30:	601a      	str	r2, [r3, #0]

// Write to LEDs with brightness scaled on the distance
void write_scaled_LEDs(){

	int i;
	for(i = 0; i < NUMLEDS; ++i){
20000f32:	687b      	ldr	r3, [r7, #4]
20000f34:	f103 0301 	add.w	r3, r3, #1
20000f38:	607b      	str	r3, [r7, #4]
20000f3a:	687b      	ldr	r3, [r7, #4]
20000f3c:	2b17      	cmp	r3, #23
20000f3e:	ddbe      	ble.n	20000ebe <write_scaled_LEDs+0xe>
		if (i >= LED_num && i < LED_num + DISPLAY_POINT_WIDTH)
			LED[i] = scale_brightness(color, cm_dist);
		else
			LED[i] = off;
	}
}
20000f40:	f107 070c 	add.w	r7, r7, #12
20000f44:	46bd      	mov	sp, r7
20000f46:	bd90      	pop	{r4, r7, pc}

20000f48 <write_all_LEDs>:

// Write the color variable to all LEDs
void write_all_LEDs(){
20000f48:	b480      	push	{r7}
20000f4a:	b083      	sub	sp, #12
20000f4c:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < NUMLEDS; ++i){
20000f4e:	f04f 0300 	mov.w	r3, #0
20000f52:	607b      	str	r3, [r7, #4]
20000f54:	e012      	b.n	20000f7c <write_all_LEDs+0x34>
		LED[i] = color;
20000f56:	f244 2344 	movw	r3, #16964	; 0x4244
20000f5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000f5e:	681a      	ldr	r2, [r3, #0]
20000f60:	687b      	ldr	r3, [r7, #4]
20000f62:	ea4f 0383 	mov.w	r3, r3, lsl #2
20000f66:	441a      	add	r2, r3
20000f68:	f244 4380 	movw	r3, #17536	; 0x4480
20000f6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000f70:	681b      	ldr	r3, [r3, #0]
20000f72:	6013      	str	r3, [r2, #0]
}

// Write the color variable to all LEDs
void write_all_LEDs(){
	int i;
	for(i = 0; i < NUMLEDS; ++i){
20000f74:	687b      	ldr	r3, [r7, #4]
20000f76:	f103 0301 	add.w	r3, r3, #1
20000f7a:	607b      	str	r3, [r7, #4]
20000f7c:	687b      	ldr	r3, [r7, #4]
20000f7e:	2b17      	cmp	r3, #23
20000f80:	dde9      	ble.n	20000f56 <write_all_LEDs+0xe>
		LED[i] = color;
	}
}
20000f82:	f107 070c 	add.w	r7, r7, #12
20000f86:	46bd      	mov	sp, r7
20000f88:	bc80      	pop	{r7}
20000f8a:	4770      	bx	lr

20000f8c <standard_execute>:

// Standard cane style behavior
void standard_execute(){
20000f8c:	b598      	push	{r3, r4, r7, lr}
20000f8e:	af00      	add	r7, sp, #0

	if(get_max_temp(temps) > 42.00)
20000f90:	f244 3078 	movw	r0, #17272	; 0x4378
20000f94:	f2c2 0000 	movt	r0, #8192	; 0x2000
20000f98:	f7ff fbaa 	bl	200006f0 <get_max_temp>
20000f9c:	4603      	mov	r3, r0
20000f9e:	f04f 0200 	mov.w	r2, #0
20000fa2:	4614      	mov	r4, r2
20000fa4:	4618      	mov	r0, r3
20000fa6:	498f      	ldr	r1, [pc, #572]	; (200011e4 <standard_execute+0x258>)
20000fa8:	f002 fb24 	bl	200035f4 <__aeabi_fcmpgt>
20000fac:	4603      	mov	r3, r0
20000fae:	2b00      	cmp	r3, #0
20000fb0:	d002      	beq.n	20000fb8 <standard_execute+0x2c>
20000fb2:	f04f 0301 	mov.w	r3, #1
20000fb6:	461c      	mov	r4, r3
20000fb8:	b2e3      	uxtb	r3, r4
20000fba:	2b00      	cmp	r3, #0
20000fbc:	d007      	beq.n	20000fce <standard_execute+0x42>
		color = red;
20000fbe:	f244 4380 	movw	r3, #17536	; 0x4480
20000fc2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000fc6:	f44f 427f 	mov.w	r2, #65280	; 0xff00
20000fca:	601a      	str	r2, [r3, #0]
20000fcc:	e064      	b.n	20001098 <standard_execute+0x10c>
	else if((temps[3][3] > 26.00 || temps[4][4] > 26.00) && (temps[3][3] < 35.00 || temps[4][4] < 35.00))
20000fce:	f244 3378 	movw	r3, #17272	; 0x4378
20000fd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20000fd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
20000fd8:	f04f 0200 	mov.w	r2, #0
20000fdc:	4614      	mov	r4, r2
20000fde:	4618      	mov	r0, r3
20000fe0:	4981      	ldr	r1, [pc, #516]	; (200011e8 <standard_execute+0x25c>)
20000fe2:	f002 fb07 	bl	200035f4 <__aeabi_fcmpgt>
20000fe6:	4603      	mov	r3, r0
20000fe8:	2b00      	cmp	r3, #0
20000fea:	d002      	beq.n	20000ff2 <standard_execute+0x66>
20000fec:	f04f 0301 	mov.w	r3, #1
20000ff0:	461c      	mov	r4, r3
20000ff2:	b2e3      	uxtb	r3, r4
20000ff4:	2b00      	cmp	r3, #0
20000ff6:	d115      	bne.n	20001024 <standard_execute+0x98>
20000ff8:	f244 3378 	movw	r3, #17272	; 0x4378
20000ffc:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
20001004:	f04f 0200 	mov.w	r2, #0
20001008:	4614      	mov	r4, r2
2000100a:	4618      	mov	r0, r3
2000100c:	4976      	ldr	r1, [pc, #472]	; (200011e8 <standard_execute+0x25c>)
2000100e:	f002 faf1 	bl	200035f4 <__aeabi_fcmpgt>
20001012:	4603      	mov	r3, r0
20001014:	2b00      	cmp	r3, #0
20001016:	d002      	beq.n	2000101e <standard_execute+0x92>
20001018:	f04f 0301 	mov.w	r3, #1
2000101c:	461c      	mov	r4, r3
2000101e:	b2e3      	uxtb	r3, r4
20001020:	2b00      	cmp	r3, #0
20001022:	d032      	beq.n	2000108a <standard_execute+0xfe>
20001024:	f244 3378 	movw	r3, #17272	; 0x4378
20001028:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000102c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
2000102e:	f04f 0200 	mov.w	r2, #0
20001032:	4614      	mov	r4, r2
20001034:	4618      	mov	r0, r3
20001036:	496d      	ldr	r1, [pc, #436]	; (200011ec <standard_execute+0x260>)
20001038:	f002 fabe 	bl	200035b8 <__aeabi_fcmplt>
2000103c:	4603      	mov	r3, r0
2000103e:	2b00      	cmp	r3, #0
20001040:	d002      	beq.n	20001048 <standard_execute+0xbc>
20001042:	f04f 0301 	mov.w	r3, #1
20001046:	461c      	mov	r4, r3
20001048:	b2e3      	uxtb	r3, r4
2000104a:	2b00      	cmp	r3, #0
2000104c:	d115      	bne.n	2000107a <standard_execute+0xee>
2000104e:	f244 3378 	movw	r3, #17272	; 0x4378
20001052:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
2000105a:	f04f 0200 	mov.w	r2, #0
2000105e:	4614      	mov	r4, r2
20001060:	4618      	mov	r0, r3
20001062:	4962      	ldr	r1, [pc, #392]	; (200011ec <standard_execute+0x260>)
20001064:	f002 faa8 	bl	200035b8 <__aeabi_fcmplt>
20001068:	4603      	mov	r3, r0
2000106a:	2b00      	cmp	r3, #0
2000106c:	d002      	beq.n	20001074 <standard_execute+0xe8>
2000106e:	f04f 0301 	mov.w	r3, #1
20001072:	461c      	mov	r4, r3
20001074:	b2e3      	uxtb	r3, r4
20001076:	2b00      	cmp	r3, #0
20001078:	d007      	beq.n	2000108a <standard_execute+0xfe>
		color = yellow;
2000107a:	f244 4380 	movw	r3, #17536	; 0x4480
2000107e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001082:	f64f 72ff 	movw	r2, #65535	; 0xffff
20001086:	601a      	str	r2, [r3, #0]
// Standard cane style behavior
void standard_execute(){

	if(get_max_temp(temps) > 42.00)
		color = red;
	else if((temps[3][3] > 26.00 || temps[4][4] > 26.00) && (temps[3][3] < 35.00 || temps[4][4] < 35.00))
20001088:	e006      	b.n	20001098 <standard_execute+0x10c>
		color = yellow;
	else
		color = green;
2000108a:	f244 4380 	movw	r3, #17536	; 0x4480
2000108e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001092:	f04f 02ff 	mov.w	r2, #255	; 0xff
20001096:	601a      	str	r2, [r3, #0]

	// IMUs calculate angle at which to display
	set_heading_baseline = 0;
20001098:	f244 234c 	movw	r3, #16972	; 0x424c
2000109c:	f2c2 0300 	movt	r3, #8192	; 0x2000
200010a0:	f04f 0200 	mov.w	r2, #0
200010a4:	701a      	strb	r2, [r3, #0]
	if (display_angle < -DISPLAY_FOV/2 || display_angle >= DISPLAY_FOV/2){
200010a6:	f244 4378 	movw	r3, #17528	; 0x4478
200010aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
200010ae:	e9d3 2300 	ldrd	r2, r3, [r3]
200010b2:	f04f 0100 	mov.w	r1, #0
200010b6:	460c      	mov	r4, r1
200010b8:	4610      	mov	r0, r2
200010ba:	4619      	mov	r1, r3
200010bc:	f04f 0200 	mov.w	r2, #0
200010c0:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
200010c4:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
200010c8:	f001 ff5a 	bl	20002f80 <__aeabi_dcmplt>
200010cc:	4603      	mov	r3, r0
200010ce:	2b00      	cmp	r3, #0
200010d0:	d002      	beq.n	200010d8 <standard_execute+0x14c>
200010d2:	f04f 0301 	mov.w	r3, #1
200010d6:	461c      	mov	r4, r3
200010d8:	b2e3      	uxtb	r3, r4
200010da:	2b00      	cmp	r3, #0
200010dc:	d11b      	bne.n	20001116 <standard_execute+0x18a>
200010de:	f244 4378 	movw	r3, #17528	; 0x4478
200010e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200010e6:	e9d3 2300 	ldrd	r2, r3, [r3]
200010ea:	f04f 0100 	mov.w	r1, #0
200010ee:	460c      	mov	r4, r1
200010f0:	4610      	mov	r0, r2
200010f2:	4619      	mov	r1, r3
200010f4:	f04f 0200 	mov.w	r2, #0
200010f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
200010fc:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
20001100:	f001 ff52 	bl	20002fa8 <__aeabi_dcmpge>
20001104:	4603      	mov	r3, r0
20001106:	2b00      	cmp	r3, #0
20001108:	d002      	beq.n	20001110 <standard_execute+0x184>
2000110a:	f04f 0301 	mov.w	r3, #1
2000110e:	461c      	mov	r4, r3
20001110:	b2e3      	uxtb	r3, r4
20001112:	2b00      	cmp	r3, #0
20001114:	d02b      	beq.n	2000116e <standard_execute+0x1e2>
		LED_num = display_angle < 0 ? NUMLEDS-1 : 0 - (DISPLAY_POINT_WIDTH-1);
20001116:	f244 4378 	movw	r3, #17528	; 0x4478
2000111a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000111e:	e9d3 2300 	ldrd	r2, r3, [r3]
20001122:	f04f 0100 	mov.w	r1, #0
20001126:	460c      	mov	r4, r1
20001128:	4610      	mov	r0, r2
2000112a:	4619      	mov	r1, r3
2000112c:	f04f 0200 	mov.w	r2, #0
20001130:	f04f 0300 	mov.w	r3, #0
20001134:	f001 ff24 	bl	20002f80 <__aeabi_dcmplt>
20001138:	4603      	mov	r3, r0
2000113a:	2b00      	cmp	r3, #0
2000113c:	d002      	beq.n	20001144 <standard_execute+0x1b8>
2000113e:	f04f 0301 	mov.w	r3, #1
20001142:	461c      	mov	r4, r3
20001144:	b2e3      	uxtb	r3, r4
20001146:	2b00      	cmp	r3, #0
20001148:	d002      	beq.n	20001150 <standard_execute+0x1c4>
2000114a:	f04f 0217 	mov.w	r2, #23
2000114e:	e001      	b.n	20001154 <standard_execute+0x1c8>
20001150:	f04f 32ff 	mov.w	r2, #4294967295
20001154:	f244 3360 	movw	r3, #17248	; 0x4360
20001158:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000115c:	601a      	str	r2, [r3, #0]
		color = red;
2000115e:	f244 4380 	movw	r3, #17536	; 0x4480
20001162:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001166:	f44f 427f 	mov.w	r2, #65280	; 0xff00
2000116a:	601a      	str	r2, [r3, #0]
	else
		color = green;

	// IMUs calculate angle at which to display
	set_heading_baseline = 0;
	if (display_angle < -DISPLAY_FOV/2 || display_angle >= DISPLAY_FOV/2){
2000116c:	e029      	b.n	200011c2 <standard_execute+0x236>
		LED_num = display_angle < 0 ? NUMLEDS-1 : 0 - (DISPLAY_POINT_WIDTH-1);
		color = red;
	}
	else
		LED_num = (NUMLEDS-1) - (int)(display_angle/(DISPLAY_FOV/NUMLEDS) + NUMLEDS/2);
2000116e:	f244 4378 	movw	r3, #17528	; 0x4478
20001172:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001176:	e9d3 2300 	ldrd	r2, r3, [r3]
2000117a:	4610      	mov	r0, r2
2000117c:	4619      	mov	r1, r3
2000117e:	f04f 0200 	mov.w	r2, #0
20001182:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
20001186:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
2000118a:	f001 fdb1 	bl	20002cf0 <__aeabi_ddiv>
2000118e:	4602      	mov	r2, r0
20001190:	460b      	mov	r3, r1
20001192:	4610      	mov	r0, r2
20001194:	4619      	mov	r1, r3
20001196:	f04f 0200 	mov.w	r2, #0
2000119a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
2000119e:	f503 1320 	add.w	r3, r3, #2621440	; 0x280000
200011a2:	f001 fac9 	bl	20002738 <__adddf3>
200011a6:	4602      	mov	r2, r0
200011a8:	460b      	mov	r3, r1
200011aa:	4610      	mov	r0, r2
200011ac:	4619      	mov	r1, r3
200011ae:	f001 ff0f 	bl	20002fd0 <__aeabi_d2iz>
200011b2:	4603      	mov	r3, r0
200011b4:	f1c3 0217 	rsb	r2, r3, #23
200011b8:	f244 3360 	movw	r3, #17248	; 0x4360
200011bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
200011c0:	601a      	str	r2, [r3, #0]

	cm_dist = data_to_cm(SONIC_DATA);
200011c2:	f244 3368 	movw	r3, #17256	; 0x4368
200011c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200011ca:	681b      	ldr	r3, [r3, #0]
200011cc:	4618      	mov	r0, r3
200011ce:	f7ff faf1 	bl	200007b4 <data_to_cm>
200011d2:	4602      	mov	r2, r0
200011d4:	f244 336c 	movw	r3, #17260	; 0x436c
200011d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200011dc:	601a      	str	r2, [r3, #0]

	write_scaled_LEDs();
200011de:	f7ff fe67 	bl	20000eb0 <write_scaled_LEDs>

}
200011e2:	bd98      	pop	{r3, r4, r7, pc}
200011e4:	42280000 	.word	0x42280000
200011e8:	41d00000 	.word	0x41d00000
200011ec:	420c0000 	.word	0x420c0000

200011f0 <spectrum_execute>:


// Determine color based on temperature
// Spectrum is from blue (0 C) to red (80 C)
void spectrum_execute(){
200011f0:	b580      	push	{r7, lr}
200011f2:	b082      	sub	sp, #8
200011f4:	af00      	add	r7, sp, #0

	float avg_temp = 0;
200011f6:	4b48      	ldr	r3, [pc, #288]	; (20001318 <spectrum_execute+0x128>)
200011f8:	603b      	str	r3, [r7, #0]
	avg_temp = (temps[3][3] + temps[3][4] + temps[4][3] + temps[4][4]) / 4.0;
200011fa:	f244 3378 	movw	r3, #17272	; 0x4378
200011fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001202:	6eda      	ldr	r2, [r3, #108]	; 0x6c
20001204:	f244 3378 	movw	r3, #17272	; 0x4378
20001208:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000120c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000120e:	4610      	mov	r0, r2
20001210:	4619      	mov	r1, r3
20001212:	f001 ff2b 	bl	2000306c <__addsf3>
20001216:	4603      	mov	r3, r0
20001218:	461a      	mov	r2, r3
2000121a:	f244 3378 	movw	r3, #17272	; 0x4378
2000121e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001222:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
20001226:	4610      	mov	r0, r2
20001228:	4619      	mov	r1, r3
2000122a:	f001 ff1f 	bl	2000306c <__addsf3>
2000122e:	4603      	mov	r3, r0
20001230:	461a      	mov	r2, r3
20001232:	f244 3378 	movw	r3, #17272	; 0x4378
20001236:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000123a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
2000123e:	4610      	mov	r0, r2
20001240:	4619      	mov	r1, r3
20001242:	f001 ff13 	bl	2000306c <__addsf3>
20001246:	4603      	mov	r3, r0
20001248:	4618      	mov	r0, r3
2000124a:	4934      	ldr	r1, [pc, #208]	; (2000131c <spectrum_execute+0x12c>)
2000124c:	f002 f8ca 	bl	200033e4 <__aeabi_fdiv>
20001250:	4603      	mov	r3, r0
20001252:	603b      	str	r3, [r7, #0]

	uint8_t blue_amt = 0;
20001254:	f04f 0300 	mov.w	r3, #0
20001258:	717b      	strb	r3, [r7, #5]
	uint8_t red_amt = 0;
2000125a:	f04f 0300 	mov.w	r3, #0
2000125e:	71bb      	strb	r3, [r7, #6]
	uint8_t green_amt = 0;
20001260:	f04f 0300 	mov.w	r3, #0
20001264:	71fb      	strb	r3, [r7, #7]

	blue_amt = exp(-(avg_temp/12) + 5.5);
20001266:	6838      	ldr	r0, [r7, #0]
20001268:	492d      	ldr	r1, [pc, #180]	; (20001320 <spectrum_execute+0x130>)
2000126a:	f002 f8bb 	bl	200033e4 <__aeabi_fdiv>
2000126e:	4603      	mov	r3, r0
20001270:	4618      	mov	r0, r3
20001272:	f001 fbbf 	bl	200029f4 <__aeabi_f2d>
20001276:	4602      	mov	r2, r0
20001278:	460b      	mov	r3, r1
2000127a:	4610      	mov	r0, r2
2000127c:	4619      	mov	r1, r3
2000127e:	f04f 0200 	mov.w	r2, #0
20001282:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
20001286:	f503 13b0 	add.w	r3, r3, #1441792	; 0x160000
2000128a:	f001 fa55 	bl	20002738 <__adddf3>
2000128e:	4602      	mov	r2, r0
20001290:	460b      	mov	r3, r1
20001292:	4610      	mov	r0, r2
20001294:	4619      	mov	r1, r3
20001296:	f002 fa5f 	bl	20003758 <exp>
2000129a:	4602      	mov	r2, r0
2000129c:	460b      	mov	r3, r1
2000129e:	4610      	mov	r0, r2
200012a0:	4619      	mov	r1, r3
200012a2:	f001 febd 	bl	20003020 <__aeabi_d2uiz>
200012a6:	4603      	mov	r3, r0
200012a8:	717b      	strb	r3, [r7, #5]
	red_amt = exp((avg_temp/12) -1.25);
200012aa:	6838      	ldr	r0, [r7, #0]
200012ac:	491d      	ldr	r1, [pc, #116]	; (20001324 <spectrum_execute+0x134>)
200012ae:	f002 f899 	bl	200033e4 <__aeabi_fdiv>
200012b2:	4603      	mov	r3, r0
200012b4:	4618      	mov	r0, r3
200012b6:	f001 fb9d 	bl	200029f4 <__aeabi_f2d>
200012ba:	4602      	mov	r2, r0
200012bc:	460b      	mov	r3, r1
200012be:	4610      	mov	r0, r2
200012c0:	4619      	mov	r1, r3
200012c2:	f04f 0200 	mov.w	r2, #0
200012c6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
200012ca:	f503 03e8 	add.w	r3, r3, #7602176	; 0x740000
200012ce:	f001 fa31 	bl	20002734 <__aeabi_dsub>
200012d2:	4602      	mov	r2, r0
200012d4:	460b      	mov	r3, r1
200012d6:	4610      	mov	r0, r2
200012d8:	4619      	mov	r1, r3
200012da:	f002 fa3d 	bl	20003758 <exp>
200012de:	4602      	mov	r2, r0
200012e0:	460b      	mov	r3, r1
200012e2:	4610      	mov	r0, r2
200012e4:	4619      	mov	r1, r3
200012e6:	f001 fe9b 	bl	20003020 <__aeabi_d2uiz>
200012ea:	4603      	mov	r3, r0
200012ec:	71bb      	strb	r3, [r7, #6]

	color = format_color(blue_amt, red_amt, green_amt);
200012ee:	7979      	ldrb	r1, [r7, #5]
200012f0:	79ba      	ldrb	r2, [r7, #6]
200012f2:	79fb      	ldrb	r3, [r7, #7]
200012f4:	4608      	mov	r0, r1
200012f6:	4611      	mov	r1, r2
200012f8:	461a      	mov	r2, r3
200012fa:	f7ff fdbf 	bl	20000e7c <format_color>
200012fe:	4602      	mov	r2, r0
20001300:	f244 4380 	movw	r3, #17536	; 0x4480
20001304:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001308:	601a      	str	r2, [r3, #0]

	write_all_LEDs();
2000130a:	f7ff fe1d 	bl	20000f48 <write_all_LEDs>

}
2000130e:	f107 0708 	add.w	r7, r7, #8
20001312:	46bd      	mov	sp, r7
20001314:	bd80      	pop	{r7, pc}
20001316:	bf00      	nop
20001318:	00000000 	.word	0x00000000
2000131c:	40800000 	.word	0x40800000
20001320:	c1400000 	.word	0xc1400000
20001324:	41400000 	.word	0x41400000

20001328 <compass_execute>:


void compass_execute(){
20001328:	b480      	push	{r7}
2000132a:	af00      	add	r7, sp, #0

}
2000132c:	46bd      	mov	sp, r7
2000132e:	bc80      	pop	{r7}
20001330:	4770      	bx	lr
20001332:	bf00      	nop

20001334 <main>:


int main(){
20001334:	b580      	push	{r7, lr}
20001336:	b0a6      	sub	sp, #152	; 0x98
20001338:	af04      	add	r7, sp, #16

	// Setup
	LED_reset(LED);
2000133a:	f244 2344 	movw	r3, #16964	; 0x4244
2000133e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001342:	681b      	ldr	r3, [r3, #0]
20001344:	4618      	mov	r0, r3
20001346:	f7ff fa19 	bl	2000077c <LED_reset>
	current_mode = STANDARD;
2000134a:	f244 3364 	movw	r3, #17252	; 0x4364
2000134e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001352:	f04f 0200 	mov.w	r2, #0
20001356:	701a      	strb	r2, [r3, #0]
	// Initialize GPIO for interrupts
	MSS_GPIO_init();
20001358:	f001 f918 	bl	2000258c <MSS_GPIO_init>
	MSS_GPIO_config( MSS_GPIO_0, MSS_GPIO_INPUT_MODE | MSS_GPIO_IRQ_EDGE_POSITIVE );
2000135c:	f04f 0000 	mov.w	r0, #0
20001360:	f04f 0142 	mov.w	r1, #66	; 0x42
20001364:	f001 f948 	bl	200025f8 <MSS_GPIO_config>
	MSS_GPIO_config( MSS_GPIO_1, MSS_GPIO_INPUT_MODE | MSS_GPIO_IRQ_EDGE_POSITIVE );
20001368:	f04f 0001 	mov.w	r0, #1
2000136c:	f04f 0142 	mov.w	r1, #66	; 0x42
20001370:	f001 f942 	bl	200025f8 <MSS_GPIO_config>
	MSS_GPIO_enable_irq( MSS_GPIO_0 );
20001374:	f04f 0000 	mov.w	r0, #0
20001378:	f001 f95c 	bl	20002634 <MSS_GPIO_enable_irq>
	MSS_GPIO_enable_irq( MSS_GPIO_1 );
2000137c:	f04f 0001 	mov.w	r0, #1
20001380:	f001 f958 	bl	20002634 <MSS_GPIO_enable_irq>
	// Initialize with a clock frequency of ~ 400kHz
	MSS_I2C_init(&g_mss_i2c1 , 0x0, MSS_I2C_PCLK_DIV_256 );
20001384:	f244 5054 	movw	r0, #17748	; 0x4554
20001388:	f2c2 0000 	movt	r0, #8192	; 0x2000
2000138c:	f04f 0100 	mov.w	r1, #0
20001390:	f04f 0200 	mov.w	r2, #0
20001394:	f000 f9f8 	bl	20001788 <MSS_I2C_init>
	gridEYE_init();
20001398:	f7ff f930 	bl	200005fc <gridEYE_init>


	// IMU initialization ------------------------------------------
	// Set new y-axis to be the former z-axis; set new z-axis to be neg. former y-axis
	remap_axes_BNO055(WAND_IMU_ADDR, 0x0, 0x2, 0x1, 0x0, 0x0, 0x1);
2000139c:	f04f 0300 	mov.w	r3, #0
200013a0:	9300      	str	r3, [sp, #0]
200013a2:	f04f 0300 	mov.w	r3, #0
200013a6:	9301      	str	r3, [sp, #4]
200013a8:	f04f 0301 	mov.w	r3, #1
200013ac:	9302      	str	r3, [sp, #8]
200013ae:	f04f 0028 	mov.w	r0, #40	; 0x28
200013b2:	f04f 0100 	mov.w	r1, #0
200013b6:	f04f 0202 	mov.w	r2, #2
200013ba:	f04f 0301 	mov.w	r3, #1
200013be:	f7ff fb1b 	bl	200009f8 <remap_axes_BNO055>
	// Set new z-axis to be the former x-axis; set new x-axis to be former z-axis; set ne y-axis to be negative of former y-axis
	remap_axes_BNO055(GLASSES_IMU_ADDR, 0x2, 0x1, 0x0, 0x0, 0x1, 0x0);
200013c2:	f04f 0300 	mov.w	r3, #0
200013c6:	9300      	str	r3, [sp, #0]
200013c8:	f04f 0301 	mov.w	r3, #1
200013cc:	9301      	str	r3, [sp, #4]
200013ce:	f04f 0300 	mov.w	r3, #0
200013d2:	9302      	str	r3, [sp, #8]
200013d4:	f04f 0029 	mov.w	r0, #41	; 0x29
200013d8:	f04f 0102 	mov.w	r1, #2
200013dc:	f04f 0201 	mov.w	r2, #1
200013e0:	f04f 0300 	mov.w	r3, #0
200013e4:	f7ff fb08 	bl	200009f8 <remap_axes_BNO055>
	if (init_BNO055(WAND_IMU_ADDR, BNO055_OPR_MODE_COMP)) assert("IMU init error");
200013e8:	f04f 0028 	mov.w	r0, #40	; 0x28
200013ec:	f04f 0109 	mov.w	r1, #9
200013f0:	f7ff faa6 	bl	20000940 <init_BNO055>
	if (init_BNO055(GLASSES_IMU_ADDR, BNO055_OPR_MODE_COMP)) assert("IMU init error");
200013f4:	f04f 0029 	mov.w	r0, #41	; 0x29
200013f8:	f04f 0109 	mov.w	r1, #9
200013fc:	f7ff faa0 	bl	20000940 <init_BNO055>
	IMU_offset = 0;
20001400:	f244 4388 	movw	r3, #17544	; 0x4488
20001404:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001408:	f04f 0000 	mov.w	r0, #0
2000140c:	f04f 0100 	mov.w	r1, #0
20001410:	e9c3 0100 	strd	r0, r1, [r3]


	// Base pixel register is 0x80
	uint8_t pixel_addr[] = {0x80};
20001414:	f06f 037f 	mvn.w	r3, #127	; 0x7f
20001418:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
	uint8_t pixel_data[128] = {0};
2000141c:	f107 0204 	add.w	r2, r7, #4
20001420:	f04f 0380 	mov.w	r3, #128	; 0x80
20001424:	4610      	mov	r0, r2
20001426:	f04f 0100 	mov.w	r1, #0
2000142a:	461a      	mov	r2, r3
2000142c:	f002 f91a 	bl	20003664 <memset>


	// Loop variables
	while( 1 ) {
		// Hold off interrupts during I2C communication
		NVIC_DisableIRQ(32);
20001430:	f04f 0020 	mov.w	r0, #32
20001434:	f7ff f850 	bl	200004d8 <NVIC_DisableIRQ>
		NVIC_DisableIRQ(33);
20001438:	f04f 0021 	mov.w	r0, #33	; 0x21
2000143c:	f7ff f84c 	bl	200004d8 <NVIC_DisableIRQ>

		// Get data from all sensors
		gridEYE_read(pixel_addr, pixel_data);
20001440:	f107 0284 	add.w	r2, r7, #132	; 0x84
20001444:	f107 0304 	add.w	r3, r7, #4
20001448:	4610      	mov	r0, r2
2000144a:	4619      	mov	r1, r3
2000144c:	f7ff f88a 	bl	20000564 <gridEYE_read>
		display_angle = calc_display_angle(GLASSES_IMU_ADDR, WAND_IMU_ADDR, set_heading_baseline) - IMU_offset;
20001450:	f244 234c 	movw	r3, #16972	; 0x424c
20001454:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001458:	781b      	ldrb	r3, [r3, #0]
2000145a:	b2db      	uxtb	r3, r3
2000145c:	f04f 0029 	mov.w	r0, #41	; 0x29
20001460:	f04f 0128 	mov.w	r1, #40	; 0x28
20001464:	461a      	mov	r2, r3
20001466:	f7ff fb71 	bl	20000b4c <calc_display_angle>
2000146a:	f244 4388 	movw	r3, #17544	; 0x4488
2000146e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001472:	e9d3 2300 	ldrd	r2, r3, [r3]
20001476:	f001 f95d 	bl	20002734 <__aeabi_dsub>
2000147a:	4602      	mov	r2, r0
2000147c:	460b      	mov	r3, r1
2000147e:	4610      	mov	r0, r2
20001480:	4619      	mov	r1, r3
20001482:	f244 4378 	movw	r3, #17528	; 0x4478
20001486:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000148a:	e9c3 0100 	strd	r0, r1, [r3]


		NVIC_EnableIRQ(32);
2000148e:	f04f 0020 	mov.w	r0, #32
20001492:	f7ff f805 	bl	200004a0 <NVIC_EnableIRQ>
		NVIC_EnableIRQ(33);
20001496:	f04f 0021 	mov.w	r0, #33	; 0x21
2000149a:	f7ff f801 	bl	200004a0 <NVIC_EnableIRQ>

		IMU_temp_offset = display_angle + IMU_offset;
2000149e:	f244 4378 	movw	r3, #17528	; 0x4478
200014a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200014a6:	e9d3 0100 	ldrd	r0, r1, [r3]
200014aa:	f244 4388 	movw	r3, #17544	; 0x4488
200014ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
200014b2:	e9d3 2300 	ldrd	r2, r3, [r3]
200014b6:	f001 f93f 	bl	20002738 <__adddf3>
200014ba:	4602      	mov	r2, r0
200014bc:	460b      	mov	r3, r1
200014be:	4610      	mov	r0, r2
200014c0:	4619      	mov	r1, r3
200014c2:	f244 3370 	movw	r3, #17264	; 0x4370
200014c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200014ca:	e9c3 0100 	strd	r0, r1, [r3]
		SONIC_DATA = *SONIC_READ;
200014ce:	f244 2348 	movw	r3, #16968	; 0x4248
200014d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200014d6:	681b      	ldr	r3, [r3, #0]
200014d8:	681a      	ldr	r2, [r3, #0]
200014da:	f244 3368 	movw	r3, #17256	; 0x4368
200014de:	f2c2 0300 	movt	r3, #8192	; 0x2000
200014e2:	601a      	str	r2, [r3, #0]

		get_temps_forward(pixel_data, temps);
200014e4:	f107 0304 	add.w	r3, r7, #4
200014e8:	4618      	mov	r0, r3
200014ea:	f244 3178 	movw	r1, #17272	; 0x4378
200014ee:	f2c2 0100 	movt	r1, #8192	; 0x2000
200014f2:	f7ff f8b5 	bl	20000660 <get_temps_forward>

		switch(current_mode){
200014f6:	f244 3364 	movw	r3, #17252	; 0x4364
200014fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
200014fe:	781b      	ldrb	r3, [r3, #0]
20001500:	2b01      	cmp	r3, #1
20001502:	d006      	beq.n	20001512 <main+0x1de>
20001504:	2b02      	cmp	r3, #2
20001506:	d007      	beq.n	20001518 <main+0x1e4>
20001508:	2b00      	cmp	r3, #0
2000150a:	d108      	bne.n	2000151e <main+0x1ea>
			case STANDARD:
				standard_execute();
2000150c:	f7ff fd3e 	bl	20000f8c <standard_execute>
				break;
20001510:	e008      	b.n	20001524 <main+0x1f0>
			case SPECTRUM:
				spectrum_execute();
20001512:	f7ff fe6d 	bl	200011f0 <spectrum_execute>
				break;
20001516:	e005      	b.n	20001524 <main+0x1f0>
			case COMPASS:
				compass_execute();
20001518:	f7ff ff06 	bl	20001328 <compass_execute>
				break;
2000151c:	e002      	b.n	20001524 <main+0x1f0>
			default:
				standard_execute();
2000151e:	f7ff fd35 	bl	20000f8c <standard_execute>
				break;
		}


	}//while(1)
20001522:	e785      	b.n	20001430 <main+0xfc>
20001524:	e784      	b.n	20001430 <main+0xfc>
20001526:	bf00      	nop

20001528 <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20001528:	b480      	push	{r7}
2000152a:	b083      	sub	sp, #12
2000152c:	af00      	add	r7, sp, #0
2000152e:	4603      	mov	r3, r0
20001530:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20001532:	f24e 1300 	movw	r3, #57600	; 0xe100
20001536:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000153a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
2000153e:	ea4f 1252 	mov.w	r2, r2, lsr #5
20001542:	88f9      	ldrh	r1, [r7, #6]
20001544:	f001 011f 	and.w	r1, r1, #31
20001548:	f04f 0001 	mov.w	r0, #1
2000154c:	fa00 f101 	lsl.w	r1, r0, r1
20001550:	f102 0260 	add.w	r2, r2, #96	; 0x60
20001554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20001558:	f107 070c 	add.w	r7, r7, #12
2000155c:	46bd      	mov	sp, r7
2000155e:	bc80      	pop	{r7}
20001560:	4770      	bx	lr
20001562:	bf00      	nop

20001564 <MSS_UART_isr>:
static void
MSS_UART_isr
(
    mss_uart_instance_t * this_uart
)
{
20001564:	b580      	push	{r7, lr}
20001566:	b084      	sub	sp, #16
20001568:	af00      	add	r7, sp, #0
2000156a:	6078      	str	r0, [r7, #4]
    uint8_t iirf;

    ASSERT( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) );
2000156c:	687a      	ldr	r2, [r7, #4]
2000156e:	f244 43b8 	movw	r3, #17592	; 0x44b8
20001572:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001576:	429a      	cmp	r2, r3
20001578:	d007      	beq.n	2000158a <MSS_UART_isr+0x26>
2000157a:	687a      	ldr	r2, [r7, #4]
2000157c:	f244 4390 	movw	r3, #17552	; 0x4490
20001580:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001584:	429a      	cmp	r2, r3
20001586:	d000      	beq.n	2000158a <MSS_UART_isr+0x26>
20001588:	be00      	bkpt	0x0000

    if ( (this_uart == &g_mss_uart0) || (this_uart == &g_mss_uart1) )
2000158a:	687a      	ldr	r2, [r7, #4]
2000158c:	f244 43b8 	movw	r3, #17592	; 0x44b8
20001590:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001594:	429a      	cmp	r2, r3
20001596:	d006      	beq.n	200015a6 <MSS_UART_isr+0x42>
20001598:	687a      	ldr	r2, [r7, #4]
2000159a:	f244 4390 	movw	r3, #17552	; 0x4490
2000159e:	f2c2 0300 	movt	r3, #8192	; 0x2000
200015a2:	429a      	cmp	r2, r3
200015a4:	d167      	bne.n	20001676 <MSS_UART_isr+0x112>
    {
        iirf = this_uart->hw_reg->IIR & IIRF_MASK;
200015a6:	687b      	ldr	r3, [r7, #4]
200015a8:	681b      	ldr	r3, [r3, #0]
200015aa:	7a1b      	ldrb	r3, [r3, #8]
200015ac:	b2db      	uxtb	r3, r3
200015ae:	f003 030f 	and.w	r3, r3, #15
200015b2:	73fb      	strb	r3, [r7, #15]

        switch ( iirf )
200015b4:	7bfb      	ldrb	r3, [r7, #15]
200015b6:	2b0c      	cmp	r3, #12
200015b8:	d854      	bhi.n	20001664 <MSS_UART_isr+0x100>
200015ba:	a201      	add	r2, pc, #4	; (adr r2, 200015c0 <MSS_UART_isr+0x5c>)
200015bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
200015c0:	200015f5 	.word	0x200015f5
200015c4:	20001665 	.word	0x20001665
200015c8:	20001611 	.word	0x20001611
200015cc:	20001665 	.word	0x20001665
200015d0:	2000162d 	.word	0x2000162d
200015d4:	20001665 	.word	0x20001665
200015d8:	20001649 	.word	0x20001649
200015dc:	20001665 	.word	0x20001665
200015e0:	20001665 	.word	0x20001665
200015e4:	20001665 	.word	0x20001665
200015e8:	20001665 	.word	0x20001665
200015ec:	20001665 	.word	0x20001665
200015f0:	2000162d 	.word	0x2000162d
        {
            case IIRF_MODEM_STATUS:  /* Modem status interrupt */
            {
                ASSERT( NULL_HANDLER != this_uart->modemsts_handler );
200015f4:	687b      	ldr	r3, [r7, #4]
200015f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200015f8:	2b00      	cmp	r3, #0
200015fa:	d100      	bne.n	200015fe <MSS_UART_isr+0x9a>
200015fc:	be00      	bkpt	0x0000
                if( NULL_HANDLER != this_uart->modemsts_handler )
200015fe:	687b      	ldr	r3, [r7, #4]
20001600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001602:	2b00      	cmp	r3, #0
20001604:	d030      	beq.n	20001668 <MSS_UART_isr+0x104>
                {
                   (*(this_uart->modemsts_handler))( this_uart );
20001606:	687b      	ldr	r3, [r7, #4]
20001608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000160a:	6878      	ldr	r0, [r7, #4]
2000160c:	4798      	blx	r3
                }
            }
            break;
2000160e:	e032      	b.n	20001676 <MSS_UART_isr+0x112>

            case IIRF_THRE: /* Transmitter Holding Register Empty */
            {
                ASSERT( NULL_HANDLER != this_uart->tx_handler );
20001610:	687b      	ldr	r3, [r7, #4]
20001612:	6a1b      	ldr	r3, [r3, #32]
20001614:	2b00      	cmp	r3, #0
20001616:	d100      	bne.n	2000161a <MSS_UART_isr+0xb6>
20001618:	be00      	bkpt	0x0000
                if ( NULL_HANDLER != this_uart->tx_handler )
2000161a:	687b      	ldr	r3, [r7, #4]
2000161c:	6a1b      	ldr	r3, [r3, #32]
2000161e:	2b00      	cmp	r3, #0
20001620:	d024      	beq.n	2000166c <MSS_UART_isr+0x108>
                {
                    (*(this_uart->tx_handler))( this_uart );
20001622:	687b      	ldr	r3, [r7, #4]
20001624:	6a1b      	ldr	r3, [r3, #32]
20001626:	6878      	ldr	r0, [r7, #4]
20001628:	4798      	blx	r3
                }
            }
            break;
2000162a:	e024      	b.n	20001676 <MSS_UART_isr+0x112>

            case IIRF_RX_DATA:      /* Received Data Available */
            case IIRF_DATA_TIMEOUT: /* Received Data Timed-out */
            {
                ASSERT( NULL_HANDLER != this_uart->rx_handler );
2000162c:	687b      	ldr	r3, [r7, #4]
2000162e:	69db      	ldr	r3, [r3, #28]
20001630:	2b00      	cmp	r3, #0
20001632:	d100      	bne.n	20001636 <MSS_UART_isr+0xd2>
20001634:	be00      	bkpt	0x0000
                if ( NULL_HANDLER != this_uart->rx_handler )
20001636:	687b      	ldr	r3, [r7, #4]
20001638:	69db      	ldr	r3, [r3, #28]
2000163a:	2b00      	cmp	r3, #0
2000163c:	d018      	beq.n	20001670 <MSS_UART_isr+0x10c>
                {
                    (*(this_uart->rx_handler))( this_uart );
2000163e:	687b      	ldr	r3, [r7, #4]
20001640:	69db      	ldr	r3, [r3, #28]
20001642:	6878      	ldr	r0, [r7, #4]
20001644:	4798      	blx	r3
                }
            }
            break;
20001646:	e016      	b.n	20001676 <MSS_UART_isr+0x112>

            case IIRF_RX_LINE_STATUS:  /* Line Status Interrupt */
            {
                ASSERT( NULL_HANDLER != this_uart->linests_handler );
20001648:	687b      	ldr	r3, [r7, #4]
2000164a:	699b      	ldr	r3, [r3, #24]
2000164c:	2b00      	cmp	r3, #0
2000164e:	d100      	bne.n	20001652 <MSS_UART_isr+0xee>
20001650:	be00      	bkpt	0x0000
                if ( NULL_HANDLER != this_uart->linests_handler )
20001652:	687b      	ldr	r3, [r7, #4]
20001654:	699b      	ldr	r3, [r3, #24]
20001656:	2b00      	cmp	r3, #0
20001658:	d00c      	beq.n	20001674 <MSS_UART_isr+0x110>
                {
                   (*(this_uart->linests_handler))( this_uart );
2000165a:	687b      	ldr	r3, [r7, #4]
2000165c:	699b      	ldr	r3, [r3, #24]
2000165e:	6878      	ldr	r0, [r7, #4]
20001660:	4798      	blx	r3
                }
            }
            break;
20001662:	e008      	b.n	20001676 <MSS_UART_isr+0x112>

            default:
            {
                ASSERT( INVALID_INTERRUPT );
20001664:	be00      	bkpt	0x0000
20001666:	e006      	b.n	20001676 <MSS_UART_isr+0x112>
                if( NULL_HANDLER != this_uart->modemsts_handler )
                {
                   (*(this_uart->modemsts_handler))( this_uart );
                }
            }
            break;
20001668:	bf00      	nop
2000166a:	e004      	b.n	20001676 <MSS_UART_isr+0x112>
                if ( NULL_HANDLER != this_uart->tx_handler )
                {
                    (*(this_uart->tx_handler))( this_uart );
                }
            }
            break;
2000166c:	bf00      	nop
2000166e:	e002      	b.n	20001676 <MSS_UART_isr+0x112>
                if ( NULL_HANDLER != this_uart->rx_handler )
                {
                    (*(this_uart->rx_handler))( this_uart );
                }
            }
            break;
20001670:	bf00      	nop
20001672:	e000      	b.n	20001676 <MSS_UART_isr+0x112>
                if ( NULL_HANDLER != this_uart->linests_handler )
                {
                   (*(this_uart->linests_handler))( this_uart );
                }
            }
            break;
20001674:	bf00      	nop
                ASSERT( INVALID_INTERRUPT );
            }
            break;
        }
    }
}
20001676:	f107 0710 	add.w	r7, r7, #16
2000167a:	46bd      	mov	sp, r7
2000167c:	bd80      	pop	{r7, pc}
2000167e:	bf00      	nop

20001680 <UART0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART0_IRQHandler( void )
#else
void UART0_IRQHandler( void )
#endif
{
20001680:	4668      	mov	r0, sp
20001682:	f020 0107 	bic.w	r1, r0, #7
20001686:	468d      	mov	sp, r1
20001688:	b589      	push	{r0, r3, r7, lr}
2000168a:	af00      	add	r7, sp, #0
    MSS_UART_isr( &g_mss_uart0 );
2000168c:	f244 40b8 	movw	r0, #17592	; 0x44b8
20001690:	f2c2 0000 	movt	r0, #8192	; 0x2000
20001694:	f7ff ff66 	bl	20001564 <MSS_UART_isr>
    NVIC_ClearPendingIRQ( UART0_IRQn );
20001698:	f04f 000a 	mov.w	r0, #10
2000169c:	f7ff ff44 	bl	20001528 <NVIC_ClearPendingIRQ>
}
200016a0:	46bd      	mov	sp, r7
200016a2:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200016a6:	4685      	mov	sp, r0
200016a8:	4770      	bx	lr
200016aa:	bf00      	nop

200016ac <UART1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void UART1_IRQHandler( void )
#else
void UART1_IRQHandler( void )
#endif
{
200016ac:	4668      	mov	r0, sp
200016ae:	f020 0107 	bic.w	r1, r0, #7
200016b2:	468d      	mov	sp, r1
200016b4:	b589      	push	{r0, r3, r7, lr}
200016b6:	af00      	add	r7, sp, #0
    MSS_UART_isr( &g_mss_uart1 );
200016b8:	f244 4090 	movw	r0, #17552	; 0x4490
200016bc:	f2c2 0000 	movt	r0, #8192	; 0x2000
200016c0:	f7ff ff50 	bl	20001564 <MSS_UART_isr>
    NVIC_ClearPendingIRQ( UART1_IRQn );
200016c4:	f04f 000b 	mov.w	r0, #11
200016c8:	f7ff ff2e 	bl	20001528 <NVIC_ClearPendingIRQ>
}
200016cc:	46bd      	mov	sp, r7
200016ce:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200016d2:	4685      	mov	sp, r0
200016d4:	4770      	bx	lr
200016d6:	bf00      	nop

200016d8 <NVIC_EnableIRQ>:
 *
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
200016d8:	b480      	push	{r7}
200016da:	b083      	sub	sp, #12
200016dc:	af00      	add	r7, sp, #0
200016de:	4603      	mov	r3, r0
200016e0:	80fb      	strh	r3, [r7, #6]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
200016e2:	f24e 1300 	movw	r3, #57600	; 0xe100
200016e6:	f2ce 0300 	movt	r3, #57344	; 0xe000
200016ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
200016ee:	ea4f 1252 	mov.w	r2, r2, lsr #5
200016f2:	88f9      	ldrh	r1, [r7, #6]
200016f4:	f001 011f 	and.w	r1, r1, #31
200016f8:	f04f 0001 	mov.w	r0, #1
200016fc:	fa00 f101 	lsl.w	r1, r0, r1
20001700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20001704:	f107 070c 	add.w	r7, r7, #12
20001708:	46bd      	mov	sp, r7
2000170a:	bc80      	pop	{r7}
2000170c:	4770      	bx	lr
2000170e:	bf00      	nop

20001710 <NVIC_DisableIRQ>:
 * 
 * Disable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
20001710:	b480      	push	{r7}
20001712:	b083      	sub	sp, #12
20001714:	af00      	add	r7, sp, #0
20001716:	4603      	mov	r3, r0
20001718:	80fb      	strh	r3, [r7, #6]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
2000171a:	f24e 1300 	movw	r3, #57600	; 0xe100
2000171e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20001722:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20001726:	ea4f 1252 	mov.w	r2, r2, lsr #5
2000172a:	88f9      	ldrh	r1, [r7, #6]
2000172c:	f001 011f 	and.w	r1, r1, #31
20001730:	f04f 0001 	mov.w	r0, #1
20001734:	fa00 f101 	lsl.w	r1, r0, r1
20001738:	f102 0220 	add.w	r2, r2, #32
2000173c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20001740:	f107 070c 	add.w	r7, r7, #12
20001744:	46bd      	mov	sp, r7
20001746:	bc80      	pop	{r7}
20001748:	4770      	bx	lr
2000174a:	bf00      	nop

2000174c <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
2000174c:	b480      	push	{r7}
2000174e:	b083      	sub	sp, #12
20001750:	af00      	add	r7, sp, #0
20001752:	4603      	mov	r3, r0
20001754:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
20001756:	f24e 1300 	movw	r3, #57600	; 0xe100
2000175a:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000175e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20001762:	ea4f 1252 	mov.w	r2, r2, lsr #5
20001766:	88f9      	ldrh	r1, [r7, #6]
20001768:	f001 011f 	and.w	r1, r1, #31
2000176c:	f04f 0001 	mov.w	r0, #1
20001770:	fa00 f101 	lsl.w	r1, r0, r1
20001774:	f102 0260 	add.w	r2, r2, #96	; 0x60
20001778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
2000177c:	f107 070c 	add.w	r7, r7, #12
20001780:	46bd      	mov	sp, r7
20001782:	bc80      	pop	{r7}
20001784:	4770      	bx	lr
20001786:	bf00      	nop

20001788 <MSS_I2C_init>:
(
    mss_i2c_instance_t * this_i2c,
    uint8_t ser_address,
    mss_i2c_clock_divider_t ser_clock_speed
)
{
20001788:	b580      	push	{r7, lr}
2000178a:	b084      	sub	sp, #16
2000178c:	af00      	add	r7, sp, #0
2000178e:	6078      	str	r0, [r7, #4]
20001790:	4613      	mov	r3, r2
20001792:	460a      	mov	r2, r1
20001794:	70fa      	strb	r2, [r7, #3]
20001796:	70bb      	strb	r3, [r7, #2]
    uint32_t primask;
    uint_fast16_t clock_speed = (uint_fast16_t)ser_clock_speed;
20001798:	78bb      	ldrb	r3, [r7, #2]
2000179a:	60fb      	str	r3, [r7, #12]
    
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
2000179c:	687a      	ldr	r2, [r7, #4]
2000179e:	f244 43e0 	movw	r3, #17632	; 0x44e0
200017a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200017a6:	429a      	cmp	r2, r3
200017a8:	d007      	beq.n	200017ba <MSS_I2C_init+0x32>
200017aa:	687a      	ldr	r2, [r7, #4]
200017ac:	f244 5354 	movw	r3, #17748	; 0x4554
200017b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200017b4:	429a      	cmp	r2, r3
200017b6:	d000      	beq.n	200017ba <MSS_I2C_init+0x32>
200017b8:	be00      	bkpt	0x0000
     * Initialize all items of the this_i2c data structure to zero. This
     * initializes all state variables to their init value. It relies on
     * the fact that NO_TRANSACTION, I2C_SUCCESS and I2C_RELEASE_BUS all
     * have an actual value of zero.
     */
    primask = disable_interrupts();
200017ba:	f000 fe63 	bl	20002484 <disable_interrupts>
200017be:	4603      	mov	r3, r0
200017c0:	60bb      	str	r3, [r7, #8]
    memset(this_i2c, 0, sizeof(mss_i2c_instance_t));
200017c2:	6878      	ldr	r0, [r7, #4]
200017c4:	f04f 0100 	mov.w	r1, #0
200017c8:	f04f 0274 	mov.w	r2, #116	; 0x74
200017cc:	f001 ff4a 	bl	20003664 <memset>
    
    if ( this_i2c == &g_mss_i2c0 )
200017d0:	687a      	ldr	r2, [r7, #4]
200017d2:	f244 43e0 	movw	r3, #17632	; 0x44e0
200017d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
200017da:	429a      	cmp	r2, r3
200017dc:	d12c      	bne.n	20001838 <MSS_I2C_init+0xb0>
    {
        this_i2c->irqn = I2C0_IRQn;
200017de:	687b      	ldr	r3, [r7, #4]
200017e0:	f04f 020e 	mov.w	r2, #14
200017e4:	825a      	strh	r2, [r3, #18]
        this_i2c->hw_reg = I2C0;
200017e6:	687a      	ldr	r2, [r7, #4]
200017e8:	f242 0300 	movw	r3, #8192	; 0x2000
200017ec:	f2c4 0300 	movt	r3, #16384	; 0x4000
200017f0:	6153      	str	r3, [r2, #20]
        this_i2c->hw_reg_bit = I2C0_BITBAND;
200017f2:	687a      	ldr	r2, [r7, #4]
200017f4:	f240 0300 	movw	r3, #0
200017f8:	f2c4 2304 	movt	r3, #16900	; 0x4204
200017fc:	6193      	str	r3, [r2, #24]
        
        /* reset I2C0 */
        SYSREG->SOFT_RST_CR |= SYSREG_I2C0_SOFTRESET_MASK;
200017fe:	f242 0300 	movw	r3, #8192	; 0x2000
20001802:	f2ce 0304 	movt	r3, #57348	; 0xe004
20001806:	f242 0200 	movw	r2, #8192	; 0x2000
2000180a:	f2ce 0204 	movt	r2, #57348	; 0xe004
2000180e:	6b12      	ldr	r2, [r2, #48]	; 0x30
20001810:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
20001814:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended I2C0 interrupt */
        NVIC_ClearPendingIRQ( I2C0_IRQn );
20001816:	f04f 000e 	mov.w	r0, #14
2000181a:	f7ff ff97 	bl	2000174c <NVIC_ClearPendingIRQ>
        /* Take I2C0 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C0_SOFTRESET_MASK;
2000181e:	f242 0300 	movw	r3, #8192	; 0x2000
20001822:	f2ce 0304 	movt	r3, #57348	; 0xe004
20001826:	f242 0200 	movw	r2, #8192	; 0x2000
2000182a:	f2ce 0204 	movt	r2, #57348	; 0xe004
2000182e:	6b12      	ldr	r2, [r2, #48]	; 0x30
20001830:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
20001834:	631a      	str	r2, [r3, #48]	; 0x30
20001836:	e02b      	b.n	20001890 <MSS_I2C_init+0x108>
    }
    else
    {
        this_i2c->irqn = I2C1_IRQn;
20001838:	687b      	ldr	r3, [r7, #4]
2000183a:	f04f 0211 	mov.w	r2, #17
2000183e:	825a      	strh	r2, [r3, #18]
        this_i2c->hw_reg = I2C1;
20001840:	687a      	ldr	r2, [r7, #4]
20001842:	f242 0300 	movw	r3, #8192	; 0x2000
20001846:	f2c4 0301 	movt	r3, #16385	; 0x4001
2000184a:	6153      	str	r3, [r2, #20]
        this_i2c->hw_reg_bit = I2C1_BITBAND;
2000184c:	687a      	ldr	r2, [r7, #4]
2000184e:	f240 0300 	movw	r3, #0
20001852:	f2c4 2324 	movt	r3, #16932	; 0x4224
20001856:	6193      	str	r3, [r2, #24]
        
        /* reset I2C1 */
        SYSREG->SOFT_RST_CR |= SYSREG_I2C1_SOFTRESET_MASK;
20001858:	f242 0300 	movw	r3, #8192	; 0x2000
2000185c:	f2ce 0304 	movt	r3, #57348	; 0xe004
20001860:	f242 0200 	movw	r2, #8192	; 0x2000
20001864:	f2ce 0204 	movt	r2, #57348	; 0xe004
20001868:	6b12      	ldr	r2, [r2, #48]	; 0x30
2000186a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
2000186e:	631a      	str	r2, [r3, #48]	; 0x30
        /* Clear any previously pended I2C1 interrupt */
        NVIC_ClearPendingIRQ( I2C1_IRQn );
20001870:	f04f 0011 	mov.w	r0, #17
20001874:	f7ff ff6a 	bl	2000174c <NVIC_ClearPendingIRQ>
        /* Take I2C1 out of reset. */
        SYSREG->SOFT_RST_CR &= ~SYSREG_I2C1_SOFTRESET_MASK;
20001878:	f242 0300 	movw	r3, #8192	; 0x2000
2000187c:	f2ce 0304 	movt	r3, #57348	; 0xe004
20001880:	f242 0200 	movw	r2, #8192	; 0x2000
20001884:	f2ce 0204 	movt	r2, #57348	; 0xe004
20001888:	6b12      	ldr	r2, [r2, #48]	; 0x30
2000188a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
2000188e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Use same base address for SMBus bitband access */
    this_i2c->hw_smb_reg_bit = (I2C_SMBus_BitBand_TypeDef *)this_i2c->hw_reg_bit;
20001890:	687b      	ldr	r3, [r7, #4]
20001892:	699b      	ldr	r3, [r3, #24]
20001894:	461a      	mov	r2, r3
20001896:	687b      	ldr	r3, [r7, #4]
20001898:	61da      	str	r2, [r3, #28]

    /* Update Serial address of the device */
    this_i2c->ser_address = (uint_fast8_t)ser_address << 1u;
2000189a:	78fb      	ldrb	r3, [r7, #3]
2000189c:	ea4f 0243 	mov.w	r2, r3, lsl #1
200018a0:	687b      	ldr	r3, [r7, #4]
200018a2:	601a      	str	r2, [r3, #0]

    this_i2c->hw_reg_bit->CTRL_CR2 = (uint32_t)((clock_speed >> 2u) & 0x01u);
200018a4:	687b      	ldr	r3, [r7, #4]
200018a6:	699b      	ldr	r3, [r3, #24]
200018a8:	68fa      	ldr	r2, [r7, #12]
200018aa:	ea4f 0292 	mov.w	r2, r2, lsr #2
200018ae:	f002 0201 	and.w	r2, r2, #1
200018b2:	61da      	str	r2, [r3, #28]
    this_i2c->hw_reg_bit->CTRL_CR1 = (uint32_t)((clock_speed >> 1u) & 0x01u);
200018b4:	687b      	ldr	r3, [r7, #4]
200018b6:	699b      	ldr	r3, [r3, #24]
200018b8:	68fa      	ldr	r2, [r7, #12]
200018ba:	ea4f 0252 	mov.w	r2, r2, lsr #1
200018be:	f002 0201 	and.w	r2, r2, #1
200018c2:	605a      	str	r2, [r3, #4]
    this_i2c->hw_reg_bit->CTRL_CR0 = (uint32_t)(clock_speed & 0x01u);
200018c4:	687b      	ldr	r3, [r7, #4]
200018c6:	699b      	ldr	r3, [r3, #24]
200018c8:	68fa      	ldr	r2, [r7, #12]
200018ca:	f002 0201 	and.w	r2, r2, #1
200018ce:	601a      	str	r2, [r3, #0]
    this_i2c->hw_reg->ADDR = (uint8_t)this_i2c->ser_address;
200018d0:	687b      	ldr	r3, [r7, #4]
200018d2:	695b      	ldr	r3, [r3, #20]
200018d4:	687a      	ldr	r2, [r7, #4]
200018d6:	6812      	ldr	r2, [r2, #0]
200018d8:	b2d2      	uxtb	r2, r2
200018da:	731a      	strb	r2, [r3, #12]
    this_i2c->hw_reg_bit->CTRL_ENS1 = 0x01u; /* set enable bit */
200018dc:	687b      	ldr	r3, [r7, #4]
200018de:	699b      	ldr	r3, [r3, #24]
200018e0:	f04f 0201 	mov.w	r2, #1
200018e4:	619a      	str	r2, [r3, #24]
    restore_interrupts( primask );
200018e6:	68b8      	ldr	r0, [r7, #8]
200018e8:	f000 fdde 	bl	200024a8 <restore_interrupts>
}
200018ec:	f107 0710 	add.w	r7, r7, #16
200018f0:	46bd      	mov	sp, r7
200018f2:	bd80      	pop	{r7, pc}

200018f4 <MSS_I2C_write>:
    uint8_t serial_addr,
    const uint8_t * write_buffer,
    uint16_t write_size,
    uint8_t options
)
{
200018f4:	b580      	push	{r7, lr}
200018f6:	b086      	sub	sp, #24
200018f8:	af00      	add	r7, sp, #0
200018fa:	60f8      	str	r0, [r7, #12]
200018fc:	607a      	str	r2, [r7, #4]
200018fe:	460a      	mov	r2, r1
20001900:	72fa      	strb	r2, [r7, #11]
20001902:	807b      	strh	r3, [r7, #2]
    uint32_t primask;
    volatile uint8_t stat_ctrl;

    ASSERT((this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1));
20001904:	68fa      	ldr	r2, [r7, #12]
20001906:	f244 43e0 	movw	r3, #17632	; 0x44e0
2000190a:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000190e:	429a      	cmp	r2, r3
20001910:	d007      	beq.n	20001922 <MSS_I2C_write+0x2e>
20001912:	68fa      	ldr	r2, [r7, #12]
20001914:	f244 5354 	movw	r3, #17748	; 0x4554
20001918:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000191c:	429a      	cmp	r2, r3
2000191e:	d000      	beq.n	20001922 <MSS_I2C_write+0x2e>
20001920:	be00      	bkpt	0x0000

    primask = disable_interrupts();
20001922:	f000 fdaf 	bl	20002484 <disable_interrupts>
20001926:	4603      	mov	r3, r0
20001928:	617b      	str	r3, [r7, #20]

    /* Update the transaction only when there is no transaction going on I2C */
    if( this_i2c->transaction == NO_TRANSACTION)
2000192a:	68fb      	ldr	r3, [r7, #12]
2000192c:	7a1b      	ldrb	r3, [r3, #8]
2000192e:	2b00      	cmp	r3, #0
20001930:	d103      	bne.n	2000193a <MSS_I2C_write+0x46>
    {
      this_i2c->transaction = MASTER_WRITE_TRANSACTION;
20001932:	68fb      	ldr	r3, [r7, #12]
20001934:	f04f 0201 	mov.w	r2, #1
20001938:	721a      	strb	r2, [r3, #8]
    }

    /* Update the Pending transaction information so that transaction can restarted */
    this_i2c->pending_transaction = MASTER_WRITE_TRANSACTION ;
2000193a:	68fb      	ldr	r3, [r7, #12]
2000193c:	f04f 0201 	mov.w	r2, #1
20001940:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

    /* Update target address */
    this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
20001944:	7afb      	ldrb	r3, [r7, #11]
20001946:	ea4f 0243 	mov.w	r2, r3, lsl #1
2000194a:	68fb      	ldr	r3, [r7, #12]
2000194c:	605a      	str	r2, [r3, #4]

    this_i2c->dir = WRITE_DIR;
2000194e:	68fb      	ldr	r3, [r7, #12]
20001950:	f04f 0200 	mov.w	r2, #0
20001954:	62da      	str	r2, [r3, #44]	; 0x2c

    this_i2c->master_tx_buffer = write_buffer;
20001956:	68fb      	ldr	r3, [r7, #12]
20001958:	687a      	ldr	r2, [r7, #4]
2000195a:	621a      	str	r2, [r3, #32]
    this_i2c->master_tx_size = write_size;
2000195c:	887a      	ldrh	r2, [r7, #2]
2000195e:	68fb      	ldr	r3, [r7, #12]
20001960:	625a      	str	r2, [r3, #36]	; 0x24
    this_i2c->master_tx_idx = 0u;
20001962:	68fb      	ldr	r3, [r7, #12]
20001964:	f04f 0200 	mov.w	r2, #0
20001968:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set I2C status in progress */
    this_i2c->master_status = MSS_I2C_IN_PROGRESS;
2000196a:	68fb      	ldr	r3, [r7, #12]
2000196c:	f04f 0201 	mov.w	r2, #1
20001970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    this_i2c->options = options;
20001974:	68fb      	ldr	r3, [r7, #12]
20001976:	f897 2020 	ldrb.w	r2, [r7, #32]
2000197a:	741a      	strb	r2, [r3, #16]

    if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
2000197c:	68fb      	ldr	r3, [r7, #12]
2000197e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
20001982:	b2db      	uxtb	r3, r3
20001984:	2b01      	cmp	r3, #1
20001986:	d105      	bne.n	20001994 <MSS_I2C_write+0xa0>
    {
        this_i2c->is_transaction_pending = 1u;
20001988:	68fb      	ldr	r3, [r7, #12]
2000198a:	f04f 0201 	mov.w	r2, #1
2000198e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
20001992:	e004      	b.n	2000199e <MSS_I2C_write+0xaa>
    }
    else
    {
        this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
20001994:	68fb      	ldr	r3, [r7, #12]
20001996:	699b      	ldr	r3, [r3, #24]
20001998:	f04f 0201 	mov.w	r2, #1
2000199c:	615a      	str	r2, [r3, #20]
    /*
     * Clear interrupts if required (depends on repeated starts).
     * Since the Bus is on hold, only then prior status needs to
     * be cleared.
     */
    if ( MSS_I2C_HOLD_BUS == this_i2c->bus_status )
2000199e:	68fb      	ldr	r3, [r7, #12]
200019a0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
200019a4:	2b01      	cmp	r3, #1
200019a6:	d111      	bne.n	200019cc <MSS_I2C_write+0xd8>
    {
        this_i2c->hw_reg_bit->CTRL_SI = 0u;
200019a8:	68fb      	ldr	r3, [r7, #12]
200019aa:	699b      	ldr	r3, [r3, #24]
200019ac:	f04f 0200 	mov.w	r2, #0
200019b0:	60da      	str	r2, [r3, #12]
        stat_ctrl = this_i2c->hw_reg->STATUS;
200019b2:	68fb      	ldr	r3, [r7, #12]
200019b4:	695b      	ldr	r3, [r3, #20]
200019b6:	791b      	ldrb	r3, [r3, #4]
200019b8:	74fb      	strb	r3, [r7, #19]
        stat_ctrl = stat_ctrl;  /* Avoids Lint warning */
200019ba:	7cfb      	ldrb	r3, [r7, #19]
200019bc:	b2db      	uxtb	r3, r3
200019be:	74fb      	strb	r3, [r7, #19]
        NVIC_ClearPendingIRQ( this_i2c->irqn );
200019c0:	68fb      	ldr	r3, [r7, #12]
200019c2:	8a5b      	ldrh	r3, [r3, #18]
200019c4:	b21b      	sxth	r3, r3
200019c6:	4618      	mov	r0, r3
200019c8:	f7ff fec0 	bl	2000174c <NVIC_ClearPendingIRQ>
    }

    /* Enable the interrupt. ( Re-enable) */
    NVIC_EnableIRQ( this_i2c->irqn );
200019cc:	68fb      	ldr	r3, [r7, #12]
200019ce:	8a5b      	ldrh	r3, [r3, #18]
200019d0:	b21b      	sxth	r3, r3
200019d2:	4618      	mov	r0, r3
200019d4:	f7ff fe80 	bl	200016d8 <NVIC_EnableIRQ>

    restore_interrupts( primask );
200019d8:	6978      	ldr	r0, [r7, #20]
200019da:	f000 fd65 	bl	200024a8 <restore_interrupts>
}
200019de:	f107 0718 	add.w	r7, r7, #24
200019e2:	46bd      	mov	sp, r7
200019e4:	bd80      	pop	{r7, pc}
200019e6:	bf00      	nop

200019e8 <MSS_I2C_write_read>:
    uint16_t offset_size,
    uint8_t * read_buffer,
    uint16_t read_size,
    uint8_t options
)
{
200019e8:	b580      	push	{r7, lr}
200019ea:	b086      	sub	sp, #24
200019ec:	af00      	add	r7, sp, #0
200019ee:	60f8      	str	r0, [r7, #12]
200019f0:	607a      	str	r2, [r7, #4]
200019f2:	460a      	mov	r2, r1
200019f4:	72fa      	strb	r2, [r7, #11]
200019f6:	807b      	strh	r3, [r7, #2]
    ASSERT((this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1));
200019f8:	68fa      	ldr	r2, [r7, #12]
200019fa:	f244 43e0 	movw	r3, #17632	; 0x44e0
200019fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001a02:	429a      	cmp	r2, r3
20001a04:	d007      	beq.n	20001a16 <MSS_I2C_write_read+0x2e>
20001a06:	68fa      	ldr	r2, [r7, #12]
20001a08:	f244 5354 	movw	r3, #17748	; 0x4554
20001a0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001a10:	429a      	cmp	r2, r3
20001a12:	d000      	beq.n	20001a16 <MSS_I2C_write_read+0x2e>
20001a14:	be00      	bkpt	0x0000
    ASSERT(offset_size > 0u);
20001a16:	887b      	ldrh	r3, [r7, #2]
20001a18:	2b00      	cmp	r3, #0
20001a1a:	d100      	bne.n	20001a1e <MSS_I2C_write_read+0x36>
20001a1c:	be00      	bkpt	0x0000
    ASSERT(addr_offset != (const uint8_t *)0);
20001a1e:	687b      	ldr	r3, [r7, #4]
20001a20:	2b00      	cmp	r3, #0
20001a22:	d100      	bne.n	20001a26 <MSS_I2C_write_read+0x3e>
20001a24:	be00      	bkpt	0x0000
    ASSERT(read_size > 0u);
20001a26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
20001a28:	2b00      	cmp	r3, #0
20001a2a:	d100      	bne.n	20001a2e <MSS_I2C_write_read+0x46>
20001a2c:	be00      	bkpt	0x0000
    ASSERT(read_buffer != (uint8_t *)0);
20001a2e:	6a3b      	ldr	r3, [r7, #32]
20001a30:	2b00      	cmp	r3, #0
20001a32:	d100      	bne.n	20001a36 <MSS_I2C_write_read+0x4e>
20001a34:	be00      	bkpt	0x0000

    if((read_size > 0u) && (offset_size > 0u))
20001a36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
20001a38:	2b00      	cmp	r3, #0
20001a3a:	d06a      	beq.n	20001b12 <MSS_I2C_write_read+0x12a>
20001a3c:	887b      	ldrh	r3, [r7, #2]
20001a3e:	2b00      	cmp	r3, #0
20001a40:	d067      	beq.n	20001b12 <MSS_I2C_write_read+0x12a>
    {
        uint32_t primask;
        volatile uint8_t stat_ctrl;

        primask = disable_interrupts();
20001a42:	f000 fd1f 	bl	20002484 <disable_interrupts>
20001a46:	4603      	mov	r3, r0
20001a48:	617b      	str	r3, [r7, #20]

        /* Update the transaction only when there is no transaction going on I2C */
        if( this_i2c->transaction == NO_TRANSACTION)
20001a4a:	68fb      	ldr	r3, [r7, #12]
20001a4c:	7a1b      	ldrb	r3, [r3, #8]
20001a4e:	2b00      	cmp	r3, #0
20001a50:	d103      	bne.n	20001a5a <MSS_I2C_write_read+0x72>
        {
            this_i2c->transaction = MASTER_RANDOM_READ_TRANSACTION;
20001a52:	68fb      	ldr	r3, [r7, #12]
20001a54:	f04f 0203 	mov.w	r2, #3
20001a58:	721a      	strb	r2, [r3, #8]
        }

        /* Update the Pending transaction information so that transaction can restarted */
        this_i2c->pending_transaction = MASTER_RANDOM_READ_TRANSACTION ;
20001a5a:	68fb      	ldr	r3, [r7, #12]
20001a5c:	f04f 0203 	mov.w	r2, #3
20001a60:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

        /* Update target address */
        this_i2c->target_addr = (uint_fast8_t)serial_addr << 1u;
20001a64:	7afb      	ldrb	r3, [r7, #11]
20001a66:	ea4f 0243 	mov.w	r2, r3, lsl #1
20001a6a:	68fb      	ldr	r3, [r7, #12]
20001a6c:	605a      	str	r2, [r3, #4]

        this_i2c->dir = WRITE_DIR;
20001a6e:	68fb      	ldr	r3, [r7, #12]
20001a70:	f04f 0200 	mov.w	r2, #0
20001a74:	62da      	str	r2, [r3, #44]	; 0x2c
        this_i2c->master_tx_buffer = addr_offset;
20001a76:	68fb      	ldr	r3, [r7, #12]
20001a78:	687a      	ldr	r2, [r7, #4]
20001a7a:	621a      	str	r2, [r3, #32]
        this_i2c->master_tx_size = offset_size;
20001a7c:	887a      	ldrh	r2, [r7, #2]
20001a7e:	68fb      	ldr	r3, [r7, #12]
20001a80:	625a      	str	r2, [r3, #36]	; 0x24
        this_i2c->master_tx_idx = 0u;
20001a82:	68fb      	ldr	r3, [r7, #12]
20001a84:	f04f 0200 	mov.w	r2, #0
20001a88:	629a      	str	r2, [r3, #40]	; 0x28

        this_i2c->master_rx_buffer = read_buffer;
20001a8a:	68fb      	ldr	r3, [r7, #12]
20001a8c:	6a3a      	ldr	r2, [r7, #32]
20001a8e:	631a      	str	r2, [r3, #48]	; 0x30
        this_i2c->master_rx_size = read_size;
20001a90:	8cba      	ldrh	r2, [r7, #36]	; 0x24
20001a92:	68fb      	ldr	r3, [r7, #12]
20001a94:	635a      	str	r2, [r3, #52]	; 0x34
        this_i2c->master_rx_idx = 0u;
20001a96:	68fb      	ldr	r3, [r7, #12]
20001a98:	f04f 0200 	mov.w	r2, #0
20001a9c:	639a      	str	r2, [r3, #56]	; 0x38

        /* Set I2C status in progress */
        this_i2c->master_status = MSS_I2C_IN_PROGRESS;
20001a9e:	68fb      	ldr	r3, [r7, #12]
20001aa0:	f04f 0201 	mov.w	r2, #1
20001aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        this_i2c->options = options;
20001aa8:	68fb      	ldr	r3, [r7, #12]
20001aaa:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
20001aae:	741a      	strb	r2, [r3, #16]

        if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
20001ab0:	68fb      	ldr	r3, [r7, #12]
20001ab2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
20001ab6:	b2db      	uxtb	r3, r3
20001ab8:	2b01      	cmp	r3, #1
20001aba:	d105      	bne.n	20001ac8 <MSS_I2C_write_read+0xe0>
        {
            this_i2c->is_transaction_pending = 1u;
20001abc:	68fb      	ldr	r3, [r7, #12]
20001abe:	f04f 0201 	mov.w	r2, #1
20001ac2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
20001ac6:	e004      	b.n	20001ad2 <MSS_I2C_write_read+0xea>
        }
        else
        {
            this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
20001ac8:	68fb      	ldr	r3, [r7, #12]
20001aca:	699b      	ldr	r3, [r3, #24]
20001acc:	f04f 0201 	mov.w	r2, #1
20001ad0:	615a      	str	r2, [r3, #20]
        /*
         * Clear interrupts if required (depends on repeated starts).
         * Since the Bus is on hold, only then prior status needs to
         * be cleared.
         */
        if ( MSS_I2C_HOLD_BUS == this_i2c->bus_status )
20001ad2:	68fb      	ldr	r3, [r7, #12]
20001ad4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
20001ad8:	2b01      	cmp	r3, #1
20001ada:	d111      	bne.n	20001b00 <MSS_I2C_write_read+0x118>
        {
            this_i2c->hw_reg_bit->CTRL_SI = 0u;
20001adc:	68fb      	ldr	r3, [r7, #12]
20001ade:	699b      	ldr	r3, [r3, #24]
20001ae0:	f04f 0200 	mov.w	r2, #0
20001ae4:	60da      	str	r2, [r3, #12]
            stat_ctrl = this_i2c->hw_reg->STATUS;
20001ae6:	68fb      	ldr	r3, [r7, #12]
20001ae8:	695b      	ldr	r3, [r3, #20]
20001aea:	791b      	ldrb	r3, [r3, #4]
20001aec:	74fb      	strb	r3, [r7, #19]
            stat_ctrl = stat_ctrl;  /* Avoids Lint warning */
20001aee:	7cfb      	ldrb	r3, [r7, #19]
20001af0:	b2db      	uxtb	r3, r3
20001af2:	74fb      	strb	r3, [r7, #19]
            NVIC_ClearPendingIRQ( this_i2c->irqn );
20001af4:	68fb      	ldr	r3, [r7, #12]
20001af6:	8a5b      	ldrh	r3, [r3, #18]
20001af8:	b21b      	sxth	r3, r3
20001afa:	4618      	mov	r0, r3
20001afc:	f7ff fe26 	bl	2000174c <NVIC_ClearPendingIRQ>
        }

        /* Enable the interrupt. ( Re-enable) */
        NVIC_EnableIRQ( this_i2c->irqn );
20001b00:	68fb      	ldr	r3, [r7, #12]
20001b02:	8a5b      	ldrh	r3, [r3, #18]
20001b04:	b21b      	sxth	r3, r3
20001b06:	4618      	mov	r0, r3
20001b08:	f7ff fde6 	bl	200016d8 <NVIC_EnableIRQ>

        restore_interrupts( primask );
20001b0c:	6978      	ldr	r0, [r7, #20]
20001b0e:	f000 fccb 	bl	200024a8 <restore_interrupts>
    }
}
20001b12:	f107 0718 	add.w	r7, r7, #24
20001b16:	46bd      	mov	sp, r7
20001b18:	bd80      	pop	{r7, pc}
20001b1a:	bf00      	nop

20001b1c <MSS_I2C_wait_complete>:
mss_i2c_status_t MSS_I2C_wait_complete
(
    mss_i2c_instance_t * this_i2c,
    uint32_t timeout_ms
)
{
20001b1c:	b480      	push	{r7}
20001b1e:	b085      	sub	sp, #20
20001b20:	af00      	add	r7, sp, #0
20001b22:	6078      	str	r0, [r7, #4]
20001b24:	6039      	str	r1, [r7, #0]
	mss_i2c_status_t i2c_status;
    
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
20001b26:	687a      	ldr	r2, [r7, #4]
20001b28:	f244 43e0 	movw	r3, #17632	; 0x44e0
20001b2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001b30:	429a      	cmp	r2, r3
20001b32:	d007      	beq.n	20001b44 <MSS_I2C_wait_complete+0x28>
20001b34:	687a      	ldr	r2, [r7, #4]
20001b36:	f244 5354 	movw	r3, #17748	; 0x4554
20001b3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001b3e:	429a      	cmp	r2, r3
20001b40:	d000      	beq.n	20001b44 <MSS_I2C_wait_complete+0x28>
20001b42:	be00      	bkpt	0x0000
    
    this_i2c->master_timeout_ms = timeout_ms;
20001b44:	687b      	ldr	r3, [r7, #4]
20001b46:	683a      	ldr	r2, [r7, #0]
20001b48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Run the loop until state returns I2C_FAILED  or I2C_SUCESS*/
    do {
        i2c_status = this_i2c->master_status;
20001b4a:	687b      	ldr	r3, [r7, #4]
20001b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
20001b50:	73fb      	strb	r3, [r7, #15]
    } while(MSS_I2C_IN_PROGRESS == i2c_status);
20001b52:	7bfb      	ldrb	r3, [r7, #15]
20001b54:	2b01      	cmp	r3, #1
20001b56:	d0f8      	beq.n	20001b4a <MSS_I2C_wait_complete+0x2e>

    return i2c_status;
20001b58:	7bfb      	ldrb	r3, [r7, #15]
}
20001b5a:	4618      	mov	r0, r3
20001b5c:	f107 0714 	add.w	r7, r7, #20
20001b60:	46bd      	mov	sp, r7
20001b62:	bc80      	pop	{r7}
20001b64:	4770      	bx	lr
20001b66:	bf00      	nop

20001b68 <enable_slave_if_required>:
 */
static void enable_slave_if_required
(
    mss_i2c_instance_t * this_i2c
)
{
20001b68:	b480      	push	{r7}
20001b6a:	b083      	sub	sp, #12
20001b6c:	af00      	add	r7, sp, #0
20001b6e:	6078      	str	r0, [r7, #4]
    if( this_i2c->is_slave_enabled )
20001b70:	687b      	ldr	r3, [r7, #4]
20001b72:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
20001b76:	2b00      	cmp	r3, #0
20001b78:	d004      	beq.n	20001b84 <enable_slave_if_required+0x1c>
    {
        this_i2c->hw_reg_bit->CTRL_AA = 1u;
20001b7a:	687b      	ldr	r3, [r7, #4]
20001b7c:	699b      	ldr	r3, [r3, #24]
20001b7e:	f04f 0201 	mov.w	r2, #1
20001b82:	609a      	str	r2, [r3, #8]
    }
}
20001b84:	f107 070c 	add.w	r7, r7, #12
20001b88:	46bd      	mov	sp, r7
20001b8a:	bc80      	pop	{r7}
20001b8c:	4770      	bx	lr
20001b8e:	bf00      	nop

20001b90 <mss_i2c_isr>:
 */
static void mss_i2c_isr
(
    mss_i2c_instance_t * this_i2c
)
{
20001b90:	b580      	push	{r7, lr}
20001b92:	b084      	sub	sp, #16
20001b94:	af00      	add	r7, sp, #0
20001b96:	6078      	str	r0, [r7, #4]
    volatile uint8_t status;
    uint8_t data;
    uint8_t hold_bus;
    uint8_t clear_irq = 1u;
20001b98:	f04f 0301 	mov.w	r3, #1
20001b9c:	73bb      	strb	r3, [r7, #14]
    ASSERT( (this_i2c == &g_mss_i2c0) || (this_i2c == &g_mss_i2c1) );
20001b9e:	687a      	ldr	r2, [r7, #4]
20001ba0:	f244 43e0 	movw	r3, #17632	; 0x44e0
20001ba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001ba8:	429a      	cmp	r2, r3
20001baa:	d007      	beq.n	20001bbc <mss_i2c_isr+0x2c>
20001bac:	687a      	ldr	r2, [r7, #4]
20001bae:	f244 5354 	movw	r3, #17748	; 0x4554
20001bb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
20001bb6:	429a      	cmp	r2, r3
20001bb8:	d000      	beq.n	20001bbc <mss_i2c_isr+0x2c>
20001bba:	be00      	bkpt	0x0000

    status = this_i2c->hw_reg->STATUS;
20001bbc:	687b      	ldr	r3, [r7, #4]
20001bbe:	695b      	ldr	r3, [r3, #20]
20001bc0:	791b      	ldrb	r3, [r3, #4]
20001bc2:	72fb      	strb	r3, [r7, #11]

    switch( status )
20001bc4:	7afb      	ldrb	r3, [r7, #11]
20001bc6:	b2db      	uxtb	r3, r3
20001bc8:	f1a3 0308 	sub.w	r3, r3, #8
20001bcc:	2bd0      	cmp	r3, #208	; 0xd0
20001bce:	f200 841c 	bhi.w	2000240a <mss_i2c_isr+0x87a>
20001bd2:	a201      	add	r2, pc, #4	; (adr r2, 20001bd8 <mss_i2c_isr+0x48>)
20001bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20001bd8:	20001f1d 	.word	0x20001f1d
20001bdc:	2000240b 	.word	0x2000240b
20001be0:	2000240b 	.word	0x2000240b
20001be4:	2000240b 	.word	0x2000240b
20001be8:	2000240b 	.word	0x2000240b
20001bec:	2000240b 	.word	0x2000240b
20001bf0:	2000240b 	.word	0x2000240b
20001bf4:	2000240b 	.word	0x2000240b
20001bf8:	20001f1d 	.word	0x20001f1d
20001bfc:	2000240b 	.word	0x2000240b
20001c00:	2000240b 	.word	0x2000240b
20001c04:	2000240b 	.word	0x2000240b
20001c08:	2000240b 	.word	0x2000240b
20001c0c:	2000240b 	.word	0x2000240b
20001c10:	2000240b 	.word	0x2000240b
20001c14:	2000240b 	.word	0x2000240b
20001c18:	20001fc1 	.word	0x20001fc1
20001c1c:	2000240b 	.word	0x2000240b
20001c20:	2000240b 	.word	0x2000240b
20001c24:	2000240b 	.word	0x2000240b
20001c28:	2000240b 	.word	0x2000240b
20001c2c:	2000240b 	.word	0x2000240b
20001c30:	2000240b 	.word	0x2000240b
20001c34:	2000240b 	.word	0x2000240b
20001c38:	20001f9d 	.word	0x20001f9d
20001c3c:	2000240b 	.word	0x2000240b
20001c40:	2000240b 	.word	0x2000240b
20001c44:	2000240b 	.word	0x2000240b
20001c48:	2000240b 	.word	0x2000240b
20001c4c:	2000240b 	.word	0x2000240b
20001c50:	2000240b 	.word	0x2000240b
20001c54:	2000240b 	.word	0x2000240b
20001c58:	20001fc1 	.word	0x20001fc1
20001c5c:	2000240b 	.word	0x2000240b
20001c60:	2000240b 	.word	0x2000240b
20001c64:	2000240b 	.word	0x2000240b
20001c68:	2000240b 	.word	0x2000240b
20001c6c:	2000240b 	.word	0x2000240b
20001c70:	2000240b 	.word	0x2000240b
20001c74:	2000240b 	.word	0x2000240b
20001c78:	20002055 	.word	0x20002055
20001c7c:	2000240b 	.word	0x2000240b
20001c80:	2000240b 	.word	0x2000240b
20001c84:	2000240b 	.word	0x2000240b
20001c88:	2000240b 	.word	0x2000240b
20001c8c:	2000240b 	.word	0x2000240b
20001c90:	2000240b 	.word	0x2000240b
20001c94:	2000240b 	.word	0x2000240b
20001c98:	20001f91 	.word	0x20001f91
20001c9c:	2000240b 	.word	0x2000240b
20001ca0:	2000240b 	.word	0x2000240b
20001ca4:	2000240b 	.word	0x2000240b
20001ca8:	2000240b 	.word	0x2000240b
20001cac:	2000240b 	.word	0x2000240b
20001cb0:	2000240b 	.word	0x2000240b
20001cb4:	2000240b 	.word	0x2000240b
20001cb8:	20002079 	.word	0x20002079
20001cbc:	2000240b 	.word	0x2000240b
20001cc0:	2000240b 	.word	0x2000240b
20001cc4:	2000240b 	.word	0x2000240b
20001cc8:	2000240b 	.word	0x2000240b
20001ccc:	2000240b 	.word	0x2000240b
20001cd0:	2000240b 	.word	0x2000240b
20001cd4:	2000240b 	.word	0x2000240b
20001cd8:	200020c9 	.word	0x200020c9
20001cdc:	2000240b 	.word	0x2000240b
20001ce0:	2000240b 	.word	0x2000240b
20001ce4:	2000240b 	.word	0x2000240b
20001ce8:	2000240b 	.word	0x2000240b
20001cec:	2000240b 	.word	0x2000240b
20001cf0:	2000240b 	.word	0x2000240b
20001cf4:	2000240b 	.word	0x2000240b
20001cf8:	200020ed 	.word	0x200020ed
20001cfc:	2000240b 	.word	0x2000240b
20001d00:	2000240b 	.word	0x2000240b
20001d04:	2000240b 	.word	0x2000240b
20001d08:	2000240b 	.word	0x2000240b
20001d0c:	2000240b 	.word	0x2000240b
20001d10:	2000240b 	.word	0x2000240b
20001d14:	2000240b 	.word	0x2000240b
20001d18:	20002127 	.word	0x20002127
20001d1c:	2000240b 	.word	0x2000240b
20001d20:	2000240b 	.word	0x2000240b
20001d24:	2000240b 	.word	0x2000240b
20001d28:	2000240b 	.word	0x2000240b
20001d2c:	2000240b 	.word	0x2000240b
20001d30:	2000240b 	.word	0x2000240b
20001d34:	2000240b 	.word	0x2000240b
20001d38:	200021c9 	.word	0x200021c9
20001d3c:	2000240b 	.word	0x2000240b
20001d40:	2000240b 	.word	0x2000240b
20001d44:	2000240b 	.word	0x2000240b
20001d48:	2000240b 	.word	0x2000240b
20001d4c:	2000240b 	.word	0x2000240b
20001d50:	2000240b 	.word	0x2000240b
20001d54:	2000240b 	.word	0x2000240b
20001d58:	200021bf 	.word	0x200021bf
20001d5c:	2000240b 	.word	0x2000240b
20001d60:	2000240b 	.word	0x2000240b
20001d64:	2000240b 	.word	0x2000240b
20001d68:	2000240b 	.word	0x2000240b
20001d6c:	2000240b 	.word	0x2000240b
20001d70:	2000240b 	.word	0x2000240b
20001d74:	2000240b 	.word	0x2000240b
20001d78:	200021c9 	.word	0x200021c9
20001d7c:	2000240b 	.word	0x2000240b
20001d80:	2000240b 	.word	0x2000240b
20001d84:	2000240b 	.word	0x2000240b
20001d88:	2000240b 	.word	0x2000240b
20001d8c:	2000240b 	.word	0x2000240b
20001d90:	2000240b 	.word	0x2000240b
20001d94:	2000240b 	.word	0x2000240b
20001d98:	200021bf 	.word	0x200021bf
20001d9c:	2000240b 	.word	0x2000240b
20001da0:	2000240b 	.word	0x2000240b
20001da4:	2000240b 	.word	0x2000240b
20001da8:	2000240b 	.word	0x2000240b
20001dac:	2000240b 	.word	0x2000240b
20001db0:	2000240b 	.word	0x2000240b
20001db4:	2000240b 	.word	0x2000240b
20001db8:	2000220b 	.word	0x2000220b
20001dbc:	2000240b 	.word	0x2000240b
20001dc0:	2000240b 	.word	0x2000240b
20001dc4:	2000240b 	.word	0x2000240b
20001dc8:	2000240b 	.word	0x2000240b
20001dcc:	2000240b 	.word	0x2000240b
20001dd0:	2000240b 	.word	0x2000240b
20001dd4:	2000240b 	.word	0x2000240b
20001dd8:	2000218b 	.word	0x2000218b
20001ddc:	2000240b 	.word	0x2000240b
20001de0:	2000240b 	.word	0x2000240b
20001de4:	2000240b 	.word	0x2000240b
20001de8:	2000240b 	.word	0x2000240b
20001dec:	2000240b 	.word	0x2000240b
20001df0:	2000240b 	.word	0x2000240b
20001df4:	2000240b 	.word	0x2000240b
20001df8:	2000220b 	.word	0x2000220b
20001dfc:	2000240b 	.word	0x2000240b
20001e00:	2000240b 	.word	0x2000240b
20001e04:	2000240b 	.word	0x2000240b
20001e08:	2000240b 	.word	0x2000240b
20001e0c:	2000240b 	.word	0x2000240b
20001e10:	2000240b 	.word	0x2000240b
20001e14:	2000240b 	.word	0x2000240b
20001e18:	2000218b 	.word	0x2000218b
20001e1c:	2000240b 	.word	0x2000240b
20001e20:	2000240b 	.word	0x2000240b
20001e24:	2000240b 	.word	0x2000240b
20001e28:	2000240b 	.word	0x2000240b
20001e2c:	2000240b 	.word	0x2000240b
20001e30:	2000240b 	.word	0x2000240b
20001e34:	2000240b 	.word	0x2000240b
20001e38:	20002267 	.word	0x20002267
20001e3c:	2000240b 	.word	0x2000240b
20001e40:	2000240b 	.word	0x2000240b
20001e44:	2000240b 	.word	0x2000240b
20001e48:	2000240b 	.word	0x2000240b
20001e4c:	2000240b 	.word	0x2000240b
20001e50:	2000240b 	.word	0x2000240b
20001e54:	2000240b 	.word	0x2000240b
20001e58:	2000233f 	.word	0x2000233f
20001e5c:	2000240b 	.word	0x2000240b
20001e60:	2000240b 	.word	0x2000240b
20001e64:	2000240b 	.word	0x2000240b
20001e68:	2000240b 	.word	0x2000240b
20001e6c:	2000240b 	.word	0x2000240b
20001e70:	2000240b 	.word	0x2000240b
20001e74:	2000240b 	.word	0x2000240b
20001e78:	2000233f 	.word	0x2000233f
20001e7c:	2000240b 	.word	0x2000240b
20001e80:	2000240b 	.word	0x2000240b
20001e84:	2000240b 	.word	0x2000240b
20001e88:	2000240b 	.word	0x2000240b
20001e8c:	2000240b 	.word	0x2000240b
20001e90:	2000240b 	.word	0x2000240b
20001e94:	2000240b 	.word	0x2000240b
20001e98:	2000233f 	.word	0x2000233f
20001e9c:	2000240b 	.word	0x2000240b
20001ea0:	2000240b 	.word	0x2000240b
20001ea4:	2000240b 	.word	0x2000240b
20001ea8:	2000240b 	.word	0x2000240b
20001eac:	2000240b 	.word	0x2000240b
20001eb0:	2000240b 	.word	0x2000240b
20001eb4:	2000240b 	.word	0x2000240b
20001eb8:	200023d1 	.word	0x200023d1
20001ebc:	2000240b 	.word	0x2000240b
20001ec0:	2000240b 	.word	0x2000240b
20001ec4:	2000240b 	.word	0x2000240b
20001ec8:	2000240b 	.word	0x2000240b
20001ecc:	2000240b 	.word	0x2000240b
20001ed0:	2000240b 	.word	0x2000240b
20001ed4:	2000240b 	.word	0x2000240b
20001ed8:	200023d1 	.word	0x200023d1
20001edc:	2000240b 	.word	0x2000240b
20001ee0:	2000240b 	.word	0x2000240b
20001ee4:	2000240b 	.word	0x2000240b
20001ee8:	2000240b 	.word	0x2000240b
20001eec:	2000240b 	.word	0x2000240b
20001ef0:	2000240b 	.word	0x2000240b
20001ef4:	2000240b 	.word	0x2000240b
20001ef8:	2000240b 	.word	0x2000240b
20001efc:	2000240b 	.word	0x2000240b
20001f00:	2000240b 	.word	0x2000240b
20001f04:	2000240b 	.word	0x2000240b
20001f08:	2000240b 	.word	0x2000240b
20001f0c:	2000240b 	.word	0x2000240b
20001f10:	2000240b 	.word	0x2000240b
20001f14:	2000240b 	.word	0x2000240b
20001f18:	20002311 	.word	0x20002311
    {
        /************** MASTER TRANSMITTER / RECEIVER *******************/
      
        case ST_START: /* start has been xmt'd */
        case ST_RESTART: /* repeated start has been xmt'd */
            this_i2c->hw_reg_bit->CTRL_STA = 0u;
20001f1c:	687b      	ldr	r3, [r7, #4]
20001f1e:	699b      	ldr	r3, [r3, #24]
20001f20:	f04f 0200 	mov.w	r2, #0
20001f24:	615a      	str	r2, [r3, #20]
            this_i2c->hw_reg->DATA = (uint8_t)this_i2c->target_addr;
20001f26:	687b      	ldr	r3, [r7, #4]
20001f28:	695b      	ldr	r3, [r3, #20]
20001f2a:	687a      	ldr	r2, [r7, #4]
20001f2c:	6852      	ldr	r2, [r2, #4]
20001f2e:	b2d2      	uxtb	r2, r2
20001f30:	721a      	strb	r2, [r3, #8]
            this_i2c->hw_reg_bit->DATA_DIR = this_i2c->dir;
20001f32:	687b      	ldr	r3, [r7, #4]
20001f34:	699b      	ldr	r3, [r3, #24]
20001f36:	687a      	ldr	r2, [r7, #4]
20001f38:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
20001f3a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
            if ( this_i2c->dir == WRITE_DIR )
20001f3e:	687b      	ldr	r3, [r7, #4]
20001f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20001f42:	2b00      	cmp	r3, #0
20001f44:	d104      	bne.n	20001f50 <mss_i2c_isr+0x3c0>
            {
                this_i2c->master_tx_idx = 0u;
20001f46:	687b      	ldr	r3, [r7, #4]
20001f48:	f04f 0200 	mov.w	r2, #0
20001f4c:	629a      	str	r2, [r3, #40]	; 0x28
20001f4e:	e007      	b.n	20001f60 <mss_i2c_isr+0x3d0>
            }
            else if ( this_i2c->dir == READ_DIR)
20001f50:	687b      	ldr	r3, [r7, #4]
20001f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20001f54:	2b01      	cmp	r3, #1
20001f56:	d103      	bne.n	20001f60 <mss_i2c_isr+0x3d0>
            {
                this_i2c->master_rx_idx = 0u;
20001f58:	687b      	ldr	r3, [r7, #4]
20001f5a:	f04f 0200 	mov.w	r2, #0
20001f5e:	639a      	str	r2, [r3, #56]	; 0x38
            /*
             * Clear the pending transaction. This condition will be true if the slave 
             * has acquired the bus to carry out pending master transaction which 
             * it had received during its slave transmission or reception mode. 
             */
            if(this_i2c->is_transaction_pending)
20001f60:	687b      	ldr	r3, [r7, #4]
20001f62:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
20001f66:	2b00      	cmp	r3, #0
20001f68:	d004      	beq.n	20001f74 <mss_i2c_isr+0x3e4>
            {
                this_i2c->is_transaction_pending = 0u;
20001f6a:	687b      	ldr	r3, [r7, #4]
20001f6c:	f04f 0200 	mov.w	r2, #0
20001f70:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

            /*
             * Make sure to update proper transaction after master START
             * or RESTART
             */
            if(this_i2c->transaction != this_i2c->pending_transaction)
20001f74:	687b      	ldr	r3, [r7, #4]
20001f76:	7a1a      	ldrb	r2, [r3, #8]
20001f78:	687b      	ldr	r3, [r7, #4]
20001f7a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
20001f7e:	429a      	cmp	r2, r3
20001f80:	f000 8267 	beq.w	20002452 <mss_i2c_isr+0x8c2>
            {
                this_i2c->transaction = this_i2c->pending_transaction;
20001f84:	687b      	ldr	r3, [r7, #4]
20001f86:	f893 2072 	ldrb.w	r2, [r3, #114]	; 0x72
20001f8a:	687b      	ldr	r3, [r7, #4]
20001f8c:	721a      	strb	r2, [r3, #8]
            }
            break;
20001f8e:	e269      	b.n	20002464 <mss_i2c_isr+0x8d4>
            
        case ST_LOST_ARB:
            /* Set start bit.  Let's keep trying!  Don't give up! */
            this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
20001f90:	687b      	ldr	r3, [r7, #4]
20001f92:	699b      	ldr	r3, [r3, #24]
20001f94:	f04f 0201 	mov.w	r2, #1
20001f98:	615a      	str	r2, [r3, #20]
            break;
20001f9a:	e263      	b.n	20002464 <mss_i2c_isr+0x8d4>
            
        /******************* MASTER TRANSMITTER *************************/
        case ST_SLAW_NACK:
            /* SLA+W has been transmitted; not ACK has been received - let's stop. */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
20001f9c:	687b      	ldr	r3, [r7, #4]
20001f9e:	699b      	ldr	r3, [r3, #24]
20001fa0:	f04f 0201 	mov.w	r2, #1
20001fa4:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
20001fa6:	687b      	ldr	r3, [r7, #4]
20001fa8:	f04f 0202 	mov.w	r2, #2
20001fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            this_i2c->transaction = NO_TRANSACTION;
20001fb0:	687b      	ldr	r3, [r7, #4]
20001fb2:	f04f 0200 	mov.w	r2, #0
20001fb6:	721a      	strb	r2, [r3, #8]
            enable_slave_if_required(this_i2c);
20001fb8:	6878      	ldr	r0, [r7, #4]
20001fba:	f7ff fdd5 	bl	20001b68 <enable_slave_if_required>
            break;
20001fbe:	e251      	b.n	20002464 <mss_i2c_isr+0x8d4>
            
        case ST_SLAW_ACK:
        case ST_TX_DATA_ACK:
            /* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
            if (this_i2c->master_tx_idx < this_i2c->master_tx_size)
20001fc0:	687b      	ldr	r3, [r7, #4]
20001fc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
20001fc4:	687b      	ldr	r3, [r7, #4]
20001fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001fc8:	429a      	cmp	r2, r3
20001fca:	d20d      	bcs.n	20001fe8 <mss_i2c_isr+0x458>
            {    
                this_i2c->hw_reg->DATA = this_i2c->master_tx_buffer[this_i2c->master_tx_idx++];
20001fcc:	687b      	ldr	r3, [r7, #4]
20001fce:	695a      	ldr	r2, [r3, #20]
20001fd0:	687b      	ldr	r3, [r7, #4]
20001fd2:	6a19      	ldr	r1, [r3, #32]
20001fd4:	687b      	ldr	r3, [r7, #4]
20001fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20001fd8:	4419      	add	r1, r3
20001fda:	7809      	ldrb	r1, [r1, #0]
20001fdc:	7211      	strb	r1, [r2, #8]
20001fde:	f103 0201 	add.w	r2, r3, #1
20001fe2:	687b      	ldr	r3, [r7, #4]
20001fe4:	629a      	str	r2, [r3, #40]	; 0x28
                    NVIC_DisableIRQ( this_i2c->irqn );
                    clear_irq = 0u;
                }
                this_i2c->master_status = MSS_I2C_SUCCESS;
            }
            break;
20001fe6:	e23d      	b.n	20002464 <mss_i2c_isr+0x8d4>
            /* data byte has been xmt'd with ACK, time to send stop bit or repeated start. */
            if (this_i2c->master_tx_idx < this_i2c->master_tx_size)
            {    
                this_i2c->hw_reg->DATA = this_i2c->master_tx_buffer[this_i2c->master_tx_idx++];
            }
            else if ( this_i2c->transaction == MASTER_RANDOM_READ_TRANSACTION )
20001fe8:	687b      	ldr	r3, [r7, #4]
20001fea:	7a1b      	ldrb	r3, [r3, #8]
20001fec:	2b03      	cmp	r3, #3
20001fee:	d109      	bne.n	20002004 <mss_i2c_isr+0x474>
            {
                /* We are finished sending the address offset part of a random read transaction.
                 * It is is time to send a restart in order to change direction. */
                 this_i2c->dir = READ_DIR;
20001ff0:	687b      	ldr	r3, [r7, #4]
20001ff2:	f04f 0201 	mov.w	r2, #1
20001ff6:	62da      	str	r2, [r3, #44]	; 0x2c
                 this_i2c->hw_reg_bit->CTRL_STA = 0x01u;
20001ff8:	687b      	ldr	r3, [r7, #4]
20001ffa:	699b      	ldr	r3, [r3, #24]
20001ffc:	f04f 0201 	mov.w	r2, #1
20002000:	615a      	str	r2, [r3, #20]
                    NVIC_DisableIRQ( this_i2c->irqn );
                    clear_irq = 0u;
                }
                this_i2c->master_status = MSS_I2C_SUCCESS;
            }
            break;
20002002:	e22f      	b.n	20002464 <mss_i2c_isr+0x8d4>
            {
                /*
                 * Set the transaction back to NO_TRANSACTION to allow user to do further
                 * transaction
                 */
                this_i2c->transaction = NO_TRANSACTION;
20002004:	687b      	ldr	r3, [r7, #4]
20002006:	f04f 0200 	mov.w	r2, #0
2000200a:	721a      	strb	r2, [r3, #8]
                hold_bus = this_i2c->options & MSS_I2C_HOLD_BUS;
2000200c:	687b      	ldr	r3, [r7, #4]
2000200e:	7c1b      	ldrb	r3, [r3, #16]
20002010:	f003 0301 	and.w	r3, r3, #1
20002014:	737b      	strb	r3, [r7, #13]

                /* Store the information of current I2C bus status in the bus_status*/
                this_i2c->bus_status  = hold_bus;
20002016:	687b      	ldr	r3, [r7, #4]
20002018:	7b7a      	ldrb	r2, [r7, #13]
2000201a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                if ( hold_bus == 0u )
2000201e:	7b7b      	ldrb	r3, [r7, #13]
20002020:	2b00      	cmp	r3, #0
20002022:	d108      	bne.n	20002036 <mss_i2c_isr+0x4a6>
                { 
                    this_i2c->hw_reg_bit->CTRL_STO = 0x01u; /*xmt stop condition */
20002024:	687b      	ldr	r3, [r7, #4]
20002026:	699b      	ldr	r3, [r3, #24]
20002028:	f04f 0201 	mov.w	r2, #1
2000202c:	611a      	str	r2, [r3, #16]
                    enable_slave_if_required(this_i2c);
2000202e:	6878      	ldr	r0, [r7, #4]
20002030:	f7ff fd9a 	bl	20001b68 <enable_slave_if_required>
20002034:	e008      	b.n	20002048 <mss_i2c_isr+0x4b8>
                }
                else
                {
                    NVIC_DisableIRQ( this_i2c->irqn );
20002036:	687b      	ldr	r3, [r7, #4]
20002038:	8a5b      	ldrh	r3, [r3, #18]
2000203a:	b21b      	sxth	r3, r3
2000203c:	4618      	mov	r0, r3
2000203e:	f7ff fb67 	bl	20001710 <NVIC_DisableIRQ>
                    clear_irq = 0u;
20002042:	f04f 0300 	mov.w	r3, #0
20002046:	73bb      	strb	r3, [r7, #14]
                }
                this_i2c->master_status = MSS_I2C_SUCCESS;
20002048:	687b      	ldr	r3, [r7, #4]
2000204a:	f04f 0200 	mov.w	r2, #0
2000204e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            }
            break;
20002052:	e207      	b.n	20002464 <mss_i2c_isr+0x8d4>
            /* data byte SENT, ACK to be received
             * In fact, this means we've received a NACK (This may not be 
             * obvious, but if we've rec'd an ACK then we would be in state 
             * 0x28!) hence, let's send a stop bit
             */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
20002054:	687b      	ldr	r3, [r7, #4]
20002056:	699b      	ldr	r3, [r3, #24]
20002058:	f04f 0201 	mov.w	r2, #1
2000205c:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
2000205e:	687b      	ldr	r3, [r7, #4]
20002060:	f04f 0202 	mov.w	r2, #2
20002064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20002068:	687b      	ldr	r3, [r7, #4]
2000206a:	f04f 0200 	mov.w	r2, #0
2000206e:	721a      	strb	r2, [r3, #8]
            enable_slave_if_required(this_i2c);
20002070:	6878      	ldr	r0, [r7, #4]
20002072:	f7ff fd79 	bl	20001b68 <enable_slave_if_required>

            break;
20002076:	e1f5      	b.n	20002464 <mss_i2c_isr+0x8d4>
      /* STATUS codes 08H, 10H, 38H are all covered in MTX mode */
        case ST_SLAR_ACK: /* SLA+R tx'ed. */
            /* Let's make sure we ACK the first data byte received (set AA bit in CTRL) unless
             * the next byte is the last byte of the read transaction.
             */
            if(this_i2c->master_rx_size > 1u)
20002078:	687b      	ldr	r3, [r7, #4]
2000207a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2000207c:	2b01      	cmp	r3, #1
2000207e:	d905      	bls.n	2000208c <mss_i2c_isr+0x4fc>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
20002080:	687b      	ldr	r3, [r7, #4]
20002082:	699b      	ldr	r3, [r3, #24]
20002084:	f04f 0201 	mov.w	r2, #1
20002088:	609a      	str	r2, [r3, #8]
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
                this_i2c->master_status = MSS_I2C_SUCCESS;
                this_i2c->transaction = NO_TRANSACTION;
            }
            break;
2000208a:	e1eb      	b.n	20002464 <mss_i2c_isr+0x8d4>
             */
            if(this_i2c->master_rx_size > 1u)
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
            }
            else if(1u == this_i2c->master_rx_size)
2000208c:	687b      	ldr	r3, [r7, #4]
2000208e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20002090:	2b01      	cmp	r3, #1
20002092:	d105      	bne.n	200020a0 <mss_i2c_isr+0x510>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
20002094:	687b      	ldr	r3, [r7, #4]
20002096:	699b      	ldr	r3, [r3, #24]
20002098:	f04f 0200 	mov.w	r2, #0
2000209c:	609a      	str	r2, [r3, #8]
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
                this_i2c->master_status = MSS_I2C_SUCCESS;
                this_i2c->transaction = NO_TRANSACTION;
            }
            break;
2000209e:	e1e1      	b.n	20002464 <mss_i2c_isr+0x8d4>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
            }
            else /* this_i2c->master_rx_size == 0u */
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
200020a0:	687b      	ldr	r3, [r7, #4]
200020a2:	699b      	ldr	r3, [r3, #24]
200020a4:	f04f 0201 	mov.w	r2, #1
200020a8:	609a      	str	r2, [r3, #8]
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
200020aa:	687b      	ldr	r3, [r7, #4]
200020ac:	699b      	ldr	r3, [r3, #24]
200020ae:	f04f 0201 	mov.w	r2, #1
200020b2:	611a      	str	r2, [r3, #16]
                this_i2c->master_status = MSS_I2C_SUCCESS;
200020b4:	687b      	ldr	r3, [r7, #4]
200020b6:	f04f 0200 	mov.w	r2, #0
200020ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
                this_i2c->transaction = NO_TRANSACTION;
200020be:	687b      	ldr	r3, [r7, #4]
200020c0:	f04f 0200 	mov.w	r2, #0
200020c4:	721a      	strb	r2, [r3, #8]
            }
            break;
200020c6:	e1cd      	b.n	20002464 <mss_i2c_isr+0x8d4>
            
        case ST_SLAR_NACK: /* SLA+R tx'ed; let's release the bus (send a stop condition) */
            this_i2c->hw_reg_bit->CTRL_STO = 0x01u;
200020c8:	687b      	ldr	r3, [r7, #4]
200020ca:	699b      	ldr	r3, [r3, #24]
200020cc:	f04f 0201 	mov.w	r2, #1
200020d0:	611a      	str	r2, [r3, #16]
            this_i2c->master_status = MSS_I2C_FAILED;
200020d2:	687b      	ldr	r3, [r7, #4]
200020d4:	f04f 0202 	mov.w	r2, #2
200020d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
200020dc:	687b      	ldr	r3, [r7, #4]
200020de:	f04f 0200 	mov.w	r2, #0
200020e2:	721a      	strb	r2, [r3, #8]
            enable_slave_if_required(this_i2c);
200020e4:	6878      	ldr	r0, [r7, #4]
200020e6:	f7ff fd3f 	bl	20001b68 <enable_slave_if_required>
            break;
200020ea:	e1bb      	b.n	20002464 <mss_i2c_isr+0x8d4>
          
        case ST_RX_DATA_ACK: /* Data byte received, ACK returned */
            /* First, get the data */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx++] = this_i2c->hw_reg->DATA;
200020ec:	687b      	ldr	r3, [r7, #4]
200020ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200020f0:	687b      	ldr	r3, [r7, #4]
200020f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200020f4:	441a      	add	r2, r3
200020f6:	6879      	ldr	r1, [r7, #4]
200020f8:	6949      	ldr	r1, [r1, #20]
200020fa:	7a09      	ldrb	r1, [r1, #8]
200020fc:	b2c9      	uxtb	r1, r1
200020fe:	7011      	strb	r1, [r2, #0]
20002100:	f103 0201 	add.w	r2, r3, #1
20002104:	687b      	ldr	r3, [r7, #4]
20002106:	639a      	str	r2, [r3, #56]	; 0x38

            if( this_i2c->master_rx_idx >= (this_i2c->master_rx_size - 1u))
20002108:	687b      	ldr	r3, [r7, #4]
2000210a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
2000210c:	687b      	ldr	r3, [r7, #4]
2000210e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20002110:	f103 33ff 	add.w	r3, r3, #4294967295
20002114:	429a      	cmp	r2, r3
20002116:	f0c0 819e 	bcc.w	20002456 <mss_i2c_isr+0x8c6>
            {
                /* If we're at the second last byte, let's set AA to 0 so
                 * we return a NACK at the last byte. */
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
2000211a:	687b      	ldr	r3, [r7, #4]
2000211c:	699b      	ldr	r3, [r3, #24]
2000211e:	f04f 0200 	mov.w	r2, #0
20002122:	609a      	str	r2, [r3, #8]
            }
            break;
20002124:	e19e      	b.n	20002464 <mss_i2c_isr+0x8d4>
            
        case ST_RX_DATA_NACK: /* Data byte received, NACK returned */
            /* Get the data, then send a stop condition */
            this_i2c->master_rx_buffer[this_i2c->master_rx_idx] = this_i2c->hw_reg->DATA;
20002126:	687b      	ldr	r3, [r7, #4]
20002128:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2000212a:	687b      	ldr	r3, [r7, #4]
2000212c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000212e:	4413      	add	r3, r2
20002130:	687a      	ldr	r2, [r7, #4]
20002132:	6952      	ldr	r2, [r2, #20]
20002134:	7a12      	ldrb	r2, [r2, #8]
20002136:	b2d2      	uxtb	r2, r2
20002138:	701a      	strb	r2, [r3, #0]
          
            hold_bus = this_i2c->options &  MSS_I2C_HOLD_BUS; 
2000213a:	687b      	ldr	r3, [r7, #4]
2000213c:	7c1b      	ldrb	r3, [r3, #16]
2000213e:	f003 0301 	and.w	r3, r3, #1
20002142:	737b      	strb	r3, [r7, #13]

            /* Store the information of current I2C bus status in the bus_status*/
            this_i2c->bus_status  = hold_bus;
20002144:	687b      	ldr	r3, [r7, #4]
20002146:	7b7a      	ldrb	r2, [r7, #13]
20002148:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
            if ( hold_bus == 0u )
2000214c:	7b7b      	ldrb	r3, [r7, #13]
2000214e:	2b00      	cmp	r3, #0
20002150:	d108      	bne.n	20002164 <mss_i2c_isr+0x5d4>
            { 
                this_i2c->hw_reg_bit->CTRL_STO = 0x01u;  /*xmt stop condition */
20002152:	687b      	ldr	r3, [r7, #4]
20002154:	699b      	ldr	r3, [r3, #24]
20002156:	f04f 0201 	mov.w	r2, #1
2000215a:	611a      	str	r2, [r3, #16]

                /* Bus is released, now we can start listening to bus, if it is slave */
                   enable_slave_if_required(this_i2c);
2000215c:	6878      	ldr	r0, [r7, #4]
2000215e:	f7ff fd03 	bl	20001b68 <enable_slave_if_required>
20002162:	e008      	b.n	20002176 <mss_i2c_isr+0x5e6>
            }
            else
            {
                NVIC_DisableIRQ( this_i2c->irqn );
20002164:	687b      	ldr	r3, [r7, #4]
20002166:	8a5b      	ldrh	r3, [r3, #18]
20002168:	b21b      	sxth	r3, r3
2000216a:	4618      	mov	r0, r3
2000216c:	f7ff fad0 	bl	20001710 <NVIC_DisableIRQ>
                clear_irq = 0u;
20002170:	f04f 0300 	mov.w	r3, #0
20002174:	73bb      	strb	r3, [r7, #14]

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20002176:	687b      	ldr	r3, [r7, #4]
20002178:	f04f 0200 	mov.w	r2, #0
2000217c:	721a      	strb	r2, [r3, #8]
            this_i2c->master_status = MSS_I2C_SUCCESS;
2000217e:	687b      	ldr	r3, [r7, #4]
20002180:	f04f 0200 	mov.w	r2, #0
20002184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            break;
20002188:	e16c      	b.n	20002464 <mss_i2c_isr+0x8d4>
        
        /******************** SLAVE RECEIVER **************************/
        case ST_GCA_NACK: /* NACK after, GCA addressing */
        case ST_SLA_NACK: /* Re-enable AA (assert ack) bit for future transmissions */
            this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
2000218a:	687b      	ldr	r3, [r7, #4]
2000218c:	699b      	ldr	r3, [r3, #24]
2000218e:	f04f 0201 	mov.w	r2, #1
20002192:	609a      	str	r2, [r3, #8]
            
            this_i2c->transaction = NO_TRANSACTION;
20002194:	687b      	ldr	r3, [r7, #4]
20002196:	f04f 0200 	mov.w	r2, #0
2000219a:	721a      	strb	r2, [r3, #8]
            this_i2c->slave_status = MSS_I2C_SUCCESS;
2000219c:	687b      	ldr	r3, [r7, #4]
2000219e:	f04f 0200 	mov.w	r2, #0
200021a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
200021a6:	687b      	ldr	r3, [r7, #4]
200021a8:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
200021ac:	2b00      	cmp	r3, #0
200021ae:	f000 8154 	beq.w	2000245a <mss_i2c_isr+0x8ca>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
200021b2:	687b      	ldr	r3, [r7, #4]
200021b4:	699b      	ldr	r3, [r3, #24]
200021b6:	f04f 0201 	mov.w	r2, #1
200021ba:	615a      	str	r2, [r3, #20]
            }
            break;
200021bc:	e152      	b.n	20002464 <mss_i2c_isr+0x8d4>
        case ST_SLV_LA: /* Arbitr. lost (SLA rec'd) */
            /*
             *  We lost arbitration and either the GCE or our address was the
             *  one received so pend the master operation we were starting.
             */
            this_i2c->is_transaction_pending = 1u;
200021be:	687b      	ldr	r3, [r7, #4]
200021c0:	f04f 0201 	mov.w	r2, #1
200021c4:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
            /* Fall through to normal ST processing as we are now in slave mode */

        case ST_GCA: /* General call address received, ACK returned */
        case ST_SLAVE_SLAW: /* SLA+W received, ACK returned */

            this_i2c->transaction = WRITE_SLAVE_TRANSACTION;
200021c8:	687b      	ldr	r3, [r7, #4]
200021ca:	f04f 0204 	mov.w	r2, #4
200021ce:	721a      	strb	r2, [r3, #8]
            this_i2c->slave_rx_idx = 0u;
200021d0:	687b      	ldr	r3, [r7, #4]
200021d2:	f04f 0200 	mov.w	r2, #0
200021d6:	659a      	str	r2, [r3, #88]	; 0x58
            this_i2c->random_read_addr = 0u;
200021d8:	687b      	ldr	r3, [r7, #4]
200021da:	f04f 0200 	mov.w	r2, #0
200021de:	60da      	str	r2, [r3, #12]

             /* If Start Bit is set, clear it, but store that information since it is because of
              * pending transaction
              */
            if(this_i2c->hw_reg_bit->CTRL_STA)
200021e0:	687b      	ldr	r3, [r7, #4]
200021e2:	699b      	ldr	r3, [r3, #24]
200021e4:	695b      	ldr	r3, [r3, #20]
200021e6:	2b00      	cmp	r3, #0
200021e8:	d009      	beq.n	200021fe <mss_i2c_isr+0x66e>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 0u ;
200021ea:	687b      	ldr	r3, [r7, #4]
200021ec:	699b      	ldr	r3, [r3, #24]
200021ee:	f04f 0200 	mov.w	r2, #0
200021f2:	615a      	str	r2, [r3, #20]
                this_i2c->is_transaction_pending = 1u;
200021f4:	687b      	ldr	r3, [r7, #4]
200021f6:	f04f 0201 	mov.w	r2, #1
200021fa:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
            }
            this_i2c->slave_status = MSS_I2C_IN_PROGRESS;
200021fe:	687b      	ldr	r3, [r7, #4]
20002200:	f04f 0201 	mov.w	r2, #1
20002204:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
#ifdef MSS_I2C_INCLUDE_SLA_IN_RX_PAYLOAD
            /* Fall through to put address as first byte in payload buffer */
#else
            /* Only break from this case if the slave address must NOT be included at the
             * beginning of the received write data. */
            break;
20002208:	e12c      	b.n	20002464 <mss_i2c_isr+0x8d4>
#endif            
        case ST_GCA_ACK: /* DATA received; ACK sent after GCA */
        case ST_RDATA: /* DATA received; must clear DATA register */
            if((this_i2c->slave_rx_buffer != (uint8_t *)0)
2000220a:	687b      	ldr	r3, [r7, #4]
2000220c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2000220e:	2b00      	cmp	r3, #0
20002210:	d01c      	beq.n	2000224c <mss_i2c_isr+0x6bc>
               && (this_i2c->slave_rx_idx < this_i2c->slave_rx_size))
20002212:	687b      	ldr	r3, [r7, #4]
20002214:	6d9a      	ldr	r2, [r3, #88]	; 0x58
20002216:	687b      	ldr	r3, [r7, #4]
20002218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
             * beginning of the received write data. */
            break;
#endif            
        case ST_GCA_ACK: /* DATA received; ACK sent after GCA */
        case ST_RDATA: /* DATA received; must clear DATA register */
            if((this_i2c->slave_rx_buffer != (uint8_t *)0)
2000221a:	429a      	cmp	r2, r3
2000221c:	d216      	bcs.n	2000224c <mss_i2c_isr+0x6bc>
               && (this_i2c->slave_rx_idx < this_i2c->slave_rx_size))
            {
                data = this_i2c->hw_reg->DATA;
2000221e:	687b      	ldr	r3, [r7, #4]
20002220:	695b      	ldr	r3, [r3, #20]
20002222:	7a1b      	ldrb	r3, [r3, #8]
20002224:	733b      	strb	r3, [r7, #12]
                this_i2c->slave_rx_buffer[this_i2c->slave_rx_idx++] = data;
20002226:	687b      	ldr	r3, [r7, #4]
20002228:	6d1a      	ldr	r2, [r3, #80]	; 0x50
2000222a:	687b      	ldr	r3, [r7, #4]
2000222c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2000222e:	441a      	add	r2, r3
20002230:	7b39      	ldrb	r1, [r7, #12]
20002232:	7011      	strb	r1, [r2, #0]
20002234:	f103 0201 	add.w	r2, r3, #1
20002238:	687b      	ldr	r3, [r7, #4]
2000223a:	659a      	str	r2, [r3, #88]	; 0x58
                {
                    /* Ignore the slave address byte in the random read address
                       computation in the case where INCLUDE_SLA_IN_RX_PAYLOAD
                       is defined. */
#endif
                    this_i2c->random_read_addr = (this_i2c->random_read_addr << 8) + data;
2000223c:	687b      	ldr	r3, [r7, #4]
2000223e:	68db      	ldr	r3, [r3, #12]
20002240:	ea4f 2203 	mov.w	r2, r3, lsl #8
20002244:	7b3b      	ldrb	r3, [r7, #12]
20002246:	441a      	add	r2, r3
20002248:	687b      	ldr	r3, [r7, #4]
2000224a:	60da      	str	r2, [r3, #12]
#ifdef MSS_I2C_INCLUDE_SLA_IN_RX_PAYLOAD
                }
#endif
            }
            
            if (this_i2c->slave_rx_idx >= this_i2c->slave_rx_size)
2000224c:	687b      	ldr	r3, [r7, #4]
2000224e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
20002250:	687b      	ldr	r3, [r7, #4]
20002252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20002254:	429a      	cmp	r2, r3
20002256:	f0c0 8102 	bcc.w	2000245e <mss_i2c_isr+0x8ce>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;   /* send a NACK when done (next reception) */
2000225a:	687b      	ldr	r3, [r7, #4]
2000225c:	699b      	ldr	r3, [r3, #24]
2000225e:	f04f 0200 	mov.w	r2, #0
20002262:	609a      	str	r2, [r3, #8]
            }
            break;
20002264:	e0fe      	b.n	20002464 <mss_i2c_isr+0x8d4>
            /* STOP or repeated START occurred. */
            /* We cannot be sure if the transaction has actually completed as
             * this hardware state reports that either a STOP or repeated START
             * condition has occurred. We assume that this is a repeated START
             * if the transaction was a write from the master to this point.*/
            if ( this_i2c->transaction == WRITE_SLAVE_TRANSACTION )
20002266:	687b      	ldr	r3, [r7, #4]
20002268:	7a1b      	ldrb	r3, [r3, #8]
2000226a:	2b04      	cmp	r3, #4
2000226c:	d135      	bne.n	200022da <mss_i2c_isr+0x74a>
            {
                if ( this_i2c->slave_rx_idx == this_i2c->slave_mem_offset_length )
2000226e:	687b      	ldr	r3, [r7, #4]
20002270:	6d9a      	ldr	r2, [r3, #88]	; 0x58
20002272:	687b      	ldr	r3, [r7, #4]
20002274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
20002276:	429a      	cmp	r2, r3
20002278:	d103      	bne.n	20002282 <mss_i2c_isr+0x6f2>
                {
                    this_i2c->slave_tx_idx = this_i2c->random_read_addr;
2000227a:	687b      	ldr	r3, [r7, #4]
2000227c:	68da      	ldr	r2, [r3, #12]
2000227e:	687b      	ldr	r3, [r7, #4]
20002280:	64da      	str	r2, [r3, #76]	; 0x4c
                }
                {
                    /* Call the slave's write transaction handler if it exists. */
                    if ( this_i2c->slave_write_handler != 0u )
20002282:	687b      	ldr	r3, [r7, #4]
20002284:	6e5b      	ldr	r3, [r3, #100]	; 0x64
20002286:	2b00      	cmp	r3, #0
20002288:	d021      	beq.n	200022ce <mss_i2c_isr+0x73e>
                    {
                        mss_i2c_slave_handler_ret_t h_ret;
                        h_ret = this_i2c->slave_write_handler( this_i2c, this_i2c->slave_rx_buffer, (uint16_t)this_i2c->slave_rx_idx );
2000228a:	687b      	ldr	r3, [r7, #4]
2000228c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2000228e:	687a      	ldr	r2, [r7, #4]
20002290:	6d11      	ldr	r1, [r2, #80]	; 0x50
20002292:	687a      	ldr	r2, [r7, #4]
20002294:	6d92      	ldr	r2, [r2, #88]	; 0x58
20002296:	b292      	uxth	r2, r2
20002298:	6878      	ldr	r0, [r7, #4]
2000229a:	4798      	blx	r3
2000229c:	4603      	mov	r3, r0
2000229e:	73fb      	strb	r3, [r7, #15]
                        if ( MSS_I2C_REENABLE_SLAVE_RX == h_ret )
200022a0:	7bfb      	ldrb	r3, [r7, #15]
200022a2:	2b00      	cmp	r3, #0
200022a4:	d108      	bne.n	200022b8 <mss_i2c_isr+0x728>
                        {
                            /* There is a small risk that the write handler could
                             * call MSS_I2C_disable_slave() but return
                             * MSS_I2C_REENABLE_SLAVE_RX in error so we only
                             * enable ACKs if still in slave mode. */
                             enable_slave_if_required(this_i2c);
200022a6:	6878      	ldr	r0, [r7, #4]
200022a8:	f7ff fc5e 	bl	20001b68 <enable_slave_if_required>
                             this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
200022ac:	687b      	ldr	r3, [r7, #4]
200022ae:	699b      	ldr	r3, [r3, #24]
200022b0:	f04f 0201 	mov.w	r2, #1
200022b4:	609a      	str	r2, [r3, #8]
                        }
                    }
                    else
                    {
                        /* Re-enable address acknowledge in case we were ready to nack the next received byte. */
                        this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
200022b6:	e017      	b.n	200022e8 <mss_i2c_isr+0x758>
                             enable_slave_if_required(this_i2c);
                             this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
                        }
                        else
                        {
                            this_i2c->hw_reg_bit->CTRL_AA = 0u;
200022b8:	687b      	ldr	r3, [r7, #4]
200022ba:	699b      	ldr	r3, [r3, #24]
200022bc:	f04f 0200 	mov.w	r2, #0
200022c0:	609a      	str	r2, [r3, #8]
                            /* Clear slave mode flag as well otherwise in mixed
                             * master/slave applications, the AA bit will get set by
                             * subsequent master operations. */
                            this_i2c->is_slave_enabled = 0u;
200022c2:	687b      	ldr	r3, [r7, #4]
200022c4:	f04f 0200 	mov.w	r2, #0
200022c8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                        }
                    }
                    else
                    {
                        /* Re-enable address acknowledge in case we were ready to nack the next received byte. */
                        this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
200022cc:	e00c      	b.n	200022e8 <mss_i2c_isr+0x758>
200022ce:	687b      	ldr	r3, [r7, #4]
200022d0:	699b      	ldr	r3, [r3, #24]
200022d2:	f04f 0201 	mov.w	r2, #1
200022d6:	609a      	str	r2, [r3, #8]
200022d8:	e006      	b.n	200022e8 <mss_i2c_isr+0x758>
            {
                /*
                 * Reset slave_tx_idx so that a subsequent read will result in the slave's
                 * transmit buffer being sent from the first byte.
                 */
                this_i2c->slave_tx_idx = 0u;
200022da:	687b      	ldr	r3, [r7, #4]
200022dc:	f04f 0200 	mov.w	r2, #0
200022e0:	64da      	str	r2, [r3, #76]	; 0x4c
                /*
                 * See if we need to re-enable acknowledgement as some error conditions, such
                 * as a master prematurely ending a transfer, can see us get here with AA set
                 * to 0 which will disable slave operation if we are not careful.
                 */
                enable_slave_if_required(this_i2c);
200022e2:	6878      	ldr	r0, [r7, #4]
200022e4:	f7ff fc40 	bl	20001b68 <enable_slave_if_required>
            }

            /* Mark any previous master write transaction as complete. */
            this_i2c->slave_status = MSS_I2C_SUCCESS;
200022e8:	687b      	ldr	r3, [r7, #4]
200022ea:	f04f 0200 	mov.w	r2, #0
200022ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
200022f2:	687b      	ldr	r3, [r7, #4]
200022f4:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
200022f8:	2b00      	cmp	r3, #0
200022fa:	d004      	beq.n	20002306 <mss_i2c_isr+0x776>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
200022fc:	687b      	ldr	r3, [r7, #4]
200022fe:	699b      	ldr	r3, [r3, #24]
20002300:	f04f 0201 	mov.w	r2, #1
20002304:	615a      	str	r2, [r3, #20]

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20002306:	687b      	ldr	r3, [r7, #4]
20002308:	f04f 0200 	mov.w	r2, #0
2000230c:	721a      	strb	r2, [r3, #8]
            break;
2000230e:	e0a9      	b.n	20002464 <mss_i2c_isr+0x8d4>
        case ST_SLV_RST: /* SMBUS ONLY: timeout state. must clear interrupt */
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction.
             */
            this_i2c->transaction = NO_TRANSACTION;
20002310:	687b      	ldr	r3, [r7, #4]
20002312:	f04f 0200 	mov.w	r2, #0
20002316:	721a      	strb	r2, [r3, #8]
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
20002318:	687b      	ldr	r3, [r7, #4]
2000231a:	f04f 0200 	mov.w	r2, #0
2000231e:	64da      	str	r2, [r3, #76]	; 0x4c
            /*
             * Clear status to I2C_FAILED only if there was an operation in progress.
             */
            if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
20002320:	687b      	ldr	r3, [r7, #4]
20002322:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
20002326:	b2db      	uxtb	r3, r3
20002328:	2b01      	cmp	r3, #1
2000232a:	d104      	bne.n	20002336 <mss_i2c_isr+0x7a6>
            {
                this_i2c->slave_status = MSS_I2C_FAILED;
2000232c:	687b      	ldr	r3, [r7, #4]
2000232e:	f04f 0202 	mov.w	r2, #2
20002332:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
            }

            enable_slave_if_required(this_i2c); /* Make sure AA is set correctly */
20002336:	6878      	ldr	r0, [r7, #4]
20002338:	f7ff fc16 	bl	20001b68 <enable_slave_if_required>

            break;
2000233c:	e092      	b.n	20002464 <mss_i2c_isr+0x8d4>
            
        /****************** SLAVE TRANSMITTER **************************/
        case ST_SLAVE_SLAR_ACK: /* SLA+R received, ACK returned */
        case ST_SLARW_LA:   /* Arbitration lost, SLA+R received, ACK returned */
        case ST_RACK: /* Data tx'ed, ACK received */
            if ( status == ST_SLAVE_SLAR_ACK )
2000233e:	7afb      	ldrb	r3, [r7, #11]
20002340:	b2db      	uxtb	r3, r3
20002342:	2ba8      	cmp	r3, #168	; 0xa8
20002344:	d11b      	bne.n	2000237e <mss_i2c_isr+0x7ee>
            {
                this_i2c->transaction = READ_SLAVE_TRANSACTION;
20002346:	687b      	ldr	r3, [r7, #4]
20002348:	f04f 0205 	mov.w	r2, #5
2000234c:	721a      	strb	r2, [r3, #8]
                this_i2c->random_read_addr = 0u;
2000234e:	687b      	ldr	r3, [r7, #4]
20002350:	f04f 0200 	mov.w	r2, #0
20002354:	60da      	str	r2, [r3, #12]

                this_i2c->slave_status = MSS_I2C_IN_PROGRESS;
20002356:	687b      	ldr	r3, [r7, #4]
20002358:	f04f 0201 	mov.w	r2, #1
2000235c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

                /* If Start Bit is set, clear it, but store that information since it is because of
                 * pending transaction
                 */
                if(this_i2c->hw_reg_bit->CTRL_STA)
20002360:	687b      	ldr	r3, [r7, #4]
20002362:	699b      	ldr	r3, [r3, #24]
20002364:	695b      	ldr	r3, [r3, #20]
20002366:	2b00      	cmp	r3, #0
20002368:	d009      	beq.n	2000237e <mss_i2c_isr+0x7ee>
                {
                    this_i2c->hw_reg_bit->CTRL_STA = 0u ;
2000236a:	687b      	ldr	r3, [r7, #4]
2000236c:	699b      	ldr	r3, [r3, #24]
2000236e:	f04f 0200 	mov.w	r2, #0
20002372:	615a      	str	r2, [r3, #20]
                    this_i2c->is_transaction_pending = 1u;
20002374:	687b      	ldr	r3, [r7, #4]
20002376:	f04f 0201 	mov.w	r2, #1
2000237a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                }
            }
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size)
2000237e:	687b      	ldr	r3, [r7, #4]
20002380:	6cda      	ldr	r2, [r3, #76]	; 0x4c
20002382:	687b      	ldr	r3, [r7, #4]
20002384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20002386:	429a      	cmp	r2, r3
20002388:	d305      	bcc.n	20002396 <mss_i2c_isr+0x806>
            {
                /* Ensure 0xFF is returned to the master when the slave specifies
                 * an empty transmit buffer. */
                this_i2c->hw_reg->DATA = 0xFFu;
2000238a:	687b      	ldr	r3, [r7, #4]
2000238c:	695b      	ldr	r3, [r3, #20]
2000238e:	f04f 32ff 	mov.w	r2, #4294967295
20002392:	721a      	strb	r2, [r3, #8]
20002394:	e00c      	b.n	200023b0 <mss_i2c_isr+0x820>
            }
            else
            {
                /* Load the data the data byte to be sent to the master. */
                this_i2c->hw_reg->DATA = this_i2c->slave_tx_buffer[this_i2c->slave_tx_idx++];
20002396:	687b      	ldr	r3, [r7, #4]
20002398:	695a      	ldr	r2, [r3, #20]
2000239a:	687b      	ldr	r3, [r7, #4]
2000239c:	6c59      	ldr	r1, [r3, #68]	; 0x44
2000239e:	687b      	ldr	r3, [r7, #4]
200023a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
200023a2:	4419      	add	r1, r3
200023a4:	7809      	ldrb	r1, [r1, #0]
200023a6:	7211      	strb	r1, [r2, #8]
200023a8:	f103 0201 	add.w	r2, r3, #1
200023ac:	687b      	ldr	r3, [r7, #4]
200023ae:	64da      	str	r2, [r3, #76]	; 0x4c
            }
            /* Determine if this is the last data byte to send to the master. */
            if (this_i2c->slave_tx_idx >= this_i2c->slave_tx_size) /* last byte? */
200023b0:	687b      	ldr	r3, [r7, #4]
200023b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
200023b4:	687b      	ldr	r3, [r7, #4]
200023b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
200023b8:	429a      	cmp	r2, r3
200023ba:	d352      	bcc.n	20002462 <mss_i2c_isr+0x8d2>
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
200023bc:	687b      	ldr	r3, [r7, #4]
200023be:	699b      	ldr	r3, [r3, #24]
200023c0:	f04f 0200 	mov.w	r2, #0
200023c4:	609a      	str	r2, [r3, #8]
                /* Next read transaction will result in slave's transmit buffer
                 * being sent from the first byte. */
                this_i2c->slave_tx_idx = 0u;
200023c6:	687b      	ldr	r3, [r7, #4]
200023c8:	f04f 0200 	mov.w	r2, #0
200023cc:	64da      	str	r2, [r3, #76]	; 0x4c
            }
            break;
200023ce:	e049      	b.n	20002464 <mss_i2c_isr+0x8d4>
        case ST_SLAVE_RNACK:    /* Data byte has been transmitted; not-ACK has been received. */
        case ST_FINAL: /* Last Data byte tx'ed, ACK received */
            /* We assume that the transaction will be stopped by the master.
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte. */
            this_i2c->slave_tx_idx = 0u;
200023d0:	687b      	ldr	r3, [r7, #4]
200023d2:	f04f 0200 	mov.w	r2, #0
200023d6:	64da      	str	r2, [r3, #76]	; 0x4c
            this_i2c->hw_reg_bit->CTRL_AA = 0x01u;
200023d8:	687b      	ldr	r3, [r7, #4]
200023da:	699b      	ldr	r3, [r3, #24]
200023dc:	f04f 0201 	mov.w	r2, #1
200023e0:	609a      	str	r2, [r3, #8]

            /*  Mark previous state as complete */
            this_i2c->slave_status = MSS_I2C_SUCCESS;
200023e2:	687b      	ldr	r3, [r7, #4]
200023e4:	f04f 0200 	mov.w	r2, #0
200023e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
200023ec:	687b      	ldr	r3, [r7, #4]
200023ee:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
200023f2:	2b00      	cmp	r3, #0
200023f4:	d004      	beq.n	20002400 <mss_i2c_isr+0x870>
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
200023f6:	687b      	ldr	r3, [r7, #4]
200023f8:	699b      	ldr	r3, [r3, #24]
200023fa:	f04f 0201 	mov.w	r2, #1
200023fe:	615a      	str	r2, [r3, #20]

            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20002400:	687b      	ldr	r3, [r7, #4]
20002402:	f04f 0200 	mov.w	r2, #0
20002406:	721a      	strb	r2, [r3, #8]
            break;
20002408:	e02c      	b.n	20002464 <mss_i2c_isr+0x8d4>
        case ST_RESET_ACTIVATED:
        case ST_BUS_ERROR: /* Bus error during MST or selected slave modes */
        default:
            /* Some undefined state has encountered. Clear Start bit to make
             * sure, next good transaction happen */
            this_i2c->hw_reg_bit->CTRL_STA = 0x00u;
2000240a:	687b      	ldr	r3, [r7, #4]
2000240c:	699b      	ldr	r3, [r3, #24]
2000240e:	f04f 0200 	mov.w	r2, #0
20002412:	615a      	str	r2, [r3, #20]
            /*
             * Set the transaction back to NO_TRANSACTION to allow user to do further
             * transaction
             */
            this_i2c->transaction = NO_TRANSACTION;
20002414:	687b      	ldr	r3, [r7, #4]
20002416:	f04f 0200 	mov.w	r2, #0
2000241a:	721a      	strb	r2, [r3, #8]
            /*
             * Reset slave_tx_idx so that a subsequent read will result in the slave's
             * transmit buffer being sent from the first byte.
             */
            this_i2c->slave_tx_idx = 0u;
2000241c:	687b      	ldr	r3, [r7, #4]
2000241e:	f04f 0200 	mov.w	r2, #0
20002422:	64da      	str	r2, [r3, #76]	; 0x4c
            /*
             * Clear statuses to I2C_FAILED only if there was an operation in progress.
             */
            if(MSS_I2C_IN_PROGRESS == this_i2c->master_status)
20002424:	687b      	ldr	r3, [r7, #4]
20002426:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
2000242a:	b2db      	uxtb	r3, r3
2000242c:	2b01      	cmp	r3, #1
2000242e:	d104      	bne.n	2000243a <mss_i2c_isr+0x8aa>
            {
                this_i2c->master_status = MSS_I2C_FAILED;
20002430:	687b      	ldr	r3, [r7, #4]
20002432:	f04f 0202 	mov.w	r2, #2
20002436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
            }

            if(MSS_I2C_IN_PROGRESS == this_i2c->slave_status)
2000243a:	687b      	ldr	r3, [r7, #4]
2000243c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
20002440:	b2db      	uxtb	r3, r3
20002442:	2b01      	cmp	r3, #1
20002444:	d10e      	bne.n	20002464 <mss_i2c_isr+0x8d4>
            {
                this_i2c->slave_status = MSS_I2C_FAILED;
20002446:	687b      	ldr	r3, [r7, #4]
20002448:	f04f 0202 	mov.w	r2, #2
2000244c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
20002450:	e008      	b.n	20002464 <mss_i2c_isr+0x8d4>
             */
            if(this_i2c->transaction != this_i2c->pending_transaction)
            {
                this_i2c->transaction = this_i2c->pending_transaction;
            }
            break;
20002452:	bf00      	nop
20002454:	e006      	b.n	20002464 <mss_i2c_isr+0x8d4>
            {
                /* If we're at the second last byte, let's set AA to 0 so
                 * we return a NACK at the last byte. */
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
            }
            break;
20002456:	bf00      	nop
20002458:	e004      	b.n	20002464 <mss_i2c_isr+0x8d4>
            /* Check if transaction was pending. If yes, set the START bit */
            if(this_i2c->is_transaction_pending)
            {
                this_i2c->hw_reg_bit->CTRL_STA = 1u ;
            }
            break;
2000245a:	bf00      	nop
2000245c:	e002      	b.n	20002464 <mss_i2c_isr+0x8d4>
            
            if (this_i2c->slave_rx_idx >= this_i2c->slave_rx_size)
            {
                this_i2c->hw_reg_bit->CTRL_AA = 0u;   /* send a NACK when done (next reception) */
            }
            break;
2000245e:	bf00      	nop
20002460:	e000      	b.n	20002464 <mss_i2c_isr+0x8d4>
                this_i2c->hw_reg_bit->CTRL_AA = 0u;
                /* Next read transaction will result in slave's transmit buffer
                 * being sent from the first byte. */
                this_i2c->slave_tx_idx = 0u;
            }
            break;
20002462:	bf00      	nop


            break;
    }
    
    if ( clear_irq )
20002464:	7bbb      	ldrb	r3, [r7, #14]
20002466:	2b00      	cmp	r3, #0
20002468:	d004      	beq.n	20002474 <mss_i2c_isr+0x8e4>
    {
        /* clear interrupt. */
        this_i2c->hw_reg_bit->CTRL_SI = 0u;
2000246a:	687b      	ldr	r3, [r7, #4]
2000246c:	699b      	ldr	r3, [r3, #24]
2000246e:	f04f 0200 	mov.w	r2, #0
20002472:	60da      	str	r2, [r3, #12]
    }
    
    /* Read the status register to ensure the last I2C registers write took place
     * in a system built around a bus making use of posted writes. */
    status = this_i2c->hw_reg->STATUS;
20002474:	687b      	ldr	r3, [r7, #4]
20002476:	695b      	ldr	r3, [r3, #20]
20002478:	791b      	ldrb	r3, [r3, #4]
2000247a:	72fb      	strb	r3, [r7, #11]
}
2000247c:	f107 0710 	add.w	r7, r7, #16
20002480:	46bd      	mov	sp, r7
20002482:	bd80      	pop	{r7, pc}

20002484 <disable_interrupts>:
}
/*------------------------------------------------------------------------------
 *
 */
static uint32_t disable_interrupts( void )
{
20002484:	b580      	push	{r7, lr}
20002486:	b082      	sub	sp, #8
20002488:	af00      	add	r7, sp, #0
    uint32_t primask;
    primask = __get_PRIMASK();
2000248a:	f000 f92d 	bl	200026e8 <__get_PRIMASK>
2000248e:	4603      	mov	r3, r0
20002490:	607b      	str	r3, [r7, #4]
    __set_PRIMASK(1u);
20002492:	f04f 0001 	mov.w	r0, #1
20002496:	f000 f937 	bl	20002708 <__set_PRIMASK>
    return primask;
2000249a:	687b      	ldr	r3, [r7, #4]
}
2000249c:	4618      	mov	r0, r3
2000249e:	f107 0708 	add.w	r7, r7, #8
200024a2:	46bd      	mov	sp, r7
200024a4:	bd80      	pop	{r7, pc}
200024a6:	bf00      	nop

200024a8 <restore_interrupts>:

/*------------------------------------------------------------------------------
 *
 */
static void restore_interrupts( uint32_t primask )
{
200024a8:	b580      	push	{r7, lr}
200024aa:	b082      	sub	sp, #8
200024ac:	af00      	add	r7, sp, #0
200024ae:	6078      	str	r0, [r7, #4]
    __set_PRIMASK( primask );
200024b0:	6878      	ldr	r0, [r7, #4]
200024b2:	f000 f929 	bl	20002708 <__set_PRIMASK>
}
200024b6:	f107 0708 	add.w	r7, r7, #8
200024ba:	46bd      	mov	sp, r7
200024bc:	bd80      	pop	{r7, pc}
200024be:	bf00      	nop

200024c0 <I2C0_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void I2C0_IRQHandler( void )
#else
void I2C0_IRQHandler( void )
#endif
{
200024c0:	4668      	mov	r0, sp
200024c2:	f020 0107 	bic.w	r1, r0, #7
200024c6:	468d      	mov	sp, r1
200024c8:	b589      	push	{r0, r3, r7, lr}
200024ca:	af00      	add	r7, sp, #0
    mss_i2c_isr( &g_mss_i2c0 );
200024cc:	f244 40e0 	movw	r0, #17632	; 0x44e0
200024d0:	f2c2 0000 	movt	r0, #8192	; 0x2000
200024d4:	f7ff fb5c 	bl	20001b90 <mss_i2c_isr>
    NVIC_ClearPendingIRQ( I2C0_IRQn );
200024d8:	f04f 000e 	mov.w	r0, #14
200024dc:	f7ff f936 	bl	2000174c <NVIC_ClearPendingIRQ>
}
200024e0:	46bd      	mov	sp, r7
200024e2:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
200024e6:	4685      	mov	sp, r0
200024e8:	4770      	bx	lr
200024ea:	bf00      	nop

200024ec <I2C1_IRQHandler>:
#if defined(__GNUC__)
__attribute__((__interrupt__)) void I2C1_IRQHandler( void )
#else
void I2C1_IRQHandler( void )
#endif
{
200024ec:	4668      	mov	r0, sp
200024ee:	f020 0107 	bic.w	r1, r0, #7
200024f2:	468d      	mov	sp, r1
200024f4:	b589      	push	{r0, r3, r7, lr}
200024f6:	af00      	add	r7, sp, #0
    mss_i2c_isr( &g_mss_i2c1 );
200024f8:	f244 5054 	movw	r0, #17748	; 0x4554
200024fc:	f2c2 0000 	movt	r0, #8192	; 0x2000
20002500:	f7ff fb46 	bl	20001b90 <mss_i2c_isr>
    NVIC_ClearPendingIRQ( I2C1_IRQn );
20002504:	f04f 0011 	mov.w	r0, #17
20002508:	f7ff f920 	bl	2000174c <NVIC_ClearPendingIRQ>
}
2000250c:	46bd      	mov	sp, r7
2000250e:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
20002512:	4685      	mov	sp, r0
20002514:	4770      	bx	lr
20002516:	bf00      	nop

20002518 <NVIC_EnableIRQ>:
 *
 * Enable a device specific interupt in the NVIC interrupt controller.
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
20002518:	b480      	push	{r7}
2000251a:	b083      	sub	sp, #12
2000251c:	af00      	add	r7, sp, #0
2000251e:	4603      	mov	r3, r0
20002520:	80fb      	strh	r3, [r7, #6]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
20002522:	f24e 1300 	movw	r3, #57600	; 0xe100
20002526:	f2ce 0300 	movt	r3, #57344	; 0xe000
2000252a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
2000252e:	ea4f 1252 	mov.w	r2, r2, lsr #5
20002532:	88f9      	ldrh	r1, [r7, #6]
20002534:	f001 011f 	and.w	r1, r1, #31
20002538:	f04f 0001 	mov.w	r0, #1
2000253c:	fa00 f101 	lsl.w	r1, r0, r1
20002540:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20002544:	f107 070c 	add.w	r7, r7, #12
20002548:	46bd      	mov	sp, r7
2000254a:	bc80      	pop	{r7}
2000254c:	4770      	bx	lr
2000254e:	bf00      	nop

20002550 <NVIC_ClearPendingIRQ>:
 *
 * Clear the pending bit for the specified interrupt. 
 * The interrupt number cannot be a negative value.
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20002550:	b480      	push	{r7}
20002552:	b083      	sub	sp, #12
20002554:	af00      	add	r7, sp, #0
20002556:	4603      	mov	r3, r0
20002558:	80fb      	strh	r3, [r7, #6]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
2000255a:	f24e 1300 	movw	r3, #57600	; 0xe100
2000255e:	f2ce 0300 	movt	r3, #57344	; 0xe000
20002562:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
20002566:	ea4f 1252 	mov.w	r2, r2, lsr #5
2000256a:	88f9      	ldrh	r1, [r7, #6]
2000256c:	f001 011f 	and.w	r1, r1, #31
20002570:	f04f 0001 	mov.w	r0, #1
20002574:	fa00 f101 	lsl.w	r1, r0, r1
20002578:	f102 0260 	add.w	r2, r2, #96	; 0x60
2000257c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
20002580:	f107 070c 	add.w	r7, r7, #12
20002584:	46bd      	mov	sp, r7
20002586:	bc80      	pop	{r7}
20002588:	4770      	bx	lr
2000258a:	bf00      	nop

2000258c <MSS_GPIO_init>:
/*-------------------------------------------------------------------------*//**
 * MSS_GPIO_init
 * See "mss_gpio.h" for details of how to use this function.
 */
void MSS_GPIO_init( void )
{
2000258c:	b580      	push	{r7, lr}
2000258e:	b082      	sub	sp, #8
20002590:	af00      	add	r7, sp, #0
    uint32_t i;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
20002592:	f242 0300 	movw	r3, #8192	; 0x2000
20002596:	f2ce 0304 	movt	r3, #57348	; 0xe004
2000259a:	f242 0200 	movw	r2, #8192	; 0x2000
2000259e:	f2ce 0204 	movt	r2, #57348	; 0xe004
200025a2:	6b12      	ldr	r2, [r2, #48]	; 0x30
200025a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
200025a8:	631a      	str	r2, [r3, #48]	; 0x30
    /* Clear any previously pended MSS GPIO interrupt */
    for ( i = 0U; i < NB_OF_GPIO; ++i )
200025aa:	f04f 0300 	mov.w	r3, #0
200025ae:	607b      	str	r3, [r7, #4]
200025b0:	e00e      	b.n	200025d0 <MSS_GPIO_init+0x44>
    {
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[i] );
200025b2:	687a      	ldr	r2, [r7, #4]
200025b4:	f244 133c 	movw	r3, #16700	; 0x413c
200025b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
200025bc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
200025c0:	b21b      	sxth	r3, r3
200025c2:	4618      	mov	r0, r3
200025c4:	f7ff ffc4 	bl	20002550 <NVIC_ClearPendingIRQ>
    uint32_t i;
    
    /* reset MSS GPIO hardware */
    SYSREG->SOFT_RST_CR |= SYSREG_GPIO_SOFTRESET_MASK;
    /* Clear any previously pended MSS GPIO interrupt */
    for ( i = 0U; i < NB_OF_GPIO; ++i )
200025c8:	687b      	ldr	r3, [r7, #4]
200025ca:	f103 0301 	add.w	r3, r3, #1
200025ce:	607b      	str	r3, [r7, #4]
200025d0:	687b      	ldr	r3, [r7, #4]
200025d2:	2b1f      	cmp	r3, #31
200025d4:	d9ed      	bls.n	200025b2 <MSS_GPIO_init+0x26>
    {
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[i] );
    }
    /* Take MSS GPIO hardware out of reset. */
    SYSREG->SOFT_RST_CR &= ~SYSREG_GPIO_SOFTRESET_MASK;
200025d6:	f242 0300 	movw	r3, #8192	; 0x2000
200025da:	f2ce 0304 	movt	r3, #57348	; 0xe004
200025de:	f242 0200 	movw	r2, #8192	; 0x2000
200025e2:	f2ce 0204 	movt	r2, #57348	; 0xe004
200025e6:	6b12      	ldr	r2, [r2, #48]	; 0x30
200025e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
200025ec:	631a      	str	r2, [r3, #48]	; 0x30
}
200025ee:	f107 0708 	add.w	r7, r7, #8
200025f2:	46bd      	mov	sp, r7
200025f4:	bd80      	pop	{r7, pc}
200025f6:	bf00      	nop

200025f8 <MSS_GPIO_config>:
void MSS_GPIO_config
(
    mss_gpio_id_t port_id,
    uint32_t config
)
{
200025f8:	b480      	push	{r7}
200025fa:	b085      	sub	sp, #20
200025fc:	af00      	add	r7, sp, #0
200025fe:	4603      	mov	r3, r0
20002600:	6039      	str	r1, [r7, #0]
20002602:	71fb      	strb	r3, [r7, #7]
    uint32_t gpio_idx = (uint32_t)port_id;
20002604:	79fb      	ldrb	r3, [r7, #7]
20002606:	60fb      	str	r3, [r7, #12]
    
    ASSERT( gpio_idx < NB_OF_GPIO );
20002608:	68fb      	ldr	r3, [r7, #12]
2000260a:	2b1f      	cmp	r3, #31
2000260c:	d900      	bls.n	20002610 <MSS_GPIO_config+0x18>
2000260e:	be00      	bkpt	0x0000

    if ( gpio_idx < NB_OF_GPIO )
20002610:	68fb      	ldr	r3, [r7, #12]
20002612:	2b1f      	cmp	r3, #31
20002614:	d808      	bhi.n	20002628 <MSS_GPIO_config+0x30>
    {
        *(g_config_reg_lut[gpio_idx]) = config;
20002616:	68fa      	ldr	r2, [r7, #12]
20002618:	f244 03bc 	movw	r3, #16572	; 0x40bc
2000261c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20002624:	683a      	ldr	r2, [r7, #0]
20002626:	601a      	str	r2, [r3, #0]
    }
}
20002628:	f107 0714 	add.w	r7, r7, #20
2000262c:	46bd      	mov	sp, r7
2000262e:	bc80      	pop	{r7}
20002630:	4770      	bx	lr
20002632:	bf00      	nop

20002634 <MSS_GPIO_enable_irq>:
 */
void MSS_GPIO_enable_irq
(
    mss_gpio_id_t port_id
)
{
20002634:	b580      	push	{r7, lr}
20002636:	b084      	sub	sp, #16
20002638:	af00      	add	r7, sp, #0
2000263a:	4603      	mov	r3, r0
2000263c:	71fb      	strb	r3, [r7, #7]
    uint32_t cfg_value;
    uint32_t gpio_idx = (uint32_t)port_id;
2000263e:	79fb      	ldrb	r3, [r7, #7]
20002640:	60fb      	str	r3, [r7, #12]
    
    ASSERT( gpio_idx < NB_OF_GPIO );
20002642:	68fb      	ldr	r3, [r7, #12]
20002644:	2b1f      	cmp	r3, #31
20002646:	d900      	bls.n	2000264a <MSS_GPIO_enable_irq+0x16>
20002648:	be00      	bkpt	0x0000
    
    if ( gpio_idx < NB_OF_GPIO )
2000264a:	68fb      	ldr	r3, [r7, #12]
2000264c:	2b1f      	cmp	r3, #31
2000264e:	d81e      	bhi.n	2000268e <MSS_GPIO_enable_irq+0x5a>
    {
        cfg_value = *(g_config_reg_lut[gpio_idx]);
20002650:	68fa      	ldr	r2, [r7, #12]
20002652:	f244 03bc 	movw	r3, #16572	; 0x40bc
20002656:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000265a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000265e:	681b      	ldr	r3, [r3, #0]
20002660:	60bb      	str	r3, [r7, #8]
        *(g_config_reg_lut[gpio_idx]) = (cfg_value | GPIO_INT_ENABLE_MASK);
20002662:	68fa      	ldr	r2, [r7, #12]
20002664:	f244 03bc 	movw	r3, #16572	; 0x40bc
20002668:	f2c2 0300 	movt	r3, #8192	; 0x2000
2000266c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20002670:	68ba      	ldr	r2, [r7, #8]
20002672:	f042 0208 	orr.w	r2, r2, #8
20002676:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ( g_gpio_irqn_lut[gpio_idx] );
20002678:	68fa      	ldr	r2, [r7, #12]
2000267a:	f244 133c 	movw	r3, #16700	; 0x413c
2000267e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20002682:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
20002686:	b21b      	sxth	r3, r3
20002688:	4618      	mov	r0, r3
2000268a:	f7ff ff45 	bl	20002518 <NVIC_EnableIRQ>
    }
}
2000268e:	f107 0710 	add.w	r7, r7, #16
20002692:	46bd      	mov	sp, r7
20002694:	bd80      	pop	{r7, pc}
20002696:	bf00      	nop

20002698 <MSS_GPIO_clear_irq>:
 */
void MSS_GPIO_clear_irq
(
    mss_gpio_id_t port_id
)
{
20002698:	b580      	push	{r7, lr}
2000269a:	b084      	sub	sp, #16
2000269c:	af00      	add	r7, sp, #0
2000269e:	4603      	mov	r3, r0
200026a0:	71fb      	strb	r3, [r7, #7]
    uint32_t gpio_idx = (uint32_t)port_id;
200026a2:	79fb      	ldrb	r3, [r7, #7]
200026a4:	60fb      	str	r3, [r7, #12]
    
    ASSERT( gpio_idx < NB_OF_GPIO );
200026a6:	68fb      	ldr	r3, [r7, #12]
200026a8:	2b1f      	cmp	r3, #31
200026aa:	d900      	bls.n	200026ae <MSS_GPIO_clear_irq+0x16>
200026ac:	be00      	bkpt	0x0000
    
    if ( gpio_idx < NB_OF_GPIO )
200026ae:	68fb      	ldr	r3, [r7, #12]
200026b0:	2b1f      	cmp	r3, #31
200026b2:	d815      	bhi.n	200026e0 <MSS_GPIO_clear_irq+0x48>
    {
        GPIO->GPIO_IRQ = ((uint32_t)1) << gpio_idx;
200026b4:	f243 0300 	movw	r3, #12288	; 0x3000
200026b8:	f2c4 0301 	movt	r3, #16385	; 0x4001
200026bc:	68fa      	ldr	r2, [r7, #12]
200026be:	f04f 0101 	mov.w	r1, #1
200026c2:	fa01 f202 	lsl.w	r2, r1, r2
200026c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        NVIC_ClearPendingIRQ( g_gpio_irqn_lut[gpio_idx] );
200026ca:	68fa      	ldr	r2, [r7, #12]
200026cc:	f244 133c 	movw	r3, #16700	; 0x413c
200026d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200026d4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
200026d8:	b21b      	sxth	r3, r3
200026da:	4618      	mov	r0, r3
200026dc:	f7ff ff38 	bl	20002550 <NVIC_ClearPendingIRQ>
    }
}
200026e0:	f107 0710 	add.w	r7, r7, #16
200026e4:	46bd      	mov	sp, r7
200026e6:	bd80      	pop	{r7, pc}

200026e8 <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
200026e8:	b480      	push	{r7}
200026ea:	b083      	sub	sp, #12
200026ec:	af00      	add	r7, sp, #0
  uint32_t result=0;
200026ee:	f04f 0300 	mov.w	r3, #0
200026f2:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
200026f4:	f3ef 8310 	mrs	r3, PRIMASK
200026f8:	607b      	str	r3, [r7, #4]
  return(result);
200026fa:	687b      	ldr	r3, [r7, #4]
}
200026fc:	4618      	mov	r0, r3
200026fe:	f107 070c 	add.w	r7, r7, #12
20002702:	46bd      	mov	sp, r7
20002704:	bc80      	pop	{r7}
20002706:	4770      	bx	lr

20002708 <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
20002708:	b480      	push	{r7}
2000270a:	b083      	sub	sp, #12
2000270c:	af00      	add	r7, sp, #0
2000270e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
20002710:	687b      	ldr	r3, [r7, #4]
20002712:	f383 8810 	msr	PRIMASK, r3
}
20002716:	f107 070c 	add.w	r7, r7, #12
2000271a:	46bd      	mov	sp, r7
2000271c:	bc80      	pop	{r7}
2000271e:	4770      	bx	lr

20002720 <SystemInit>:

/***************************************************************************//**
 * See system_a2fxxxm3f.h for details.
 */
void SystemInit(void)
{
20002720:	b480      	push	{r7}
20002722:	af00      	add	r7, sp, #0
    /*
     * Do not make use of global variables or make any asumptions regarding
     * memory content if modifying this function. The memory content has not been
     * initialised by the time this function is called by the start-up code.
     */
}
20002724:	46bd      	mov	sp, r7
20002726:	bc80      	pop	{r7}
20002728:	4770      	bx	lr
2000272a:	bf00      	nop

2000272c <__aeabi_drsub>:
2000272c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
20002730:	e002      	b.n	20002738 <__adddf3>
20002732:	bf00      	nop

20002734 <__aeabi_dsub>:
20002734:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

20002738 <__adddf3>:
20002738:	b530      	push	{r4, r5, lr}
2000273a:	ea4f 0441 	mov.w	r4, r1, lsl #1
2000273e:	ea4f 0543 	mov.w	r5, r3, lsl #1
20002742:	ea94 0f05 	teq	r4, r5
20002746:	bf08      	it	eq
20002748:	ea90 0f02 	teqeq	r0, r2
2000274c:	bf1f      	itttt	ne
2000274e:	ea54 0c00 	orrsne.w	ip, r4, r0
20002752:	ea55 0c02 	orrsne.w	ip, r5, r2
20002756:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
2000275a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
2000275e:	f000 80e2 	beq.w	20002926 <__adddf3+0x1ee>
20002762:	ea4f 5454 	mov.w	r4, r4, lsr #21
20002766:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
2000276a:	bfb8      	it	lt
2000276c:	426d      	neglt	r5, r5
2000276e:	dd0c      	ble.n	2000278a <__adddf3+0x52>
20002770:	442c      	add	r4, r5
20002772:	ea80 0202 	eor.w	r2, r0, r2
20002776:	ea81 0303 	eor.w	r3, r1, r3
2000277a:	ea82 0000 	eor.w	r0, r2, r0
2000277e:	ea83 0101 	eor.w	r1, r3, r1
20002782:	ea80 0202 	eor.w	r2, r0, r2
20002786:	ea81 0303 	eor.w	r3, r1, r3
2000278a:	2d36      	cmp	r5, #54	; 0x36
2000278c:	bf88      	it	hi
2000278e:	bd30      	pophi	{r4, r5, pc}
20002790:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
20002794:	ea4f 3101 	mov.w	r1, r1, lsl #12
20002798:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
2000279c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
200027a0:	d002      	beq.n	200027a8 <__adddf3+0x70>
200027a2:	4240      	negs	r0, r0
200027a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
200027a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
200027ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
200027b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
200027b4:	d002      	beq.n	200027bc <__adddf3+0x84>
200027b6:	4252      	negs	r2, r2
200027b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
200027bc:	ea94 0f05 	teq	r4, r5
200027c0:	f000 80a7 	beq.w	20002912 <__adddf3+0x1da>
200027c4:	f1a4 0401 	sub.w	r4, r4, #1
200027c8:	f1d5 0e20 	rsbs	lr, r5, #32
200027cc:	db0d      	blt.n	200027ea <__adddf3+0xb2>
200027ce:	fa02 fc0e 	lsl.w	ip, r2, lr
200027d2:	fa22 f205 	lsr.w	r2, r2, r5
200027d6:	1880      	adds	r0, r0, r2
200027d8:	f141 0100 	adc.w	r1, r1, #0
200027dc:	fa03 f20e 	lsl.w	r2, r3, lr
200027e0:	1880      	adds	r0, r0, r2
200027e2:	fa43 f305 	asr.w	r3, r3, r5
200027e6:	4159      	adcs	r1, r3
200027e8:	e00e      	b.n	20002808 <__adddf3+0xd0>
200027ea:	f1a5 0520 	sub.w	r5, r5, #32
200027ee:	f10e 0e20 	add.w	lr, lr, #32
200027f2:	2a01      	cmp	r2, #1
200027f4:	fa03 fc0e 	lsl.w	ip, r3, lr
200027f8:	bf28      	it	cs
200027fa:	f04c 0c02 	orrcs.w	ip, ip, #2
200027fe:	fa43 f305 	asr.w	r3, r3, r5
20002802:	18c0      	adds	r0, r0, r3
20002804:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
20002808:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
2000280c:	d507      	bpl.n	2000281e <__adddf3+0xe6>
2000280e:	f04f 0e00 	mov.w	lr, #0
20002812:	f1dc 0c00 	rsbs	ip, ip, #0
20002816:	eb7e 0000 	sbcs.w	r0, lr, r0
2000281a:	eb6e 0101 	sbc.w	r1, lr, r1
2000281e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
20002822:	d31b      	bcc.n	2000285c <__adddf3+0x124>
20002824:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
20002828:	d30c      	bcc.n	20002844 <__adddf3+0x10c>
2000282a:	0849      	lsrs	r1, r1, #1
2000282c:	ea5f 0030 	movs.w	r0, r0, rrx
20002830:	ea4f 0c3c 	mov.w	ip, ip, rrx
20002834:	f104 0401 	add.w	r4, r4, #1
20002838:	ea4f 5244 	mov.w	r2, r4, lsl #21
2000283c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
20002840:	f080 809a 	bcs.w	20002978 <__adddf3+0x240>
20002844:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
20002848:	bf08      	it	eq
2000284a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
2000284e:	f150 0000 	adcs.w	r0, r0, #0
20002852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
20002856:	ea41 0105 	orr.w	r1, r1, r5
2000285a:	bd30      	pop	{r4, r5, pc}
2000285c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
20002860:	4140      	adcs	r0, r0
20002862:	eb41 0101 	adc.w	r1, r1, r1
20002866:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
2000286a:	f1a4 0401 	sub.w	r4, r4, #1
2000286e:	d1e9      	bne.n	20002844 <__adddf3+0x10c>
20002870:	f091 0f00 	teq	r1, #0
20002874:	bf04      	itt	eq
20002876:	4601      	moveq	r1, r0
20002878:	2000      	moveq	r0, #0
2000287a:	fab1 f381 	clz	r3, r1
2000287e:	bf08      	it	eq
20002880:	3320      	addeq	r3, #32
20002882:	f1a3 030b 	sub.w	r3, r3, #11
20002886:	f1b3 0220 	subs.w	r2, r3, #32
2000288a:	da0c      	bge.n	200028a6 <__adddf3+0x16e>
2000288c:	320c      	adds	r2, #12
2000288e:	dd08      	ble.n	200028a2 <__adddf3+0x16a>
20002890:	f102 0c14 	add.w	ip, r2, #20
20002894:	f1c2 020c 	rsb	r2, r2, #12
20002898:	fa01 f00c 	lsl.w	r0, r1, ip
2000289c:	fa21 f102 	lsr.w	r1, r1, r2
200028a0:	e00c      	b.n	200028bc <__adddf3+0x184>
200028a2:	f102 0214 	add.w	r2, r2, #20
200028a6:	bfd8      	it	le
200028a8:	f1c2 0c20 	rsble	ip, r2, #32
200028ac:	fa01 f102 	lsl.w	r1, r1, r2
200028b0:	fa20 fc0c 	lsr.w	ip, r0, ip
200028b4:	bfdc      	itt	le
200028b6:	ea41 010c 	orrle.w	r1, r1, ip
200028ba:	4090      	lslle	r0, r2
200028bc:	1ae4      	subs	r4, r4, r3
200028be:	bfa2      	ittt	ge
200028c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
200028c4:	4329      	orrge	r1, r5
200028c6:	bd30      	popge	{r4, r5, pc}
200028c8:	ea6f 0404 	mvn.w	r4, r4
200028cc:	3c1f      	subs	r4, #31
200028ce:	da1c      	bge.n	2000290a <__adddf3+0x1d2>
200028d0:	340c      	adds	r4, #12
200028d2:	dc0e      	bgt.n	200028f2 <__adddf3+0x1ba>
200028d4:	f104 0414 	add.w	r4, r4, #20
200028d8:	f1c4 0220 	rsb	r2, r4, #32
200028dc:	fa20 f004 	lsr.w	r0, r0, r4
200028e0:	fa01 f302 	lsl.w	r3, r1, r2
200028e4:	ea40 0003 	orr.w	r0, r0, r3
200028e8:	fa21 f304 	lsr.w	r3, r1, r4
200028ec:	ea45 0103 	orr.w	r1, r5, r3
200028f0:	bd30      	pop	{r4, r5, pc}
200028f2:	f1c4 040c 	rsb	r4, r4, #12
200028f6:	f1c4 0220 	rsb	r2, r4, #32
200028fa:	fa20 f002 	lsr.w	r0, r0, r2
200028fe:	fa01 f304 	lsl.w	r3, r1, r4
20002902:	ea40 0003 	orr.w	r0, r0, r3
20002906:	4629      	mov	r1, r5
20002908:	bd30      	pop	{r4, r5, pc}
2000290a:	fa21 f004 	lsr.w	r0, r1, r4
2000290e:	4629      	mov	r1, r5
20002910:	bd30      	pop	{r4, r5, pc}
20002912:	f094 0f00 	teq	r4, #0
20002916:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
2000291a:	bf06      	itte	eq
2000291c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
20002920:	3401      	addeq	r4, #1
20002922:	3d01      	subne	r5, #1
20002924:	e74e      	b.n	200027c4 <__adddf3+0x8c>
20002926:	ea7f 5c64 	mvns.w	ip, r4, asr #21
2000292a:	bf18      	it	ne
2000292c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
20002930:	d029      	beq.n	20002986 <__adddf3+0x24e>
20002932:	ea94 0f05 	teq	r4, r5
20002936:	bf08      	it	eq
20002938:	ea90 0f02 	teqeq	r0, r2
2000293c:	d005      	beq.n	2000294a <__adddf3+0x212>
2000293e:	ea54 0c00 	orrs.w	ip, r4, r0
20002942:	bf04      	itt	eq
20002944:	4619      	moveq	r1, r3
20002946:	4610      	moveq	r0, r2
20002948:	bd30      	pop	{r4, r5, pc}
2000294a:	ea91 0f03 	teq	r1, r3
2000294e:	bf1e      	ittt	ne
20002950:	2100      	movne	r1, #0
20002952:	2000      	movne	r0, #0
20002954:	bd30      	popne	{r4, r5, pc}
20002956:	ea5f 5c54 	movs.w	ip, r4, lsr #21
2000295a:	d105      	bne.n	20002968 <__adddf3+0x230>
2000295c:	0040      	lsls	r0, r0, #1
2000295e:	4149      	adcs	r1, r1
20002960:	bf28      	it	cs
20002962:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
20002966:	bd30      	pop	{r4, r5, pc}
20002968:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
2000296c:	bf3c      	itt	cc
2000296e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
20002972:	bd30      	popcc	{r4, r5, pc}
20002974:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
20002978:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
2000297c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
20002980:	f04f 0000 	mov.w	r0, #0
20002984:	bd30      	pop	{r4, r5, pc}
20002986:	ea7f 5c64 	mvns.w	ip, r4, asr #21
2000298a:	bf1a      	itte	ne
2000298c:	4619      	movne	r1, r3
2000298e:	4610      	movne	r0, r2
20002990:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
20002994:	bf1c      	itt	ne
20002996:	460b      	movne	r3, r1
20002998:	4602      	movne	r2, r0
2000299a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
2000299e:	bf06      	itte	eq
200029a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
200029a4:	ea91 0f03 	teqeq	r1, r3
200029a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
200029ac:	bd30      	pop	{r4, r5, pc}
200029ae:	bf00      	nop

200029b0 <__aeabi_ui2d>:
200029b0:	f090 0f00 	teq	r0, #0
200029b4:	bf04      	itt	eq
200029b6:	2100      	moveq	r1, #0
200029b8:	4770      	bxeq	lr
200029ba:	b530      	push	{r4, r5, lr}
200029bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
200029c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
200029c4:	f04f 0500 	mov.w	r5, #0
200029c8:	f04f 0100 	mov.w	r1, #0
200029cc:	e750      	b.n	20002870 <__adddf3+0x138>
200029ce:	bf00      	nop

200029d0 <__aeabi_i2d>:
200029d0:	f090 0f00 	teq	r0, #0
200029d4:	bf04      	itt	eq
200029d6:	2100      	moveq	r1, #0
200029d8:	4770      	bxeq	lr
200029da:	b530      	push	{r4, r5, lr}
200029dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
200029e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
200029e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
200029e8:	bf48      	it	mi
200029ea:	4240      	negmi	r0, r0
200029ec:	f04f 0100 	mov.w	r1, #0
200029f0:	e73e      	b.n	20002870 <__adddf3+0x138>
200029f2:	bf00      	nop

200029f4 <__aeabi_f2d>:
200029f4:	0042      	lsls	r2, r0, #1
200029f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
200029fa:	ea4f 0131 	mov.w	r1, r1, rrx
200029fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
20002a02:	bf1f      	itttt	ne
20002a04:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
20002a08:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
20002a0c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
20002a10:	4770      	bxne	lr
20002a12:	f092 0f00 	teq	r2, #0
20002a16:	bf14      	ite	ne
20002a18:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
20002a1c:	4770      	bxeq	lr
20002a1e:	b530      	push	{r4, r5, lr}
20002a20:	f44f 7460 	mov.w	r4, #896	; 0x380
20002a24:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
20002a28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
20002a2c:	e720      	b.n	20002870 <__adddf3+0x138>
20002a2e:	bf00      	nop

20002a30 <__aeabi_ul2d>:
20002a30:	ea50 0201 	orrs.w	r2, r0, r1
20002a34:	bf08      	it	eq
20002a36:	4770      	bxeq	lr
20002a38:	b530      	push	{r4, r5, lr}
20002a3a:	f04f 0500 	mov.w	r5, #0
20002a3e:	e00a      	b.n	20002a56 <__aeabi_l2d+0x16>

20002a40 <__aeabi_l2d>:
20002a40:	ea50 0201 	orrs.w	r2, r0, r1
20002a44:	bf08      	it	eq
20002a46:	4770      	bxeq	lr
20002a48:	b530      	push	{r4, r5, lr}
20002a4a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
20002a4e:	d502      	bpl.n	20002a56 <__aeabi_l2d+0x16>
20002a50:	4240      	negs	r0, r0
20002a52:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
20002a56:	f44f 6480 	mov.w	r4, #1024	; 0x400
20002a5a:	f104 0432 	add.w	r4, r4, #50	; 0x32
20002a5e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
20002a62:	f43f aedc 	beq.w	2000281e <__adddf3+0xe6>
20002a66:	f04f 0203 	mov.w	r2, #3
20002a6a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
20002a6e:	bf18      	it	ne
20002a70:	3203      	addne	r2, #3
20002a72:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
20002a76:	bf18      	it	ne
20002a78:	3203      	addne	r2, #3
20002a7a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
20002a7e:	f1c2 0320 	rsb	r3, r2, #32
20002a82:	fa00 fc03 	lsl.w	ip, r0, r3
20002a86:	fa20 f002 	lsr.w	r0, r0, r2
20002a8a:	fa01 fe03 	lsl.w	lr, r1, r3
20002a8e:	ea40 000e 	orr.w	r0, r0, lr
20002a92:	fa21 f102 	lsr.w	r1, r1, r2
20002a96:	4414      	add	r4, r2
20002a98:	e6c1      	b.n	2000281e <__adddf3+0xe6>
20002a9a:	bf00      	nop

20002a9c <__aeabi_dmul>:
20002a9c:	b570      	push	{r4, r5, r6, lr}
20002a9e:	f04f 0cff 	mov.w	ip, #255	; 0xff
20002aa2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
20002aa6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
20002aaa:	bf1d      	ittte	ne
20002aac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
20002ab0:	ea94 0f0c 	teqne	r4, ip
20002ab4:	ea95 0f0c 	teqne	r5, ip
20002ab8:	f000 f8de 	bleq	20002c78 <__aeabi_dmul+0x1dc>
20002abc:	442c      	add	r4, r5
20002abe:	ea81 0603 	eor.w	r6, r1, r3
20002ac2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
20002ac6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
20002aca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
20002ace:	bf18      	it	ne
20002ad0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
20002ad4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
20002ad8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
20002adc:	d038      	beq.n	20002b50 <__aeabi_dmul+0xb4>
20002ade:	fba0 ce02 	umull	ip, lr, r0, r2
20002ae2:	f04f 0500 	mov.w	r5, #0
20002ae6:	fbe1 e502 	umlal	lr, r5, r1, r2
20002aea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
20002aee:	fbe0 e503 	umlal	lr, r5, r0, r3
20002af2:	f04f 0600 	mov.w	r6, #0
20002af6:	fbe1 5603 	umlal	r5, r6, r1, r3
20002afa:	f09c 0f00 	teq	ip, #0
20002afe:	bf18      	it	ne
20002b00:	f04e 0e01 	orrne.w	lr, lr, #1
20002b04:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
20002b08:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
20002b0c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
20002b10:	d204      	bcs.n	20002b1c <__aeabi_dmul+0x80>
20002b12:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
20002b16:	416d      	adcs	r5, r5
20002b18:	eb46 0606 	adc.w	r6, r6, r6
20002b1c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
20002b20:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
20002b24:	ea4f 20c5 	mov.w	r0, r5, lsl #11
20002b28:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
20002b2c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
20002b30:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
20002b34:	bf88      	it	hi
20002b36:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
20002b3a:	d81e      	bhi.n	20002b7a <__aeabi_dmul+0xde>
20002b3c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
20002b40:	bf08      	it	eq
20002b42:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
20002b46:	f150 0000 	adcs.w	r0, r0, #0
20002b4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
20002b4e:	bd70      	pop	{r4, r5, r6, pc}
20002b50:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
20002b54:	ea46 0101 	orr.w	r1, r6, r1
20002b58:	ea40 0002 	orr.w	r0, r0, r2
20002b5c:	ea81 0103 	eor.w	r1, r1, r3
20002b60:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
20002b64:	bfc2      	ittt	gt
20002b66:	ebd4 050c 	rsbsgt	r5, r4, ip
20002b6a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
20002b6e:	bd70      	popgt	{r4, r5, r6, pc}
20002b70:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
20002b74:	f04f 0e00 	mov.w	lr, #0
20002b78:	3c01      	subs	r4, #1
20002b7a:	f300 80ab 	bgt.w	20002cd4 <__aeabi_dmul+0x238>
20002b7e:	f114 0f36 	cmn.w	r4, #54	; 0x36
20002b82:	bfde      	ittt	le
20002b84:	2000      	movle	r0, #0
20002b86:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
20002b8a:	bd70      	pople	{r4, r5, r6, pc}
20002b8c:	f1c4 0400 	rsb	r4, r4, #0
20002b90:	3c20      	subs	r4, #32
20002b92:	da35      	bge.n	20002c00 <__aeabi_dmul+0x164>
20002b94:	340c      	adds	r4, #12
20002b96:	dc1b      	bgt.n	20002bd0 <__aeabi_dmul+0x134>
20002b98:	f104 0414 	add.w	r4, r4, #20
20002b9c:	f1c4 0520 	rsb	r5, r4, #32
20002ba0:	fa00 f305 	lsl.w	r3, r0, r5
20002ba4:	fa20 f004 	lsr.w	r0, r0, r4
20002ba8:	fa01 f205 	lsl.w	r2, r1, r5
20002bac:	ea40 0002 	orr.w	r0, r0, r2
20002bb0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
20002bb4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
20002bb8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
20002bbc:	fa21 f604 	lsr.w	r6, r1, r4
20002bc0:	eb42 0106 	adc.w	r1, r2, r6
20002bc4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
20002bc8:	bf08      	it	eq
20002bca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
20002bce:	bd70      	pop	{r4, r5, r6, pc}
20002bd0:	f1c4 040c 	rsb	r4, r4, #12
20002bd4:	f1c4 0520 	rsb	r5, r4, #32
20002bd8:	fa00 f304 	lsl.w	r3, r0, r4
20002bdc:	fa20 f005 	lsr.w	r0, r0, r5
20002be0:	fa01 f204 	lsl.w	r2, r1, r4
20002be4:	ea40 0002 	orr.w	r0, r0, r2
20002be8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
20002bec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
20002bf0:	f141 0100 	adc.w	r1, r1, #0
20002bf4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
20002bf8:	bf08      	it	eq
20002bfa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
20002bfe:	bd70      	pop	{r4, r5, r6, pc}
20002c00:	f1c4 0520 	rsb	r5, r4, #32
20002c04:	fa00 f205 	lsl.w	r2, r0, r5
20002c08:	ea4e 0e02 	orr.w	lr, lr, r2
20002c0c:	fa20 f304 	lsr.w	r3, r0, r4
20002c10:	fa01 f205 	lsl.w	r2, r1, r5
20002c14:	ea43 0302 	orr.w	r3, r3, r2
20002c18:	fa21 f004 	lsr.w	r0, r1, r4
20002c1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
20002c20:	fa21 f204 	lsr.w	r2, r1, r4
20002c24:	ea20 0002 	bic.w	r0, r0, r2
20002c28:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
20002c2c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
20002c30:	bf08      	it	eq
20002c32:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
20002c36:	bd70      	pop	{r4, r5, r6, pc}
20002c38:	f094 0f00 	teq	r4, #0
20002c3c:	d10f      	bne.n	20002c5e <__aeabi_dmul+0x1c2>
20002c3e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
20002c42:	0040      	lsls	r0, r0, #1
20002c44:	eb41 0101 	adc.w	r1, r1, r1
20002c48:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
20002c4c:	bf08      	it	eq
20002c4e:	3c01      	subeq	r4, #1
20002c50:	d0f7      	beq.n	20002c42 <__aeabi_dmul+0x1a6>
20002c52:	ea41 0106 	orr.w	r1, r1, r6
20002c56:	f095 0f00 	teq	r5, #0
20002c5a:	bf18      	it	ne
20002c5c:	4770      	bxne	lr
20002c5e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
20002c62:	0052      	lsls	r2, r2, #1
20002c64:	eb43 0303 	adc.w	r3, r3, r3
20002c68:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
20002c6c:	bf08      	it	eq
20002c6e:	3d01      	subeq	r5, #1
20002c70:	d0f7      	beq.n	20002c62 <__aeabi_dmul+0x1c6>
20002c72:	ea43 0306 	orr.w	r3, r3, r6
20002c76:	4770      	bx	lr
20002c78:	ea94 0f0c 	teq	r4, ip
20002c7c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
20002c80:	bf18      	it	ne
20002c82:	ea95 0f0c 	teqne	r5, ip
20002c86:	d00c      	beq.n	20002ca2 <__aeabi_dmul+0x206>
20002c88:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
20002c8c:	bf18      	it	ne
20002c8e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
20002c92:	d1d1      	bne.n	20002c38 <__aeabi_dmul+0x19c>
20002c94:	ea81 0103 	eor.w	r1, r1, r3
20002c98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
20002c9c:	f04f 0000 	mov.w	r0, #0
20002ca0:	bd70      	pop	{r4, r5, r6, pc}
20002ca2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
20002ca6:	bf06      	itte	eq
20002ca8:	4610      	moveq	r0, r2
20002caa:	4619      	moveq	r1, r3
20002cac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
20002cb0:	d019      	beq.n	20002ce6 <__aeabi_dmul+0x24a>
20002cb2:	ea94 0f0c 	teq	r4, ip
20002cb6:	d102      	bne.n	20002cbe <__aeabi_dmul+0x222>
20002cb8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
20002cbc:	d113      	bne.n	20002ce6 <__aeabi_dmul+0x24a>
20002cbe:	ea95 0f0c 	teq	r5, ip
20002cc2:	d105      	bne.n	20002cd0 <__aeabi_dmul+0x234>
20002cc4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
20002cc8:	bf1c      	itt	ne
20002cca:	4610      	movne	r0, r2
20002ccc:	4619      	movne	r1, r3
20002cce:	d10a      	bne.n	20002ce6 <__aeabi_dmul+0x24a>
20002cd0:	ea81 0103 	eor.w	r1, r1, r3
20002cd4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
20002cd8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
20002cdc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
20002ce0:	f04f 0000 	mov.w	r0, #0
20002ce4:	bd70      	pop	{r4, r5, r6, pc}
20002ce6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
20002cea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
20002cee:	bd70      	pop	{r4, r5, r6, pc}

20002cf0 <__aeabi_ddiv>:
20002cf0:	b570      	push	{r4, r5, r6, lr}
20002cf2:	f04f 0cff 	mov.w	ip, #255	; 0xff
20002cf6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
20002cfa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
20002cfe:	bf1d      	ittte	ne
20002d00:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
20002d04:	ea94 0f0c 	teqne	r4, ip
20002d08:	ea95 0f0c 	teqne	r5, ip
20002d0c:	f000 f8a7 	bleq	20002e5e <__aeabi_ddiv+0x16e>
20002d10:	eba4 0405 	sub.w	r4, r4, r5
20002d14:	ea81 0e03 	eor.w	lr, r1, r3
20002d18:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
20002d1c:	ea4f 3101 	mov.w	r1, r1, lsl #12
20002d20:	f000 8088 	beq.w	20002e34 <__aeabi_ddiv+0x144>
20002d24:	ea4f 3303 	mov.w	r3, r3, lsl #12
20002d28:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
20002d2c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
20002d30:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
20002d34:	ea4f 2202 	mov.w	r2, r2, lsl #8
20002d38:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
20002d3c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
20002d40:	ea4f 2600 	mov.w	r6, r0, lsl #8
20002d44:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
20002d48:	429d      	cmp	r5, r3
20002d4a:	bf08      	it	eq
20002d4c:	4296      	cmpeq	r6, r2
20002d4e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
20002d52:	f504 7440 	add.w	r4, r4, #768	; 0x300
20002d56:	d202      	bcs.n	20002d5e <__aeabi_ddiv+0x6e>
20002d58:	085b      	lsrs	r3, r3, #1
20002d5a:	ea4f 0232 	mov.w	r2, r2, rrx
20002d5e:	1ab6      	subs	r6, r6, r2
20002d60:	eb65 0503 	sbc.w	r5, r5, r3
20002d64:	085b      	lsrs	r3, r3, #1
20002d66:	ea4f 0232 	mov.w	r2, r2, rrx
20002d6a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
20002d6e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
20002d72:	ebb6 0e02 	subs.w	lr, r6, r2
20002d76:	eb75 0e03 	sbcs.w	lr, r5, r3
20002d7a:	bf22      	ittt	cs
20002d7c:	1ab6      	subcs	r6, r6, r2
20002d7e:	4675      	movcs	r5, lr
20002d80:	ea40 000c 	orrcs.w	r0, r0, ip
20002d84:	085b      	lsrs	r3, r3, #1
20002d86:	ea4f 0232 	mov.w	r2, r2, rrx
20002d8a:	ebb6 0e02 	subs.w	lr, r6, r2
20002d8e:	eb75 0e03 	sbcs.w	lr, r5, r3
20002d92:	bf22      	ittt	cs
20002d94:	1ab6      	subcs	r6, r6, r2
20002d96:	4675      	movcs	r5, lr
20002d98:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
20002d9c:	085b      	lsrs	r3, r3, #1
20002d9e:	ea4f 0232 	mov.w	r2, r2, rrx
20002da2:	ebb6 0e02 	subs.w	lr, r6, r2
20002da6:	eb75 0e03 	sbcs.w	lr, r5, r3
20002daa:	bf22      	ittt	cs
20002dac:	1ab6      	subcs	r6, r6, r2
20002dae:	4675      	movcs	r5, lr
20002db0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
20002db4:	085b      	lsrs	r3, r3, #1
20002db6:	ea4f 0232 	mov.w	r2, r2, rrx
20002dba:	ebb6 0e02 	subs.w	lr, r6, r2
20002dbe:	eb75 0e03 	sbcs.w	lr, r5, r3
20002dc2:	bf22      	ittt	cs
20002dc4:	1ab6      	subcs	r6, r6, r2
20002dc6:	4675      	movcs	r5, lr
20002dc8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
20002dcc:	ea55 0e06 	orrs.w	lr, r5, r6
20002dd0:	d018      	beq.n	20002e04 <__aeabi_ddiv+0x114>
20002dd2:	ea4f 1505 	mov.w	r5, r5, lsl #4
20002dd6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
20002dda:	ea4f 1606 	mov.w	r6, r6, lsl #4
20002dde:	ea4f 03c3 	mov.w	r3, r3, lsl #3
20002de2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
20002de6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
20002dea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
20002dee:	d1c0      	bne.n	20002d72 <__aeabi_ddiv+0x82>
20002df0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
20002df4:	d10b      	bne.n	20002e0e <__aeabi_ddiv+0x11e>
20002df6:	ea41 0100 	orr.w	r1, r1, r0
20002dfa:	f04f 0000 	mov.w	r0, #0
20002dfe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
20002e02:	e7b6      	b.n	20002d72 <__aeabi_ddiv+0x82>
20002e04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
20002e08:	bf04      	itt	eq
20002e0a:	4301      	orreq	r1, r0
20002e0c:	2000      	moveq	r0, #0
20002e0e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
20002e12:	bf88      	it	hi
20002e14:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
20002e18:	f63f aeaf 	bhi.w	20002b7a <__aeabi_dmul+0xde>
20002e1c:	ebb5 0c03 	subs.w	ip, r5, r3
20002e20:	bf04      	itt	eq
20002e22:	ebb6 0c02 	subseq.w	ip, r6, r2
20002e26:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
20002e2a:	f150 0000 	adcs.w	r0, r0, #0
20002e2e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
20002e32:	bd70      	pop	{r4, r5, r6, pc}
20002e34:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
20002e38:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
20002e3c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
20002e40:	bfc2      	ittt	gt
20002e42:	ebd4 050c 	rsbsgt	r5, r4, ip
20002e46:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
20002e4a:	bd70      	popgt	{r4, r5, r6, pc}
20002e4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
20002e50:	f04f 0e00 	mov.w	lr, #0
20002e54:	3c01      	subs	r4, #1
20002e56:	e690      	b.n	20002b7a <__aeabi_dmul+0xde>
20002e58:	ea45 0e06 	orr.w	lr, r5, r6
20002e5c:	e68d      	b.n	20002b7a <__aeabi_dmul+0xde>
20002e5e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
20002e62:	ea94 0f0c 	teq	r4, ip
20002e66:	bf08      	it	eq
20002e68:	ea95 0f0c 	teqeq	r5, ip
20002e6c:	f43f af3b 	beq.w	20002ce6 <__aeabi_dmul+0x24a>
20002e70:	ea94 0f0c 	teq	r4, ip
20002e74:	d10a      	bne.n	20002e8c <__aeabi_ddiv+0x19c>
20002e76:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
20002e7a:	f47f af34 	bne.w	20002ce6 <__aeabi_dmul+0x24a>
20002e7e:	ea95 0f0c 	teq	r5, ip
20002e82:	f47f af25 	bne.w	20002cd0 <__aeabi_dmul+0x234>
20002e86:	4610      	mov	r0, r2
20002e88:	4619      	mov	r1, r3
20002e8a:	e72c      	b.n	20002ce6 <__aeabi_dmul+0x24a>
20002e8c:	ea95 0f0c 	teq	r5, ip
20002e90:	d106      	bne.n	20002ea0 <__aeabi_ddiv+0x1b0>
20002e92:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
20002e96:	f43f aefd 	beq.w	20002c94 <__aeabi_dmul+0x1f8>
20002e9a:	4610      	mov	r0, r2
20002e9c:	4619      	mov	r1, r3
20002e9e:	e722      	b.n	20002ce6 <__aeabi_dmul+0x24a>
20002ea0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
20002ea4:	bf18      	it	ne
20002ea6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
20002eaa:	f47f aec5 	bne.w	20002c38 <__aeabi_dmul+0x19c>
20002eae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
20002eb2:	f47f af0d 	bne.w	20002cd0 <__aeabi_dmul+0x234>
20002eb6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
20002eba:	f47f aeeb 	bne.w	20002c94 <__aeabi_dmul+0x1f8>
20002ebe:	e712      	b.n	20002ce6 <__aeabi_dmul+0x24a>

20002ec0 <__gedf2>:
20002ec0:	f04f 3cff 	mov.w	ip, #4294967295
20002ec4:	e006      	b.n	20002ed4 <__cmpdf2+0x4>
20002ec6:	bf00      	nop

20002ec8 <__ledf2>:
20002ec8:	f04f 0c01 	mov.w	ip, #1
20002ecc:	e002      	b.n	20002ed4 <__cmpdf2+0x4>
20002ece:	bf00      	nop

20002ed0 <__cmpdf2>:
20002ed0:	f04f 0c01 	mov.w	ip, #1
20002ed4:	f84d cd04 	str.w	ip, [sp, #-4]!
20002ed8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
20002edc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
20002ee0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
20002ee4:	bf18      	it	ne
20002ee6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
20002eea:	d01b      	beq.n	20002f24 <__cmpdf2+0x54>
20002eec:	b001      	add	sp, #4
20002eee:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
20002ef2:	bf0c      	ite	eq
20002ef4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
20002ef8:	ea91 0f03 	teqne	r1, r3
20002efc:	bf02      	ittt	eq
20002efe:	ea90 0f02 	teqeq	r0, r2
20002f02:	2000      	moveq	r0, #0
20002f04:	4770      	bxeq	lr
20002f06:	f110 0f00 	cmn.w	r0, #0
20002f0a:	ea91 0f03 	teq	r1, r3
20002f0e:	bf58      	it	pl
20002f10:	4299      	cmppl	r1, r3
20002f12:	bf08      	it	eq
20002f14:	4290      	cmpeq	r0, r2
20002f16:	bf2c      	ite	cs
20002f18:	17d8      	asrcs	r0, r3, #31
20002f1a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
20002f1e:	f040 0001 	orr.w	r0, r0, #1
20002f22:	4770      	bx	lr
20002f24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
20002f28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
20002f2c:	d102      	bne.n	20002f34 <__cmpdf2+0x64>
20002f2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
20002f32:	d107      	bne.n	20002f44 <__cmpdf2+0x74>
20002f34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
20002f38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
20002f3c:	d1d6      	bne.n	20002eec <__cmpdf2+0x1c>
20002f3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
20002f42:	d0d3      	beq.n	20002eec <__cmpdf2+0x1c>
20002f44:	f85d 0b04 	ldr.w	r0, [sp], #4
20002f48:	4770      	bx	lr
20002f4a:	bf00      	nop

20002f4c <__aeabi_cdrcmple>:
20002f4c:	4684      	mov	ip, r0
20002f4e:	4610      	mov	r0, r2
20002f50:	4662      	mov	r2, ip
20002f52:	468c      	mov	ip, r1
20002f54:	4619      	mov	r1, r3
20002f56:	4663      	mov	r3, ip
20002f58:	e000      	b.n	20002f5c <__aeabi_cdcmpeq>
20002f5a:	bf00      	nop

20002f5c <__aeabi_cdcmpeq>:
20002f5c:	b501      	push	{r0, lr}
20002f5e:	f7ff ffb7 	bl	20002ed0 <__cmpdf2>
20002f62:	2800      	cmp	r0, #0
20002f64:	bf48      	it	mi
20002f66:	f110 0f00 	cmnmi.w	r0, #0
20002f6a:	bd01      	pop	{r0, pc}

20002f6c <__aeabi_dcmpeq>:
20002f6c:	f84d ed08 	str.w	lr, [sp, #-8]!
20002f70:	f7ff fff4 	bl	20002f5c <__aeabi_cdcmpeq>
20002f74:	bf0c      	ite	eq
20002f76:	2001      	moveq	r0, #1
20002f78:	2000      	movne	r0, #0
20002f7a:	f85d fb08 	ldr.w	pc, [sp], #8
20002f7e:	bf00      	nop

20002f80 <__aeabi_dcmplt>:
20002f80:	f84d ed08 	str.w	lr, [sp, #-8]!
20002f84:	f7ff ffea 	bl	20002f5c <__aeabi_cdcmpeq>
20002f88:	bf34      	ite	cc
20002f8a:	2001      	movcc	r0, #1
20002f8c:	2000      	movcs	r0, #0
20002f8e:	f85d fb08 	ldr.w	pc, [sp], #8
20002f92:	bf00      	nop

20002f94 <__aeabi_dcmple>:
20002f94:	f84d ed08 	str.w	lr, [sp, #-8]!
20002f98:	f7ff ffe0 	bl	20002f5c <__aeabi_cdcmpeq>
20002f9c:	bf94      	ite	ls
20002f9e:	2001      	movls	r0, #1
20002fa0:	2000      	movhi	r0, #0
20002fa2:	f85d fb08 	ldr.w	pc, [sp], #8
20002fa6:	bf00      	nop

20002fa8 <__aeabi_dcmpge>:
20002fa8:	f84d ed08 	str.w	lr, [sp, #-8]!
20002fac:	f7ff ffce 	bl	20002f4c <__aeabi_cdrcmple>
20002fb0:	bf94      	ite	ls
20002fb2:	2001      	movls	r0, #1
20002fb4:	2000      	movhi	r0, #0
20002fb6:	f85d fb08 	ldr.w	pc, [sp], #8
20002fba:	bf00      	nop

20002fbc <__aeabi_dcmpgt>:
20002fbc:	f84d ed08 	str.w	lr, [sp, #-8]!
20002fc0:	f7ff ffc4 	bl	20002f4c <__aeabi_cdrcmple>
20002fc4:	bf34      	ite	cc
20002fc6:	2001      	movcc	r0, #1
20002fc8:	2000      	movcs	r0, #0
20002fca:	f85d fb08 	ldr.w	pc, [sp], #8
20002fce:	bf00      	nop

20002fd0 <__aeabi_d2iz>:
20002fd0:	ea4f 0241 	mov.w	r2, r1, lsl #1
20002fd4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
20002fd8:	d215      	bcs.n	20003006 <__aeabi_d2iz+0x36>
20002fda:	d511      	bpl.n	20003000 <__aeabi_d2iz+0x30>
20002fdc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
20002fe0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
20002fe4:	d912      	bls.n	2000300c <__aeabi_d2iz+0x3c>
20002fe6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
20002fea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
20002fee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
20002ff2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
20002ff6:	fa23 f002 	lsr.w	r0, r3, r2
20002ffa:	bf18      	it	ne
20002ffc:	4240      	negne	r0, r0
20002ffe:	4770      	bx	lr
20003000:	f04f 0000 	mov.w	r0, #0
20003004:	4770      	bx	lr
20003006:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
2000300a:	d105      	bne.n	20003018 <__aeabi_d2iz+0x48>
2000300c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
20003010:	bf08      	it	eq
20003012:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
20003016:	4770      	bx	lr
20003018:	f04f 0000 	mov.w	r0, #0
2000301c:	4770      	bx	lr
2000301e:	bf00      	nop

20003020 <__aeabi_d2uiz>:
20003020:	004a      	lsls	r2, r1, #1
20003022:	d211      	bcs.n	20003048 <__aeabi_d2uiz+0x28>
20003024:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
20003028:	d211      	bcs.n	2000304e <__aeabi_d2uiz+0x2e>
2000302a:	d50d      	bpl.n	20003048 <__aeabi_d2uiz+0x28>
2000302c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
20003030:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
20003034:	d40e      	bmi.n	20003054 <__aeabi_d2uiz+0x34>
20003036:	ea4f 23c1 	mov.w	r3, r1, lsl #11
2000303a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
2000303e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
20003042:	fa23 f002 	lsr.w	r0, r3, r2
20003046:	4770      	bx	lr
20003048:	f04f 0000 	mov.w	r0, #0
2000304c:	4770      	bx	lr
2000304e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
20003052:	d102      	bne.n	2000305a <__aeabi_d2uiz+0x3a>
20003054:	f04f 30ff 	mov.w	r0, #4294967295
20003058:	4770      	bx	lr
2000305a:	f04f 0000 	mov.w	r0, #0
2000305e:	4770      	bx	lr

20003060 <__aeabi_frsub>:
20003060:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
20003064:	e002      	b.n	2000306c <__addsf3>
20003066:	bf00      	nop

20003068 <__aeabi_fsub>:
20003068:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

2000306c <__addsf3>:
2000306c:	0042      	lsls	r2, r0, #1
2000306e:	bf1f      	itttt	ne
20003070:	ea5f 0341 	movsne.w	r3, r1, lsl #1
20003074:	ea92 0f03 	teqne	r2, r3
20003078:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
2000307c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
20003080:	d06a      	beq.n	20003158 <__addsf3+0xec>
20003082:	ea4f 6212 	mov.w	r2, r2, lsr #24
20003086:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
2000308a:	bfc1      	itttt	gt
2000308c:	18d2      	addgt	r2, r2, r3
2000308e:	4041      	eorgt	r1, r0
20003090:	4048      	eorgt	r0, r1
20003092:	4041      	eorgt	r1, r0
20003094:	bfb8      	it	lt
20003096:	425b      	neglt	r3, r3
20003098:	2b19      	cmp	r3, #25
2000309a:	bf88      	it	hi
2000309c:	4770      	bxhi	lr
2000309e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
200030a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
200030a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
200030aa:	bf18      	it	ne
200030ac:	4240      	negne	r0, r0
200030ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
200030b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
200030b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
200030ba:	bf18      	it	ne
200030bc:	4249      	negne	r1, r1
200030be:	ea92 0f03 	teq	r2, r3
200030c2:	d03f      	beq.n	20003144 <__addsf3+0xd8>
200030c4:	f1a2 0201 	sub.w	r2, r2, #1
200030c8:	fa41 fc03 	asr.w	ip, r1, r3
200030cc:	eb10 000c 	adds.w	r0, r0, ip
200030d0:	f1c3 0320 	rsb	r3, r3, #32
200030d4:	fa01 f103 	lsl.w	r1, r1, r3
200030d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
200030dc:	d502      	bpl.n	200030e4 <__addsf3+0x78>
200030de:	4249      	negs	r1, r1
200030e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
200030e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
200030e8:	d313      	bcc.n	20003112 <__addsf3+0xa6>
200030ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
200030ee:	d306      	bcc.n	200030fe <__addsf3+0x92>
200030f0:	0840      	lsrs	r0, r0, #1
200030f2:	ea4f 0131 	mov.w	r1, r1, rrx
200030f6:	f102 0201 	add.w	r2, r2, #1
200030fa:	2afe      	cmp	r2, #254	; 0xfe
200030fc:	d251      	bcs.n	200031a2 <__addsf3+0x136>
200030fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
20003102:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
20003106:	bf08      	it	eq
20003108:	f020 0001 	biceq.w	r0, r0, #1
2000310c:	ea40 0003 	orr.w	r0, r0, r3
20003110:	4770      	bx	lr
20003112:	0049      	lsls	r1, r1, #1
20003114:	eb40 0000 	adc.w	r0, r0, r0
20003118:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
2000311c:	f1a2 0201 	sub.w	r2, r2, #1
20003120:	d1ed      	bne.n	200030fe <__addsf3+0x92>
20003122:	fab0 fc80 	clz	ip, r0
20003126:	f1ac 0c08 	sub.w	ip, ip, #8
2000312a:	ebb2 020c 	subs.w	r2, r2, ip
2000312e:	fa00 f00c 	lsl.w	r0, r0, ip
20003132:	bfaa      	itet	ge
20003134:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
20003138:	4252      	neglt	r2, r2
2000313a:	4318      	orrge	r0, r3
2000313c:	bfbc      	itt	lt
2000313e:	40d0      	lsrlt	r0, r2
20003140:	4318      	orrlt	r0, r3
20003142:	4770      	bx	lr
20003144:	f092 0f00 	teq	r2, #0
20003148:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
2000314c:	bf06      	itte	eq
2000314e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
20003152:	3201      	addeq	r2, #1
20003154:	3b01      	subne	r3, #1
20003156:	e7b5      	b.n	200030c4 <__addsf3+0x58>
20003158:	ea4f 0341 	mov.w	r3, r1, lsl #1
2000315c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
20003160:	bf18      	it	ne
20003162:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
20003166:	d021      	beq.n	200031ac <__addsf3+0x140>
20003168:	ea92 0f03 	teq	r2, r3
2000316c:	d004      	beq.n	20003178 <__addsf3+0x10c>
2000316e:	f092 0f00 	teq	r2, #0
20003172:	bf08      	it	eq
20003174:	4608      	moveq	r0, r1
20003176:	4770      	bx	lr
20003178:	ea90 0f01 	teq	r0, r1
2000317c:	bf1c      	itt	ne
2000317e:	2000      	movne	r0, #0
20003180:	4770      	bxne	lr
20003182:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
20003186:	d104      	bne.n	20003192 <__addsf3+0x126>
20003188:	0040      	lsls	r0, r0, #1
2000318a:	bf28      	it	cs
2000318c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
20003190:	4770      	bx	lr
20003192:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
20003196:	bf3c      	itt	cc
20003198:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
2000319c:	4770      	bxcc	lr
2000319e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
200031a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
200031a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
200031aa:	4770      	bx	lr
200031ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
200031b0:	bf16      	itet	ne
200031b2:	4608      	movne	r0, r1
200031b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
200031b8:	4601      	movne	r1, r0
200031ba:	0242      	lsls	r2, r0, #9
200031bc:	bf06      	itte	eq
200031be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
200031c2:	ea90 0f01 	teqeq	r0, r1
200031c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
200031ca:	4770      	bx	lr

200031cc <__aeabi_ui2f>:
200031cc:	f04f 0300 	mov.w	r3, #0
200031d0:	e004      	b.n	200031dc <__aeabi_i2f+0x8>
200031d2:	bf00      	nop

200031d4 <__aeabi_i2f>:
200031d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
200031d8:	bf48      	it	mi
200031da:	4240      	negmi	r0, r0
200031dc:	ea5f 0c00 	movs.w	ip, r0
200031e0:	bf08      	it	eq
200031e2:	4770      	bxeq	lr
200031e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
200031e8:	4601      	mov	r1, r0
200031ea:	f04f 0000 	mov.w	r0, #0
200031ee:	e01c      	b.n	2000322a <__aeabi_l2f+0x2a>

200031f0 <__aeabi_ul2f>:
200031f0:	ea50 0201 	orrs.w	r2, r0, r1
200031f4:	bf08      	it	eq
200031f6:	4770      	bxeq	lr
200031f8:	f04f 0300 	mov.w	r3, #0
200031fc:	e00a      	b.n	20003214 <__aeabi_l2f+0x14>
200031fe:	bf00      	nop

20003200 <__aeabi_l2f>:
20003200:	ea50 0201 	orrs.w	r2, r0, r1
20003204:	bf08      	it	eq
20003206:	4770      	bxeq	lr
20003208:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
2000320c:	d502      	bpl.n	20003214 <__aeabi_l2f+0x14>
2000320e:	4240      	negs	r0, r0
20003210:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
20003214:	ea5f 0c01 	movs.w	ip, r1
20003218:	bf02      	ittt	eq
2000321a:	4684      	moveq	ip, r0
2000321c:	4601      	moveq	r1, r0
2000321e:	2000      	moveq	r0, #0
20003220:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
20003224:	bf08      	it	eq
20003226:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
2000322a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
2000322e:	fabc f28c 	clz	r2, ip
20003232:	3a08      	subs	r2, #8
20003234:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
20003238:	db10      	blt.n	2000325c <__aeabi_l2f+0x5c>
2000323a:	fa01 fc02 	lsl.w	ip, r1, r2
2000323e:	4463      	add	r3, ip
20003240:	fa00 fc02 	lsl.w	ip, r0, r2
20003244:	f1c2 0220 	rsb	r2, r2, #32
20003248:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
2000324c:	fa20 f202 	lsr.w	r2, r0, r2
20003250:	eb43 0002 	adc.w	r0, r3, r2
20003254:	bf08      	it	eq
20003256:	f020 0001 	biceq.w	r0, r0, #1
2000325a:	4770      	bx	lr
2000325c:	f102 0220 	add.w	r2, r2, #32
20003260:	fa01 fc02 	lsl.w	ip, r1, r2
20003264:	f1c2 0220 	rsb	r2, r2, #32
20003268:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
2000326c:	fa21 f202 	lsr.w	r2, r1, r2
20003270:	eb43 0002 	adc.w	r0, r3, r2
20003274:	bf08      	it	eq
20003276:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
2000327a:	4770      	bx	lr

2000327c <__aeabi_fmul>:
2000327c:	f04f 0cff 	mov.w	ip, #255	; 0xff
20003280:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
20003284:	bf1e      	ittt	ne
20003286:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
2000328a:	ea92 0f0c 	teqne	r2, ip
2000328e:	ea93 0f0c 	teqne	r3, ip
20003292:	d06f      	beq.n	20003374 <__aeabi_fmul+0xf8>
20003294:	441a      	add	r2, r3
20003296:	ea80 0c01 	eor.w	ip, r0, r1
2000329a:	0240      	lsls	r0, r0, #9
2000329c:	bf18      	it	ne
2000329e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
200032a2:	d01e      	beq.n	200032e2 <__aeabi_fmul+0x66>
200032a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
200032a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
200032ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
200032b0:	fba0 3101 	umull	r3, r1, r0, r1
200032b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
200032b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
200032bc:	bf3e      	ittt	cc
200032be:	0049      	lslcc	r1, r1, #1
200032c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
200032c4:	005b      	lslcc	r3, r3, #1
200032c6:	ea40 0001 	orr.w	r0, r0, r1
200032ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
200032ce:	2afd      	cmp	r2, #253	; 0xfd
200032d0:	d81d      	bhi.n	2000330e <__aeabi_fmul+0x92>
200032d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
200032d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
200032da:	bf08      	it	eq
200032dc:	f020 0001 	biceq.w	r0, r0, #1
200032e0:	4770      	bx	lr
200032e2:	f090 0f00 	teq	r0, #0
200032e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
200032ea:	bf08      	it	eq
200032ec:	0249      	lsleq	r1, r1, #9
200032ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
200032f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
200032f6:	3a7f      	subs	r2, #127	; 0x7f
200032f8:	bfc2      	ittt	gt
200032fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
200032fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
20003302:	4770      	bxgt	lr
20003304:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
20003308:	f04f 0300 	mov.w	r3, #0
2000330c:	3a01      	subs	r2, #1
2000330e:	dc5d      	bgt.n	200033cc <__aeabi_fmul+0x150>
20003310:	f112 0f19 	cmn.w	r2, #25
20003314:	bfdc      	itt	le
20003316:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
2000331a:	4770      	bxle	lr
2000331c:	f1c2 0200 	rsb	r2, r2, #0
20003320:	0041      	lsls	r1, r0, #1
20003322:	fa21 f102 	lsr.w	r1, r1, r2
20003326:	f1c2 0220 	rsb	r2, r2, #32
2000332a:	fa00 fc02 	lsl.w	ip, r0, r2
2000332e:	ea5f 0031 	movs.w	r0, r1, rrx
20003332:	f140 0000 	adc.w	r0, r0, #0
20003336:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
2000333a:	bf08      	it	eq
2000333c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
20003340:	4770      	bx	lr
20003342:	f092 0f00 	teq	r2, #0
20003346:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
2000334a:	bf02      	ittt	eq
2000334c:	0040      	lsleq	r0, r0, #1
2000334e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
20003352:	3a01      	subeq	r2, #1
20003354:	d0f9      	beq.n	2000334a <__aeabi_fmul+0xce>
20003356:	ea40 000c 	orr.w	r0, r0, ip
2000335a:	f093 0f00 	teq	r3, #0
2000335e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
20003362:	bf02      	ittt	eq
20003364:	0049      	lsleq	r1, r1, #1
20003366:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
2000336a:	3b01      	subeq	r3, #1
2000336c:	d0f9      	beq.n	20003362 <__aeabi_fmul+0xe6>
2000336e:	ea41 010c 	orr.w	r1, r1, ip
20003372:	e78f      	b.n	20003294 <__aeabi_fmul+0x18>
20003374:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
20003378:	ea92 0f0c 	teq	r2, ip
2000337c:	bf18      	it	ne
2000337e:	ea93 0f0c 	teqne	r3, ip
20003382:	d00a      	beq.n	2000339a <__aeabi_fmul+0x11e>
20003384:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
20003388:	bf18      	it	ne
2000338a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
2000338e:	d1d8      	bne.n	20003342 <__aeabi_fmul+0xc6>
20003390:	ea80 0001 	eor.w	r0, r0, r1
20003394:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
20003398:	4770      	bx	lr
2000339a:	f090 0f00 	teq	r0, #0
2000339e:	bf17      	itett	ne
200033a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
200033a4:	4608      	moveq	r0, r1
200033a6:	f091 0f00 	teqne	r1, #0
200033aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
200033ae:	d014      	beq.n	200033da <__aeabi_fmul+0x15e>
200033b0:	ea92 0f0c 	teq	r2, ip
200033b4:	d101      	bne.n	200033ba <__aeabi_fmul+0x13e>
200033b6:	0242      	lsls	r2, r0, #9
200033b8:	d10f      	bne.n	200033da <__aeabi_fmul+0x15e>
200033ba:	ea93 0f0c 	teq	r3, ip
200033be:	d103      	bne.n	200033c8 <__aeabi_fmul+0x14c>
200033c0:	024b      	lsls	r3, r1, #9
200033c2:	bf18      	it	ne
200033c4:	4608      	movne	r0, r1
200033c6:	d108      	bne.n	200033da <__aeabi_fmul+0x15e>
200033c8:	ea80 0001 	eor.w	r0, r0, r1
200033cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
200033d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
200033d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
200033d8:	4770      	bx	lr
200033da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
200033de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
200033e2:	4770      	bx	lr

200033e4 <__aeabi_fdiv>:
200033e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
200033e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
200033ec:	bf1e      	ittt	ne
200033ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
200033f2:	ea92 0f0c 	teqne	r2, ip
200033f6:	ea93 0f0c 	teqne	r3, ip
200033fa:	d069      	beq.n	200034d0 <__aeabi_fdiv+0xec>
200033fc:	eba2 0203 	sub.w	r2, r2, r3
20003400:	ea80 0c01 	eor.w	ip, r0, r1
20003404:	0249      	lsls	r1, r1, #9
20003406:	ea4f 2040 	mov.w	r0, r0, lsl #9
2000340a:	d037      	beq.n	2000347c <__aeabi_fdiv+0x98>
2000340c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
20003410:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
20003414:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
20003418:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
2000341c:	428b      	cmp	r3, r1
2000341e:	bf38      	it	cc
20003420:	005b      	lslcc	r3, r3, #1
20003422:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
20003426:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
2000342a:	428b      	cmp	r3, r1
2000342c:	bf24      	itt	cs
2000342e:	1a5b      	subcs	r3, r3, r1
20003430:	ea40 000c 	orrcs.w	r0, r0, ip
20003434:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
20003438:	bf24      	itt	cs
2000343a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
2000343e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
20003442:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
20003446:	bf24      	itt	cs
20003448:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
2000344c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
20003450:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
20003454:	bf24      	itt	cs
20003456:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
2000345a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
2000345e:	011b      	lsls	r3, r3, #4
20003460:	bf18      	it	ne
20003462:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
20003466:	d1e0      	bne.n	2000342a <__aeabi_fdiv+0x46>
20003468:	2afd      	cmp	r2, #253	; 0xfd
2000346a:	f63f af50 	bhi.w	2000330e <__aeabi_fmul+0x92>
2000346e:	428b      	cmp	r3, r1
20003470:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
20003474:	bf08      	it	eq
20003476:	f020 0001 	biceq.w	r0, r0, #1
2000347a:	4770      	bx	lr
2000347c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
20003480:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
20003484:	327f      	adds	r2, #127	; 0x7f
20003486:	bfc2      	ittt	gt
20003488:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
2000348c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
20003490:	4770      	bxgt	lr
20003492:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
20003496:	f04f 0300 	mov.w	r3, #0
2000349a:	3a01      	subs	r2, #1
2000349c:	e737      	b.n	2000330e <__aeabi_fmul+0x92>
2000349e:	f092 0f00 	teq	r2, #0
200034a2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
200034a6:	bf02      	ittt	eq
200034a8:	0040      	lsleq	r0, r0, #1
200034aa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
200034ae:	3a01      	subeq	r2, #1
200034b0:	d0f9      	beq.n	200034a6 <__aeabi_fdiv+0xc2>
200034b2:	ea40 000c 	orr.w	r0, r0, ip
200034b6:	f093 0f00 	teq	r3, #0
200034ba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
200034be:	bf02      	ittt	eq
200034c0:	0049      	lsleq	r1, r1, #1
200034c2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
200034c6:	3b01      	subeq	r3, #1
200034c8:	d0f9      	beq.n	200034be <__aeabi_fdiv+0xda>
200034ca:	ea41 010c 	orr.w	r1, r1, ip
200034ce:	e795      	b.n	200033fc <__aeabi_fdiv+0x18>
200034d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
200034d4:	ea92 0f0c 	teq	r2, ip
200034d8:	d108      	bne.n	200034ec <__aeabi_fdiv+0x108>
200034da:	0242      	lsls	r2, r0, #9
200034dc:	f47f af7d 	bne.w	200033da <__aeabi_fmul+0x15e>
200034e0:	ea93 0f0c 	teq	r3, ip
200034e4:	f47f af70 	bne.w	200033c8 <__aeabi_fmul+0x14c>
200034e8:	4608      	mov	r0, r1
200034ea:	e776      	b.n	200033da <__aeabi_fmul+0x15e>
200034ec:	ea93 0f0c 	teq	r3, ip
200034f0:	d104      	bne.n	200034fc <__aeabi_fdiv+0x118>
200034f2:	024b      	lsls	r3, r1, #9
200034f4:	f43f af4c 	beq.w	20003390 <__aeabi_fmul+0x114>
200034f8:	4608      	mov	r0, r1
200034fa:	e76e      	b.n	200033da <__aeabi_fmul+0x15e>
200034fc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
20003500:	bf18      	it	ne
20003502:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
20003506:	d1ca      	bne.n	2000349e <__aeabi_fdiv+0xba>
20003508:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
2000350c:	f47f af5c 	bne.w	200033c8 <__aeabi_fmul+0x14c>
20003510:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
20003514:	f47f af3c 	bne.w	20003390 <__aeabi_fmul+0x114>
20003518:	e75f      	b.n	200033da <__aeabi_fmul+0x15e>
2000351a:	bf00      	nop

2000351c <__gesf2>:
2000351c:	f04f 3cff 	mov.w	ip, #4294967295
20003520:	e006      	b.n	20003530 <__cmpsf2+0x4>
20003522:	bf00      	nop

20003524 <__lesf2>:
20003524:	f04f 0c01 	mov.w	ip, #1
20003528:	e002      	b.n	20003530 <__cmpsf2+0x4>
2000352a:	bf00      	nop

2000352c <__cmpsf2>:
2000352c:	f04f 0c01 	mov.w	ip, #1
20003530:	f84d cd04 	str.w	ip, [sp, #-4]!
20003534:	ea4f 0240 	mov.w	r2, r0, lsl #1
20003538:	ea4f 0341 	mov.w	r3, r1, lsl #1
2000353c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
20003540:	bf18      	it	ne
20003542:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
20003546:	d011      	beq.n	2000356c <__cmpsf2+0x40>
20003548:	b001      	add	sp, #4
2000354a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
2000354e:	bf18      	it	ne
20003550:	ea90 0f01 	teqne	r0, r1
20003554:	bf58      	it	pl
20003556:	ebb2 0003 	subspl.w	r0, r2, r3
2000355a:	bf88      	it	hi
2000355c:	17c8      	asrhi	r0, r1, #31
2000355e:	bf38      	it	cc
20003560:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
20003564:	bf18      	it	ne
20003566:	f040 0001 	orrne.w	r0, r0, #1
2000356a:	4770      	bx	lr
2000356c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
20003570:	d102      	bne.n	20003578 <__cmpsf2+0x4c>
20003572:	ea5f 2c40 	movs.w	ip, r0, lsl #9
20003576:	d105      	bne.n	20003584 <__cmpsf2+0x58>
20003578:	ea7f 6c23 	mvns.w	ip, r3, asr #24
2000357c:	d1e4      	bne.n	20003548 <__cmpsf2+0x1c>
2000357e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
20003582:	d0e1      	beq.n	20003548 <__cmpsf2+0x1c>
20003584:	f85d 0b04 	ldr.w	r0, [sp], #4
20003588:	4770      	bx	lr
2000358a:	bf00      	nop

2000358c <__aeabi_cfrcmple>:
2000358c:	4684      	mov	ip, r0
2000358e:	4608      	mov	r0, r1
20003590:	4661      	mov	r1, ip
20003592:	e7ff      	b.n	20003594 <__aeabi_cfcmpeq>

20003594 <__aeabi_cfcmpeq>:
20003594:	b50f      	push	{r0, r1, r2, r3, lr}
20003596:	f7ff ffc9 	bl	2000352c <__cmpsf2>
2000359a:	2800      	cmp	r0, #0
2000359c:	bf48      	it	mi
2000359e:	f110 0f00 	cmnmi.w	r0, #0
200035a2:	bd0f      	pop	{r0, r1, r2, r3, pc}

200035a4 <__aeabi_fcmpeq>:
200035a4:	f84d ed08 	str.w	lr, [sp, #-8]!
200035a8:	f7ff fff4 	bl	20003594 <__aeabi_cfcmpeq>
200035ac:	bf0c      	ite	eq
200035ae:	2001      	moveq	r0, #1
200035b0:	2000      	movne	r0, #0
200035b2:	f85d fb08 	ldr.w	pc, [sp], #8
200035b6:	bf00      	nop

200035b8 <__aeabi_fcmplt>:
200035b8:	f84d ed08 	str.w	lr, [sp, #-8]!
200035bc:	f7ff ffea 	bl	20003594 <__aeabi_cfcmpeq>
200035c0:	bf34      	ite	cc
200035c2:	2001      	movcc	r0, #1
200035c4:	2000      	movcs	r0, #0
200035c6:	f85d fb08 	ldr.w	pc, [sp], #8
200035ca:	bf00      	nop

200035cc <__aeabi_fcmple>:
200035cc:	f84d ed08 	str.w	lr, [sp, #-8]!
200035d0:	f7ff ffe0 	bl	20003594 <__aeabi_cfcmpeq>
200035d4:	bf94      	ite	ls
200035d6:	2001      	movls	r0, #1
200035d8:	2000      	movhi	r0, #0
200035da:	f85d fb08 	ldr.w	pc, [sp], #8
200035de:	bf00      	nop

200035e0 <__aeabi_fcmpge>:
200035e0:	f84d ed08 	str.w	lr, [sp, #-8]!
200035e4:	f7ff ffd2 	bl	2000358c <__aeabi_cfrcmple>
200035e8:	bf94      	ite	ls
200035ea:	2001      	movls	r0, #1
200035ec:	2000      	movhi	r0, #0
200035ee:	f85d fb08 	ldr.w	pc, [sp], #8
200035f2:	bf00      	nop

200035f4 <__aeabi_fcmpgt>:
200035f4:	f84d ed08 	str.w	lr, [sp, #-8]!
200035f8:	f7ff ffc8 	bl	2000358c <__aeabi_cfrcmple>
200035fc:	bf34      	ite	cc
200035fe:	2001      	movcc	r0, #1
20003600:	2000      	movcs	r0, #0
20003602:	f85d fb08 	ldr.w	pc, [sp], #8
20003606:	bf00      	nop

20003608 <__errno>:
20003608:	f244 2350 	movw	r3, #16976	; 0x4250
2000360c:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003610:	6818      	ldr	r0, [r3, #0]
20003612:	4770      	bx	lr

20003614 <__libc_init_array>:
20003614:	b570      	push	{r4, r5, r6, lr}
20003616:	f244 2638 	movw	r6, #16952	; 0x4238
2000361a:	f244 2538 	movw	r5, #16952	; 0x4238
2000361e:	f2c2 0600 	movt	r6, #8192	; 0x2000
20003622:	f2c2 0500 	movt	r5, #8192	; 0x2000
20003626:	1b76      	subs	r6, r6, r5
20003628:	10b6      	asrs	r6, r6, #2
2000362a:	d006      	beq.n	2000363a <__libc_init_array+0x26>
2000362c:	2400      	movs	r4, #0
2000362e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
20003632:	3401      	adds	r4, #1
20003634:	4798      	blx	r3
20003636:	42a6      	cmp	r6, r4
20003638:	d8f9      	bhi.n	2000362e <__libc_init_array+0x1a>
2000363a:	f244 2538 	movw	r5, #16952	; 0x4238
2000363e:	f244 263c 	movw	r6, #16956	; 0x423c
20003642:	f2c2 0500 	movt	r5, #8192	; 0x2000
20003646:	f2c2 0600 	movt	r6, #8192	; 0x2000
2000364a:	1b76      	subs	r6, r6, r5
2000364c:	f000 fde8 	bl	20004220 <_init>
20003650:	10b6      	asrs	r6, r6, #2
20003652:	d006      	beq.n	20003662 <__libc_init_array+0x4e>
20003654:	2400      	movs	r4, #0
20003656:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
2000365a:	3401      	adds	r4, #1
2000365c:	4798      	blx	r3
2000365e:	42a6      	cmp	r6, r4
20003660:	d8f9      	bhi.n	20003656 <__libc_init_array+0x42>
20003662:	bd70      	pop	{r4, r5, r6, pc}

20003664 <memset>:
20003664:	2a03      	cmp	r2, #3
20003666:	b2c9      	uxtb	r1, r1
20003668:	b430      	push	{r4, r5}
2000366a:	d807      	bhi.n	2000367c <memset+0x18>
2000366c:	b122      	cbz	r2, 20003678 <memset+0x14>
2000366e:	2300      	movs	r3, #0
20003670:	54c1      	strb	r1, [r0, r3]
20003672:	3301      	adds	r3, #1
20003674:	4293      	cmp	r3, r2
20003676:	d1fb      	bne.n	20003670 <memset+0xc>
20003678:	bc30      	pop	{r4, r5}
2000367a:	4770      	bx	lr
2000367c:	eb00 0c02 	add.w	ip, r0, r2
20003680:	4603      	mov	r3, r0
20003682:	e001      	b.n	20003688 <memset+0x24>
20003684:	f803 1c01 	strb.w	r1, [r3, #-1]
20003688:	f003 0403 	and.w	r4, r3, #3
2000368c:	461a      	mov	r2, r3
2000368e:	3301      	adds	r3, #1
20003690:	2c00      	cmp	r4, #0
20003692:	d1f7      	bne.n	20003684 <memset+0x20>
20003694:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
20003698:	ebc2 040c 	rsb	r4, r2, ip
2000369c:	fb03 f301 	mul.w	r3, r3, r1
200036a0:	e01f      	b.n	200036e2 <memset+0x7e>
200036a2:	f842 3c40 	str.w	r3, [r2, #-64]
200036a6:	f842 3c3c 	str.w	r3, [r2, #-60]
200036aa:	f842 3c38 	str.w	r3, [r2, #-56]
200036ae:	f842 3c34 	str.w	r3, [r2, #-52]
200036b2:	f842 3c30 	str.w	r3, [r2, #-48]
200036b6:	f842 3c2c 	str.w	r3, [r2, #-44]
200036ba:	f842 3c28 	str.w	r3, [r2, #-40]
200036be:	f842 3c24 	str.w	r3, [r2, #-36]
200036c2:	f842 3c20 	str.w	r3, [r2, #-32]
200036c6:	f842 3c1c 	str.w	r3, [r2, #-28]
200036ca:	f842 3c18 	str.w	r3, [r2, #-24]
200036ce:	f842 3c14 	str.w	r3, [r2, #-20]
200036d2:	f842 3c10 	str.w	r3, [r2, #-16]
200036d6:	f842 3c0c 	str.w	r3, [r2, #-12]
200036da:	f842 3c08 	str.w	r3, [r2, #-8]
200036de:	f842 3c04 	str.w	r3, [r2, #-4]
200036e2:	4615      	mov	r5, r2
200036e4:	3240      	adds	r2, #64	; 0x40
200036e6:	2c3f      	cmp	r4, #63	; 0x3f
200036e8:	f1a4 0440 	sub.w	r4, r4, #64	; 0x40
200036ec:	dcd9      	bgt.n	200036a2 <memset+0x3e>
200036ee:	462a      	mov	r2, r5
200036f0:	ebc5 040c 	rsb	r4, r5, ip
200036f4:	e007      	b.n	20003706 <memset+0xa2>
200036f6:	f842 3c10 	str.w	r3, [r2, #-16]
200036fa:	f842 3c0c 	str.w	r3, [r2, #-12]
200036fe:	f842 3c08 	str.w	r3, [r2, #-8]
20003702:	f842 3c04 	str.w	r3, [r2, #-4]
20003706:	4615      	mov	r5, r2
20003708:	3210      	adds	r2, #16
2000370a:	2c0f      	cmp	r4, #15
2000370c:	f1a4 0410 	sub.w	r4, r4, #16
20003710:	dcf1      	bgt.n	200036f6 <memset+0x92>
20003712:	462a      	mov	r2, r5
20003714:	ebc5 050c 	rsb	r5, r5, ip
20003718:	e001      	b.n	2000371e <memset+0xba>
2000371a:	f842 3c04 	str.w	r3, [r2, #-4]
2000371e:	4614      	mov	r4, r2
20003720:	3204      	adds	r2, #4
20003722:	2d03      	cmp	r5, #3
20003724:	f1a5 0504 	sub.w	r5, r5, #4
20003728:	dcf7      	bgt.n	2000371a <memset+0xb6>
2000372a:	e001      	b.n	20003730 <memset+0xcc>
2000372c:	f804 1b01 	strb.w	r1, [r4], #1
20003730:	4564      	cmp	r4, ip
20003732:	d3fb      	bcc.n	2000372c <memset+0xc8>
20003734:	e7a0      	b.n	20003678 <memset+0x14>
20003736:	bf00      	nop

20003738 <__isnand>:
20003738:	4602      	mov	r2, r0
2000373a:	4240      	negs	r0, r0
2000373c:	4310      	orrs	r0, r2
2000373e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
20003742:	ea41 70d0 	orr.w	r0, r1, r0, lsr #31
20003746:	f1c0 40fe 	rsb	r0, r0, #2130706432	; 0x7f000000
2000374a:	f500 0070 	add.w	r0, r0, #15728640	; 0xf00000
2000374e:	0fc0      	lsrs	r0, r0, #31
20003750:	4770      	bx	lr
20003752:	bf00      	nop
20003754:	0000      	lsls	r0, r0, #0
	...

20003758 <exp>:
20003758:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
2000375c:	b08a      	sub	sp, #40	; 0x28
2000375e:	4606      	mov	r6, r0
20003760:	460f      	mov	r7, r1
20003762:	f000 f8f9 	bl	20003958 <__ieee754_exp>
20003766:	f244 3444 	movw	r4, #17220	; 0x4344
2000376a:	f2c2 0400 	movt	r4, #8192	; 0x2000
2000376e:	f994 3000 	ldrsb.w	r3, [r4]
20003772:	f1b3 3fff 	cmp.w	r3, #4294967295
20003776:	4680      	mov	r8, r0
20003778:	4689      	mov	r9, r1
2000377a:	d038      	beq.n	200037ee <exp+0x96>
2000377c:	4630      	mov	r0, r6
2000377e:	4639      	mov	r1, r7
20003780:	f000 fc8a 	bl	20004098 <finite>
20003784:	2800      	cmp	r0, #0
20003786:	d032      	beq.n	200037ee <exp+0x96>
20003788:	4630      	mov	r0, r6
2000378a:	4639      	mov	r1, r7
2000378c:	a32e      	add	r3, pc, #184	; (adr r3, 20003848 <exp+0xf0>)
2000378e:	e9d3 2300 	ldrd	r2, r3, [r3]
20003792:	f7ff fc13 	bl	20002fbc <__aeabi_dcmpgt>
20003796:	2800      	cmp	r0, #0
20003798:	d12e      	bne.n	200037f8 <exp+0xa0>
2000379a:	4630      	mov	r0, r6
2000379c:	4639      	mov	r1, r7
2000379e:	a32c      	add	r3, pc, #176	; (adr r3, 20003850 <exp+0xf8>)
200037a0:	e9d3 2300 	ldrd	r2, r3, [r3]
200037a4:	f7ff fbec 	bl	20002f80 <__aeabi_dcmplt>
200037a8:	b308      	cbz	r0, 200037ee <exp+0x96>
200037aa:	f994 2000 	ldrsb.w	r2, [r4]
200037ae:	f244 13e0 	movw	r3, #16864	; 0x41e0
200037b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
200037b6:	2000      	movs	r0, #0
200037b8:	2100      	movs	r1, #0
200037ba:	9301      	str	r3, [sp, #4]
200037bc:	2304      	movs	r3, #4
200037be:	9300      	str	r3, [sp, #0]
200037c0:	2300      	movs	r3, #0
200037c2:	2a02      	cmp	r2, #2
200037c4:	e9cd 6702 	strd	r6, r7, [sp, #8]
200037c8:	9308      	str	r3, [sp, #32]
200037ca:	e9cd 0106 	strd	r0, r1, [sp, #24]
200037ce:	e9cd 6704 	strd	r6, r7, [sp, #16]
200037d2:	d032      	beq.n	2000383a <exp+0xe2>
200037d4:	4668      	mov	r0, sp
200037d6:	f000 fc67 	bl	200040a8 <matherr>
200037da:	2800      	cmp	r0, #0
200037dc:	d02d      	beq.n	2000383a <exp+0xe2>
200037de:	9b08      	ldr	r3, [sp, #32]
200037e0:	b11b      	cbz	r3, 200037ea <exp+0x92>
200037e2:	f7ff ff11 	bl	20003608 <__errno>
200037e6:	9b08      	ldr	r3, [sp, #32]
200037e8:	6003      	str	r3, [r0, #0]
200037ea:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
200037ee:	4640      	mov	r0, r8
200037f0:	4649      	mov	r1, r9
200037f2:	b00a      	add	sp, #40	; 0x28
200037f4:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
200037f8:	7822      	ldrb	r2, [r4, #0]
200037fa:	f244 13e0 	movw	r3, #16864	; 0x41e0
200037fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003802:	e9cd 6702 	strd	r6, r7, [sp, #8]
20003806:	9301      	str	r3, [sp, #4]
20003808:	2303      	movs	r3, #3
2000380a:	e9cd 6704 	strd	r6, r7, [sp, #16]
2000380e:	9300      	str	r3, [sp, #0]
20003810:	2300      	movs	r3, #0
20003812:	9308      	str	r3, [sp, #32]
20003814:	b942      	cbnz	r2, 20003828 <exp+0xd0>
20003816:	f64f 73ff 	movw	r3, #65535	; 0xffff
2000381a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
2000381e:	f2c4 73ef 	movt	r3, #18415	; 0x47ef
20003822:	e9cd 2306 	strd	r2, r3, [sp, #24]
20003826:	e7d5      	b.n	200037d4 <exp+0x7c>
20003828:	2000      	movs	r0, #0
2000382a:	2a02      	cmp	r2, #2
2000382c:	f240 0100 	movw	r1, #0
20003830:	f6c7 71f0 	movt	r1, #32752	; 0x7ff0
20003834:	e9cd 0106 	strd	r0, r1, [sp, #24]
20003838:	d1cc      	bne.n	200037d4 <exp+0x7c>
2000383a:	f7ff fee5 	bl	20003608 <__errno>
2000383e:	2322      	movs	r3, #34	; 0x22
20003840:	6003      	str	r3, [r0, #0]
20003842:	e7cc      	b.n	200037de <exp+0x86>
20003844:	f3af 8000 	nop.w
20003848:	fefa39ef 	.word	0xfefa39ef
2000384c:	40862e42 	.word	0x40862e42
20003850:	d52d3051 	.word	0xd52d3051
20003854:	c0874910 	.word	0xc0874910

20003858 <log>:
20003858:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
2000385c:	b08b      	sub	sp, #44	; 0x2c
2000385e:	4606      	mov	r6, r0
20003860:	460f      	mov	r7, r1
20003862:	f000 fa05 	bl	20003c70 <__ieee754_log>
20003866:	f244 3444 	movw	r4, #17220	; 0x4344
2000386a:	f2c2 0400 	movt	r4, #8192	; 0x2000
2000386e:	f994 3000 	ldrsb.w	r3, [r4]
20003872:	f1b3 3fff 	cmp.w	r3, #4294967295
20003876:	4680      	mov	r8, r0
20003878:	4689      	mov	r9, r1
2000387a:	d038      	beq.n	200038ee <log+0x96>
2000387c:	4630      	mov	r0, r6
2000387e:	4639      	mov	r1, r7
20003880:	f7ff ff5a 	bl	20003738 <__isnand>
20003884:	4605      	mov	r5, r0
20003886:	2800      	cmp	r0, #0
20003888:	d131      	bne.n	200038ee <log+0x96>
2000388a:	4630      	mov	r0, r6
2000388c:	4639      	mov	r1, r7
2000388e:	2200      	movs	r2, #0
20003890:	2300      	movs	r3, #0
20003892:	f7ff fb93 	bl	20002fbc <__aeabi_dcmpgt>
20003896:	2800      	cmp	r0, #0
20003898:	d129      	bne.n	200038ee <log+0x96>
2000389a:	7824      	ldrb	r4, [r4, #0]
2000389c:	f244 13e4 	movw	r3, #16868	; 0x41e4
200038a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
200038a4:	9508      	str	r5, [sp, #32]
200038a6:	9301      	str	r3, [sp, #4]
200038a8:	e9cd 6702 	strd	r6, r7, [sp, #8]
200038ac:	e9cd 6704 	strd	r6, r7, [sp, #16]
200038b0:	2c00      	cmp	r4, #0
200038b2:	d021      	beq.n	200038f8 <log+0xa0>
200038b4:	f240 0300 	movw	r3, #0
200038b8:	2200      	movs	r2, #0
200038ba:	f6cf 73f0 	movt	r3, #65520	; 0xfff0
200038be:	4630      	mov	r0, r6
200038c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
200038c4:	4639      	mov	r1, r7
200038c6:	2200      	movs	r2, #0
200038c8:	2300      	movs	r3, #0
200038ca:	f7ff fb4f 	bl	20002f6c <__aeabi_dcmpeq>
200038ce:	2800      	cmp	r0, #0
200038d0:	d022      	beq.n	20003918 <log+0xc0>
200038d2:	2302      	movs	r3, #2
200038d4:	9300      	str	r3, [sp, #0]
200038d6:	429c      	cmp	r4, r3
200038d8:	d034      	beq.n	20003944 <log+0xec>
200038da:	4668      	mov	r0, sp
200038dc:	f000 fbe4 	bl	200040a8 <matherr>
200038e0:	2800      	cmp	r0, #0
200038e2:	d02f      	beq.n	20003944 <log+0xec>
200038e4:	9b08      	ldr	r3, [sp, #32]
200038e6:	2b00      	cmp	r3, #0
200038e8:	d127      	bne.n	2000393a <log+0xe2>
200038ea:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
200038ee:	4640      	mov	r0, r8
200038f0:	4649      	mov	r1, r9
200038f2:	b00b      	add	sp, #44	; 0x2c
200038f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
200038f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
200038fc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
20003900:	f2cc 73ef 	movt	r3, #51183	; 0xc7ef
20003904:	4630      	mov	r0, r6
20003906:	e9cd 2306 	strd	r2, r3, [sp, #24]
2000390a:	4639      	mov	r1, r7
2000390c:	2200      	movs	r2, #0
2000390e:	2300      	movs	r3, #0
20003910:	f7ff fb2c 	bl	20002f6c <__aeabi_dcmpeq>
20003914:	2800      	cmp	r0, #0
20003916:	d1dc      	bne.n	200038d2 <log+0x7a>
20003918:	2301      	movs	r3, #1
2000391a:	2c02      	cmp	r4, #2
2000391c:	9300      	str	r3, [sp, #0]
2000391e:	d016      	beq.n	2000394e <log+0xf6>
20003920:	4668      	mov	r0, sp
20003922:	f000 fbc1 	bl	200040a8 <matherr>
20003926:	b190      	cbz	r0, 2000394e <log+0xf6>
20003928:	f244 10e8 	movw	r0, #16872	; 0x41e8
2000392c:	f2c2 0000 	movt	r0, #8192	; 0x2000
20003930:	f000 fbbc 	bl	200040ac <nan>
20003934:	e9cd 0106 	strd	r0, r1, [sp, #24]
20003938:	e7d4      	b.n	200038e4 <log+0x8c>
2000393a:	f7ff fe65 	bl	20003608 <__errno>
2000393e:	9b08      	ldr	r3, [sp, #32]
20003940:	6003      	str	r3, [r0, #0]
20003942:	e7d2      	b.n	200038ea <log+0x92>
20003944:	f7ff fe60 	bl	20003608 <__errno>
20003948:	2322      	movs	r3, #34	; 0x22
2000394a:	6003      	str	r3, [r0, #0]
2000394c:	e7ca      	b.n	200038e4 <log+0x8c>
2000394e:	f7ff fe5b 	bl	20003608 <__errno>
20003952:	2321      	movs	r3, #33	; 0x21
20003954:	6003      	str	r3, [r0, #0]
20003956:	e7e7      	b.n	20003928 <log+0xd0>

20003958 <__ieee754_exp>:
20003958:	f642 6341 	movw	r3, #11841	; 0x2e41
2000395c:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
20003960:	f2c4 0386 	movt	r3, #16518	; 0x4086
20003964:	429a      	cmp	r2, r3
20003966:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2000396a:	4604      	mov	r4, r0
2000396c:	b083      	sub	sp, #12
2000396e:	460d      	mov	r5, r1
20003970:	4680      	mov	r8, r0
20003972:	4689      	mov	r9, r1
20003974:	ea4f 77d1 	mov.w	r7, r1, lsr #31
20003978:	d916      	bls.n	200039a8 <__ieee754_exp+0x50>
2000397a:	f64f 73ff 	movw	r3, #65535	; 0xffff
2000397e:	f6c7 73ef 	movt	r3, #32751	; 0x7fef
20003982:	429a      	cmp	r2, r3
20003984:	d938      	bls.n	200039f8 <__ieee754_exp+0xa0>
20003986:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
2000398a:	4602      	mov	r2, r0
2000398c:	f42c 0c70 	bic.w	ip, ip, #15728640	; 0xf00000
20003990:	460b      	mov	r3, r1
20003992:	ea5c 0c00 	orrs.w	ip, ip, r0
20003996:	d12a      	bne.n	200039ee <__ieee754_exp+0x96>
20003998:	2f00      	cmp	r7, #0
2000399a:	f040 8138 	bne.w	20003c0e <__ieee754_exp+0x2b6>
2000399e:	4620      	mov	r0, r4
200039a0:	4629      	mov	r1, r5
200039a2:	b003      	add	sp, #12
200039a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
200039a8:	f642 6342 	movw	r3, #11842	; 0x2e42
200039ac:	f6c3 73d6 	movt	r3, #16342	; 0x3fd6
200039b0:	429a      	cmp	r2, r3
200039b2:	f200 80e2 	bhi.w	20003b7a <__ieee754_exp+0x222>
200039b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
200039ba:	f6c3 632f 	movt	r3, #15919	; 0x3e2f
200039be:	429a      	cmp	r2, r3
200039c0:	f200 80f4 	bhi.w	20003bac <__ieee754_exp+0x254>
200039c4:	a394      	add	r3, pc, #592	; (adr r3, 20003c18 <__ieee754_exp+0x2c0>)
200039c6:	e9d3 2300 	ldrd	r2, r3, [r3]
200039ca:	f7fe feb5 	bl	20002738 <__adddf3>
200039ce:	f240 0300 	movw	r3, #0
200039d2:	2200      	movs	r2, #0
200039d4:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
200039d8:	f7ff faf0 	bl	20002fbc <__aeabi_dcmpgt>
200039dc:	2800      	cmp	r0, #0
200039de:	d053      	beq.n	20003a88 <__ieee754_exp+0x130>
200039e0:	f240 0300 	movw	r3, #0
200039e4:	4620      	mov	r0, r4
200039e6:	4629      	mov	r1, r5
200039e8:	2200      	movs	r2, #0
200039ea:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
200039ee:	f7fe fea3 	bl	20002738 <__adddf3>
200039f2:	4604      	mov	r4, r0
200039f4:	460d      	mov	r5, r1
200039f6:	e7d2      	b.n	2000399e <__ieee754_exp+0x46>
200039f8:	a389      	add	r3, pc, #548	; (adr r3, 20003c20 <__ieee754_exp+0x2c8>)
200039fa:	e9d3 2300 	ldrd	r2, r3, [r3]
200039fe:	f7ff fadd 	bl	20002fbc <__aeabi_dcmpgt>
20003a02:	2800      	cmp	r0, #0
20003a04:	f040 80d4 	bne.w	20003bb0 <__ieee754_exp+0x258>
20003a08:	4620      	mov	r0, r4
20003a0a:	4629      	mov	r1, r5
20003a0c:	a386      	add	r3, pc, #536	; (adr r3, 20003c28 <__ieee754_exp+0x2d0>)
20003a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
20003a12:	f7ff fab5 	bl	20002f80 <__aeabi_dcmplt>
20003a16:	2800      	cmp	r0, #0
20003a18:	f040 80f9 	bne.w	20003c0e <__ieee754_exp+0x2b6>
20003a1c:	a384      	add	r3, pc, #528	; (adr r3, 20003c30 <__ieee754_exp+0x2d8>)
20003a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
20003a22:	4620      	mov	r0, r4
20003a24:	4629      	mov	r1, r5
20003a26:	f7ff f839 	bl	20002a9c <__aeabi_dmul>
20003a2a:	f244 13f0 	movw	r3, #16880	; 0x41f0
20003a2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
20003a32:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
20003a36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
20003a3a:	f7fe fe7d 	bl	20002738 <__adddf3>
20003a3e:	f7ff fac7 	bl	20002fd0 <__aeabi_d2iz>
20003a42:	4606      	mov	r6, r0
20003a44:	f7fe ffc4 	bl	200029d0 <__aeabi_i2d>
20003a48:	a37b      	add	r3, pc, #492	; (adr r3, 20003c38 <__ieee754_exp+0x2e0>)
20003a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
20003a4e:	4680      	mov	r8, r0
20003a50:	4689      	mov	r9, r1
20003a52:	f7ff f823 	bl	20002a9c <__aeabi_dmul>
20003a56:	4602      	mov	r2, r0
20003a58:	460b      	mov	r3, r1
20003a5a:	4620      	mov	r0, r4
20003a5c:	4629      	mov	r1, r5
20003a5e:	f7fe fe69 	bl	20002734 <__aeabi_dsub>
20003a62:	a377      	add	r3, pc, #476	; (adr r3, 20003c40 <__ieee754_exp+0x2e8>)
20003a64:	e9d3 2300 	ldrd	r2, r3, [r3]
20003a68:	e9cd 0100 	strd	r0, r1, [sp]
20003a6c:	4640      	mov	r0, r8
20003a6e:	4649      	mov	r1, r9
20003a70:	f7ff f814 	bl	20002a9c <__aeabi_dmul>
20003a74:	4682      	mov	sl, r0
20003a76:	468b      	mov	fp, r1
20003a78:	e9dd 0100 	ldrd	r0, r1, [sp]
20003a7c:	4652      	mov	r2, sl
20003a7e:	465b      	mov	r3, fp
20003a80:	f7fe fe58 	bl	20002734 <__aeabi_dsub>
20003a84:	4604      	mov	r4, r0
20003a86:	460d      	mov	r5, r1
20003a88:	4622      	mov	r2, r4
20003a8a:	462b      	mov	r3, r5
20003a8c:	4620      	mov	r0, r4
20003a8e:	4629      	mov	r1, r5
20003a90:	f7ff f804 	bl	20002a9c <__aeabi_dmul>
20003a94:	a36c      	add	r3, pc, #432	; (adr r3, 20003c48 <__ieee754_exp+0x2f0>)
20003a96:	e9d3 2300 	ldrd	r2, r3, [r3]
20003a9a:	4680      	mov	r8, r0
20003a9c:	4689      	mov	r9, r1
20003a9e:	f7fe fffd 	bl	20002a9c <__aeabi_dmul>
20003aa2:	a36b      	add	r3, pc, #428	; (adr r3, 20003c50 <__ieee754_exp+0x2f8>)
20003aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
20003aa8:	f7fe fe44 	bl	20002734 <__aeabi_dsub>
20003aac:	4642      	mov	r2, r8
20003aae:	464b      	mov	r3, r9
20003ab0:	f7fe fff4 	bl	20002a9c <__aeabi_dmul>
20003ab4:	a368      	add	r3, pc, #416	; (adr r3, 20003c58 <__ieee754_exp+0x300>)
20003ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
20003aba:	f7fe fe3d 	bl	20002738 <__adddf3>
20003abe:	4642      	mov	r2, r8
20003ac0:	464b      	mov	r3, r9
20003ac2:	f7fe ffeb 	bl	20002a9c <__aeabi_dmul>
20003ac6:	a366      	add	r3, pc, #408	; (adr r3, 20003c60 <__ieee754_exp+0x308>)
20003ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
20003acc:	f7fe fe32 	bl	20002734 <__aeabi_dsub>
20003ad0:	4642      	mov	r2, r8
20003ad2:	464b      	mov	r3, r9
20003ad4:	f7fe ffe2 	bl	20002a9c <__aeabi_dmul>
20003ad8:	a363      	add	r3, pc, #396	; (adr r3, 20003c68 <__ieee754_exp+0x310>)
20003ada:	e9d3 2300 	ldrd	r2, r3, [r3]
20003ade:	f7fe fe2b 	bl	20002738 <__adddf3>
20003ae2:	4642      	mov	r2, r8
20003ae4:	464b      	mov	r3, r9
20003ae6:	f7fe ffd9 	bl	20002a9c <__aeabi_dmul>
20003aea:	4602      	mov	r2, r0
20003aec:	460b      	mov	r3, r1
20003aee:	4620      	mov	r0, r4
20003af0:	4629      	mov	r1, r5
20003af2:	f7fe fe1f 	bl	20002734 <__aeabi_dsub>
20003af6:	4680      	mov	r8, r0
20003af8:	4689      	mov	r9, r1
20003afa:	2e00      	cmp	r6, #0
20003afc:	d062      	beq.n	20003bc4 <__ieee754_exp+0x26c>
20003afe:	4620      	mov	r0, r4
20003b00:	4629      	mov	r1, r5
20003b02:	4642      	mov	r2, r8
20003b04:	464b      	mov	r3, r9
20003b06:	f7fe ffc9 	bl	20002a9c <__aeabi_dmul>
20003b0a:	4642      	mov	r2, r8
20003b0c:	464b      	mov	r3, r9
20003b0e:	4604      	mov	r4, r0
20003b10:	460d      	mov	r5, r1
20003b12:	2000      	movs	r0, #0
20003b14:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
20003b18:	f7fe fe0c 	bl	20002734 <__aeabi_dsub>
20003b1c:	4602      	mov	r2, r0
20003b1e:	460b      	mov	r3, r1
20003b20:	4620      	mov	r0, r4
20003b22:	4629      	mov	r1, r5
20003b24:	f7ff f8e4 	bl	20002cf0 <__aeabi_ddiv>
20003b28:	4602      	mov	r2, r0
20003b2a:	460b      	mov	r3, r1
20003b2c:	4650      	mov	r0, sl
20003b2e:	4659      	mov	r1, fp
20003b30:	f7fe fe00 	bl	20002734 <__aeabi_dsub>
20003b34:	e9dd 2300 	ldrd	r2, r3, [sp]
20003b38:	f7fe fdfc 	bl	20002734 <__aeabi_dsub>
20003b3c:	460b      	mov	r3, r1
20003b3e:	f240 0100 	movw	r1, #0
20003b42:	4602      	mov	r2, r0
20003b44:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
20003b48:	2000      	movs	r0, #0
20003b4a:	f7fe fdf3 	bl	20002734 <__aeabi_dsub>
20003b4e:	f46f 737f 	mvn.w	r3, #1020	; 0x3fc
20003b52:	429e      	cmp	r6, r3
20003b54:	bfa4      	itt	ge
20003b56:	4604      	movge	r4, r0
20003b58:	eb01 5506 	addge.w	r5, r1, r6, lsl #20
20003b5c:	f6bf af1f 	bge.w	2000399e <__ieee754_exp+0x46>
20003b60:	f506 767a 	add.w	r6, r6, #1000	; 0x3e8
20003b64:	2200      	movs	r2, #0
20003b66:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
20003b6a:	eb01 5506 	add.w	r5, r1, r6, lsl #20
20003b6e:	4629      	mov	r1, r5
20003b70:	f7fe ff94 	bl	20002a9c <__aeabi_dmul>
20003b74:	4604      	mov	r4, r0
20003b76:	460d      	mov	r5, r1
20003b78:	e711      	b.n	2000399e <__ieee754_exp+0x46>
20003b7a:	f24a 23b1 	movw	r3, #41649	; 0xa2b1
20003b7e:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
20003b82:	429a      	cmp	r2, r3
20003b84:	f63f af4a 	bhi.w	20003a1c <__ieee754_exp+0xc4>
20003b88:	f244 14f0 	movw	r4, #16880	; 0x41f0
20003b8c:	427e      	negs	r6, r7
20003b8e:	f2c2 0400 	movt	r4, #8192	; 0x2000
20003b92:	1bf6      	subs	r6, r6, r7
20003b94:	eb04 04c7 	add.w	r4, r4, r7, lsl #3
20003b98:	3601      	adds	r6, #1
20003b9a:	e9d4 2300 	ldrd	r2, r3, [r4]
20003b9e:	f7fe fdc9 	bl	20002734 <__aeabi_dsub>
20003ba2:	e9d4 ab04 	ldrd	sl, fp, [r4, #16]
20003ba6:	e9cd 0100 	strd	r0, r1, [sp]
20003baa:	e765      	b.n	20003a78 <__ieee754_exp+0x120>
20003bac:	2600      	movs	r6, #0
20003bae:	e76b      	b.n	20003a88 <__ieee754_exp+0x130>
20003bb0:	a119      	add	r1, pc, #100	; (adr r1, 20003c18 <__ieee754_exp+0x2c0>)
20003bb2:	e9d1 0100 	ldrd	r0, r1, [r1]
20003bb6:	4602      	mov	r2, r0
20003bb8:	460b      	mov	r3, r1
20003bba:	f7fe ff6f 	bl	20002a9c <__aeabi_dmul>
20003bbe:	4604      	mov	r4, r0
20003bc0:	460d      	mov	r5, r1
20003bc2:	e6ec      	b.n	2000399e <__ieee754_exp+0x46>
20003bc4:	4620      	mov	r0, r4
20003bc6:	4629      	mov	r1, r5
20003bc8:	4642      	mov	r2, r8
20003bca:	464b      	mov	r3, r9
20003bcc:	f7fe ff66 	bl	20002a9c <__aeabi_dmul>
20003bd0:	2200      	movs	r2, #0
20003bd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
20003bd6:	4606      	mov	r6, r0
20003bd8:	460f      	mov	r7, r1
20003bda:	4640      	mov	r0, r8
20003bdc:	4649      	mov	r1, r9
20003bde:	f7fe fda9 	bl	20002734 <__aeabi_dsub>
20003be2:	4602      	mov	r2, r0
20003be4:	460b      	mov	r3, r1
20003be6:	4630      	mov	r0, r6
20003be8:	4639      	mov	r1, r7
20003bea:	f7ff f881 	bl	20002cf0 <__aeabi_ddiv>
20003bee:	4622      	mov	r2, r4
20003bf0:	462b      	mov	r3, r5
20003bf2:	f7fe fd9f 	bl	20002734 <__aeabi_dsub>
20003bf6:	460b      	mov	r3, r1
20003bf8:	f240 0100 	movw	r1, #0
20003bfc:	4602      	mov	r2, r0
20003bfe:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
20003c02:	2000      	movs	r0, #0
20003c04:	f7fe fd96 	bl	20002734 <__aeabi_dsub>
20003c08:	4604      	mov	r4, r0
20003c0a:	460d      	mov	r5, r1
20003c0c:	e6c7      	b.n	2000399e <__ieee754_exp+0x46>
20003c0e:	2400      	movs	r4, #0
20003c10:	2500      	movs	r5, #0
20003c12:	e6c4      	b.n	2000399e <__ieee754_exp+0x46>
20003c14:	f3af 8000 	nop.w
20003c18:	8800759c 	.word	0x8800759c
20003c1c:	7e37e43c 	.word	0x7e37e43c
20003c20:	fefa39ef 	.word	0xfefa39ef
20003c24:	40862e42 	.word	0x40862e42
20003c28:	d52d3051 	.word	0xd52d3051
20003c2c:	c0874910 	.word	0xc0874910
20003c30:	652b82fe 	.word	0x652b82fe
20003c34:	3ff71547 	.word	0x3ff71547
20003c38:	fee00000 	.word	0xfee00000
20003c3c:	3fe62e42 	.word	0x3fe62e42
20003c40:	35793c76 	.word	0x35793c76
20003c44:	3dea39ef 	.word	0x3dea39ef
20003c48:	72bea4d0 	.word	0x72bea4d0
20003c4c:	3e663769 	.word	0x3e663769
20003c50:	c5d26bf1 	.word	0xc5d26bf1
20003c54:	3ebbbd41 	.word	0x3ebbbd41
20003c58:	af25de2c 	.word	0xaf25de2c
20003c5c:	3f11566a 	.word	0x3f11566a
20003c60:	16bebd93 	.word	0x16bebd93
20003c64:	3f66c16c 	.word	0x3f66c16c
20003c68:	5555553e 	.word	0x5555553e
20003c6c:	3fc55555 	.word	0x3fc55555

20003c70 <__ieee754_log>:
20003c70:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
20003c74:	460b      	mov	r3, r1
20003c76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
20003c7a:	4680      	mov	r8, r0
20003c7c:	b087      	sub	sp, #28
20003c7e:	4689      	mov	r9, r1
20003c80:	4604      	mov	r4, r0
20003c82:	460d      	mov	r5, r1
20003c84:	db3e      	blt.n	20003d04 <__ieee754_log+0x94>
20003c86:	f64f 72ff 	movw	r2, #65535	; 0xffff
20003c8a:	2600      	movs	r6, #0
20003c8c:	f6c7 72ef 	movt	r2, #32751	; 0x7fef
20003c90:	4293      	cmp	r3, r2
20003c92:	dc51      	bgt.n	20003d38 <__ieee754_log+0xc8>
20003c94:	f023 447f 	bic.w	r4, r3, #4278190080	; 0xff000000
20003c98:	f645 7c64 	movw	ip, #24420	; 0x5f64
20003c9c:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
20003ca0:	f2c0 0c09 	movt	ip, #9
20003ca4:	44a4      	add	ip, r4
20003ca6:	f240 0200 	movw	r2, #0
20003caa:	f5a6 767e 	sub.w	r6, r6, #1016	; 0x3f8
20003cae:	f40c 1c80 	and.w	ip, ip, #1048576	; 0x100000
20003cb2:	3e07      	subs	r6, #7
20003cb4:	f6c3 72f0 	movt	r2, #16368	; 0x3ff0
20003cb8:	ea8c 0202 	eor.w	r2, ip, r2
20003cbc:	eb06 5623 	add.w	r6, r6, r3, asr #20
20003cc0:	f240 0300 	movw	r3, #0
20003cc4:	4640      	mov	r0, r8
20003cc6:	ea42 0104 	orr.w	r1, r2, r4
20003cca:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
20003cce:	2200      	movs	r2, #0
20003cd0:	eb06 561c 	add.w	r6, r6, ip, lsr #20
20003cd4:	f7fe fd2e 	bl	20002734 <__aeabi_dsub>
20003cd8:	1ca3      	adds	r3, r4, #2
20003cda:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
20003cde:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
20003ce2:	2b02      	cmp	r3, #2
20003ce4:	4680      	mov	r8, r0
20003ce6:	4689      	mov	r9, r1
20003ce8:	dc2f      	bgt.n	20003d4a <__ieee754_log+0xda>
20003cea:	2200      	movs	r2, #0
20003cec:	2300      	movs	r3, #0
20003cee:	f7ff f93d 	bl	20002f6c <__aeabi_dcmpeq>
20003cf2:	2800      	cmp	r0, #0
20003cf4:	f000 80ca 	beq.w	20003e8c <__ieee754_log+0x21c>
20003cf8:	2e00      	cmp	r6, #0
20003cfa:	f040 817c 	bne.w	20003ff6 <__ieee754_log+0x386>
20003cfe:	2000      	movs	r0, #0
20003d00:	2100      	movs	r1, #0
20003d02:	e01f      	b.n	20003d44 <__ieee754_log+0xd4>
20003d04:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
20003d08:	4303      	orrs	r3, r0
20003d0a:	f000 80b5 	beq.w	20003e78 <__ieee754_log+0x208>
20003d0e:	2900      	cmp	r1, #0
20003d10:	f2c0 8146 	blt.w	20003fa0 <__ieee754_log+0x330>
20003d14:	f240 0300 	movw	r3, #0
20003d18:	2200      	movs	r2, #0
20003d1a:	f2c4 3350 	movt	r3, #17232	; 0x4350
20003d1e:	f06f 0635 	mvn.w	r6, #53	; 0x35
20003d22:	f7fe febb 	bl	20002a9c <__aeabi_dmul>
20003d26:	f64f 72ff 	movw	r2, #65535	; 0xffff
20003d2a:	f6c7 72ef 	movt	r2, #32751	; 0x7fef
20003d2e:	460b      	mov	r3, r1
20003d30:	4680      	mov	r8, r0
20003d32:	4293      	cmp	r3, r2
20003d34:	4689      	mov	r9, r1
20003d36:	ddad      	ble.n	20003c94 <__ieee754_log+0x24>
20003d38:	4640      	mov	r0, r8
20003d3a:	4649      	mov	r1, r9
20003d3c:	4642      	mov	r2, r8
20003d3e:	464b      	mov	r3, r9
20003d40:	f7fe fcfa 	bl	20002738 <__adddf3>
20003d44:	b007      	add	sp, #28
20003d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
20003d4a:	2200      	movs	r2, #0
20003d4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
20003d50:	f7fe fcf2 	bl	20002738 <__adddf3>
20003d54:	f64e 3586 	movw	r5, #60294	; 0xeb86
20003d58:	f6cf 75f9 	movt	r5, #65529	; 0xfff9
20003d5c:	1965      	adds	r5, r4, r5
20003d5e:	4602      	mov	r2, r0
20003d60:	460b      	mov	r3, r1
20003d62:	4640      	mov	r0, r8
20003d64:	4649      	mov	r1, r9
20003d66:	f7fe ffc3 	bl	20002cf0 <__aeabi_ddiv>
20003d6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
20003d6e:	4630      	mov	r0, r6
20003d70:	f7fe fe2e 	bl	200029d0 <__aeabi_i2d>
20003d74:	e9cd 0104 	strd	r0, r1, [sp, #16]
20003d78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
20003d7c:	4602      	mov	r2, r0
20003d7e:	460b      	mov	r3, r1
20003d80:	f7fe fe8c 	bl	20002a9c <__aeabi_dmul>
20003d84:	4602      	mov	r2, r0
20003d86:	460b      	mov	r3, r1
20003d88:	e9cd 0100 	strd	r0, r1, [sp]
20003d8c:	f7fe fe86 	bl	20002a9c <__aeabi_dmul>
20003d90:	a3ab      	add	r3, pc, #684	; (adr r3, 20004040 <__ieee754_log+0x3d0>)
20003d92:	e9d3 2300 	ldrd	r2, r3, [r3]
20003d96:	4682      	mov	sl, r0
20003d98:	468b      	mov	fp, r1
20003d9a:	f7fe fe7f 	bl	20002a9c <__aeabi_dmul>
20003d9e:	a3aa      	add	r3, pc, #680	; (adr r3, 20004048 <__ieee754_log+0x3d8>)
20003da0:	e9d3 2300 	ldrd	r2, r3, [r3]
20003da4:	f7fe fcc8 	bl	20002738 <__adddf3>
20003da8:	4652      	mov	r2, sl
20003daa:	465b      	mov	r3, fp
20003dac:	f7fe fe76 	bl	20002a9c <__aeabi_dmul>
20003db0:	a3a7      	add	r3, pc, #668	; (adr r3, 20004050 <__ieee754_log+0x3e0>)
20003db2:	e9d3 2300 	ldrd	r2, r3, [r3]
20003db6:	f7fe fcbf 	bl	20002738 <__adddf3>
20003dba:	4652      	mov	r2, sl
20003dbc:	465b      	mov	r3, fp
20003dbe:	f7fe fe6d 	bl	20002a9c <__aeabi_dmul>
20003dc2:	a3a5      	add	r3, pc, #660	; (adr r3, 20004058 <__ieee754_log+0x3e8>)
20003dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
20003dc8:	f7fe fcb6 	bl	20002738 <__adddf3>
20003dcc:	e9dd 2300 	ldrd	r2, r3, [sp]
20003dd0:	f7fe fe64 	bl	20002a9c <__aeabi_dmul>
20003dd4:	a3a2      	add	r3, pc, #648	; (adr r3, 20004060 <__ieee754_log+0x3f0>)
20003dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
20003dda:	e9cd 0100 	strd	r0, r1, [sp]
20003dde:	4650      	mov	r0, sl
20003de0:	4659      	mov	r1, fp
20003de2:	f7fe fe5b 	bl	20002a9c <__aeabi_dmul>
20003de6:	a3a0      	add	r3, pc, #640	; (adr r3, 20004068 <__ieee754_log+0x3f8>)
20003de8:	e9d3 2300 	ldrd	r2, r3, [r3]
20003dec:	f7fe fca4 	bl	20002738 <__adddf3>
20003df0:	4652      	mov	r2, sl
20003df2:	465b      	mov	r3, fp
20003df4:	f7fe fe52 	bl	20002a9c <__aeabi_dmul>
20003df8:	a39d      	add	r3, pc, #628	; (adr r3, 20004070 <__ieee754_log+0x400>)
20003dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
20003dfe:	f7fe fc9b 	bl	20002738 <__adddf3>
20003e02:	4652      	mov	r2, sl
20003e04:	465b      	mov	r3, fp
20003e06:	f7fe fe49 	bl	20002a9c <__aeabi_dmul>
20003e0a:	460b      	mov	r3, r1
20003e0c:	4602      	mov	r2, r0
20003e0e:	e9dd 0100 	ldrd	r0, r1, [sp]
20003e12:	f7fe fc91 	bl	20002738 <__adddf3>
20003e16:	f64b 0351 	movw	r3, #47185	; 0xb851
20003e1a:	f2c0 0306 	movt	r3, #6
20003e1e:	1b1b      	subs	r3, r3, r4
20003e20:	ea43 0505 	orr.w	r5, r3, r5
20003e24:	2d00      	cmp	r5, #0
20003e26:	4682      	mov	sl, r0
20003e28:	468b      	mov	fp, r1
20003e2a:	dd56      	ble.n	20003eda <__ieee754_log+0x26a>
20003e2c:	f240 0300 	movw	r3, #0
20003e30:	2200      	movs	r2, #0
20003e32:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
20003e36:	4640      	mov	r0, r8
20003e38:	4649      	mov	r1, r9
20003e3a:	f7fe fe2f 	bl	20002a9c <__aeabi_dmul>
20003e3e:	4642      	mov	r2, r8
20003e40:	464b      	mov	r3, r9
20003e42:	f7fe fe2b 	bl	20002a9c <__aeabi_dmul>
20003e46:	4604      	mov	r4, r0
20003e48:	460d      	mov	r5, r1
20003e4a:	2e00      	cmp	r6, #0
20003e4c:	d175      	bne.n	20003f3a <__ieee754_log+0x2ca>
20003e4e:	4652      	mov	r2, sl
20003e50:	465b      	mov	r3, fp
20003e52:	f7fe fc71 	bl	20002738 <__adddf3>
20003e56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
20003e5a:	f7fe fe1f 	bl	20002a9c <__aeabi_dmul>
20003e5e:	4602      	mov	r2, r0
20003e60:	460b      	mov	r3, r1
20003e62:	4620      	mov	r0, r4
20003e64:	4629      	mov	r1, r5
20003e66:	f7fe fc65 	bl	20002734 <__aeabi_dsub>
20003e6a:	4602      	mov	r2, r0
20003e6c:	460b      	mov	r3, r1
20003e6e:	4640      	mov	r0, r8
20003e70:	4649      	mov	r1, r9
20003e72:	f7fe fc5f 	bl	20002734 <__aeabi_dsub>
20003e76:	e765      	b.n	20003d44 <__ieee754_log+0xd4>
20003e78:	f240 0100 	movw	r1, #0
20003e7c:	2000      	movs	r0, #0
20003e7e:	2200      	movs	r2, #0
20003e80:	2300      	movs	r3, #0
20003e82:	f2cc 3150 	movt	r1, #50000	; 0xc350
20003e86:	f7fe ff33 	bl	20002cf0 <__aeabi_ddiv>
20003e8a:	e75b      	b.n	20003d44 <__ieee754_log+0xd4>
20003e8c:	4642      	mov	r2, r8
20003e8e:	464b      	mov	r3, r9
20003e90:	4640      	mov	r0, r8
20003e92:	4649      	mov	r1, r9
20003e94:	f7fe fe02 	bl	20002a9c <__aeabi_dmul>
20003e98:	a377      	add	r3, pc, #476	; (adr r3, 20004078 <__ieee754_log+0x408>)
20003e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
20003e9e:	4604      	mov	r4, r0
20003ea0:	460d      	mov	r5, r1
20003ea2:	4640      	mov	r0, r8
20003ea4:	4649      	mov	r1, r9
20003ea6:	f7fe fdf9 	bl	20002a9c <__aeabi_dmul>
20003eaa:	f240 0300 	movw	r3, #0
20003eae:	2200      	movs	r2, #0
20003eb0:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
20003eb4:	f7fe fc40 	bl	20002738 <__adddf3>
20003eb8:	4602      	mov	r2, r0
20003eba:	460b      	mov	r3, r1
20003ebc:	4620      	mov	r0, r4
20003ebe:	4629      	mov	r1, r5
20003ec0:	f7fe fdec 	bl	20002a9c <__aeabi_dmul>
20003ec4:	4604      	mov	r4, r0
20003ec6:	460d      	mov	r5, r1
20003ec8:	2e00      	cmp	r6, #0
20003eca:	d172      	bne.n	20003fb2 <__ieee754_log+0x342>
20003ecc:	4640      	mov	r0, r8
20003ece:	4649      	mov	r1, r9
20003ed0:	4622      	mov	r2, r4
20003ed2:	462b      	mov	r3, r5
20003ed4:	f7fe fc2e 	bl	20002734 <__aeabi_dsub>
20003ed8:	e734      	b.n	20003d44 <__ieee754_log+0xd4>
20003eda:	2e00      	cmp	r6, #0
20003edc:	f000 80a5 	beq.w	2000402a <__ieee754_log+0x3ba>
20003ee0:	a367      	add	r3, pc, #412	; (adr r3, 20004080 <__ieee754_log+0x410>)
20003ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
20003ee6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
20003eea:	f7fe fdd7 	bl	20002a9c <__aeabi_dmul>
20003eee:	4652      	mov	r2, sl
20003ef0:	465b      	mov	r3, fp
20003ef2:	4606      	mov	r6, r0
20003ef4:	460f      	mov	r7, r1
20003ef6:	4640      	mov	r0, r8
20003ef8:	4649      	mov	r1, r9
20003efa:	f7fe fc1b 	bl	20002734 <__aeabi_dsub>
20003efe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
20003f02:	f7fe fdcb 	bl	20002a9c <__aeabi_dmul>
20003f06:	a360      	add	r3, pc, #384	; (adr r3, 20004088 <__ieee754_log+0x418>)
20003f08:	e9d3 2300 	ldrd	r2, r3, [r3]
20003f0c:	4604      	mov	r4, r0
20003f0e:	460d      	mov	r5, r1
20003f10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
20003f14:	f7fe fdc2 	bl	20002a9c <__aeabi_dmul>
20003f18:	4602      	mov	r2, r0
20003f1a:	460b      	mov	r3, r1
20003f1c:	4620      	mov	r0, r4
20003f1e:	4629      	mov	r1, r5
20003f20:	f7fe fc0a 	bl	20002738 <__adddf3>
20003f24:	4642      	mov	r2, r8
20003f26:	464b      	mov	r3, r9
20003f28:	f7fe fc04 	bl	20002734 <__aeabi_dsub>
20003f2c:	4602      	mov	r2, r0
20003f2e:	460b      	mov	r3, r1
20003f30:	4630      	mov	r0, r6
20003f32:	4639      	mov	r1, r7
20003f34:	f7fe fbfe 	bl	20002734 <__aeabi_dsub>
20003f38:	e704      	b.n	20003d44 <__ieee754_log+0xd4>
20003f3a:	a351      	add	r3, pc, #324	; (adr r3, 20004080 <__ieee754_log+0x410>)
20003f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
20003f40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
20003f44:	f7fe fdaa 	bl	20002a9c <__aeabi_dmul>
20003f48:	4652      	mov	r2, sl
20003f4a:	465b      	mov	r3, fp
20003f4c:	e9cd 0100 	strd	r0, r1, [sp]
20003f50:	4620      	mov	r0, r4
20003f52:	4629      	mov	r1, r5
20003f54:	f7fe fbf0 	bl	20002738 <__adddf3>
20003f58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
20003f5c:	f7fe fd9e 	bl	20002a9c <__aeabi_dmul>
20003f60:	a34b      	add	r3, pc, #300	; (adr r3, 20004090 <__ieee754_log+0x420>)
20003f62:	e9d3 2300 	ldrd	r2, r3, [r3]
20003f66:	4606      	mov	r6, r0
20003f68:	460f      	mov	r7, r1
20003f6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
20003f6e:	f7fe fd95 	bl	20002a9c <__aeabi_dmul>
20003f72:	4602      	mov	r2, r0
20003f74:	460b      	mov	r3, r1
20003f76:	4630      	mov	r0, r6
20003f78:	4639      	mov	r1, r7
20003f7a:	f7fe fbdd 	bl	20002738 <__adddf3>
20003f7e:	4602      	mov	r2, r0
20003f80:	460b      	mov	r3, r1
20003f82:	4620      	mov	r0, r4
20003f84:	4629      	mov	r1, r5
20003f86:	f7fe fbd5 	bl	20002734 <__aeabi_dsub>
20003f8a:	4642      	mov	r2, r8
20003f8c:	464b      	mov	r3, r9
20003f8e:	f7fe fbd1 	bl	20002734 <__aeabi_dsub>
20003f92:	4602      	mov	r2, r0
20003f94:	460b      	mov	r3, r1
20003f96:	e9dd 0100 	ldrd	r0, r1, [sp]
20003f9a:	f7fe fbcb 	bl	20002734 <__aeabi_dsub>
20003f9e:	e6d1      	b.n	20003d44 <__ieee754_log+0xd4>
20003fa0:	4602      	mov	r2, r0
20003fa2:	460b      	mov	r3, r1
20003fa4:	f7fe fbc6 	bl	20002734 <__aeabi_dsub>
20003fa8:	2200      	movs	r2, #0
20003faa:	2300      	movs	r3, #0
20003fac:	f7fe fea0 	bl	20002cf0 <__aeabi_ddiv>
20003fb0:	e6c8      	b.n	20003d44 <__ieee754_log+0xd4>
20003fb2:	4630      	mov	r0, r6
20003fb4:	f7fe fd0c 	bl	200029d0 <__aeabi_i2d>
20003fb8:	a331      	add	r3, pc, #196	; (adr r3, 20004080 <__ieee754_log+0x410>)
20003fba:	e9d3 2300 	ldrd	r2, r3, [r3]
20003fbe:	4606      	mov	r6, r0
20003fc0:	460f      	mov	r7, r1
20003fc2:	f7fe fd6b 	bl	20002a9c <__aeabi_dmul>
20003fc6:	a330      	add	r3, pc, #192	; (adr r3, 20004088 <__ieee754_log+0x418>)
20003fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
20003fcc:	4682      	mov	sl, r0
20003fce:	468b      	mov	fp, r1
20003fd0:	4630      	mov	r0, r6
20003fd2:	4639      	mov	r1, r7
20003fd4:	f7fe fd62 	bl	20002a9c <__aeabi_dmul>
20003fd8:	4622      	mov	r2, r4
20003fda:	462b      	mov	r3, r5
20003fdc:	f7fe fbac 	bl	20002738 <__adddf3>
20003fe0:	4642      	mov	r2, r8
20003fe2:	464b      	mov	r3, r9
20003fe4:	f7fe fba6 	bl	20002734 <__aeabi_dsub>
20003fe8:	4602      	mov	r2, r0
20003fea:	460b      	mov	r3, r1
20003fec:	4650      	mov	r0, sl
20003fee:	4659      	mov	r1, fp
20003ff0:	f7fe fba0 	bl	20002734 <__aeabi_dsub>
20003ff4:	e6a6      	b.n	20003d44 <__ieee754_log+0xd4>
20003ff6:	4630      	mov	r0, r6
20003ff8:	f7fe fcea 	bl	200029d0 <__aeabi_i2d>
20003ffc:	a320      	add	r3, pc, #128	; (adr r3, 20004080 <__ieee754_log+0x410>)
20003ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
20004002:	4606      	mov	r6, r0
20004004:	460f      	mov	r7, r1
20004006:	f7fe fd49 	bl	20002a9c <__aeabi_dmul>
2000400a:	a321      	add	r3, pc, #132	; (adr r3, 20004090 <__ieee754_log+0x420>)
2000400c:	e9d3 2300 	ldrd	r2, r3, [r3]
20004010:	4604      	mov	r4, r0
20004012:	460d      	mov	r5, r1
20004014:	4630      	mov	r0, r6
20004016:	4639      	mov	r1, r7
20004018:	f7fe fd40 	bl	20002a9c <__aeabi_dmul>
2000401c:	4602      	mov	r2, r0
2000401e:	460b      	mov	r3, r1
20004020:	4620      	mov	r0, r4
20004022:	4629      	mov	r1, r5
20004024:	f7fe fb88 	bl	20002738 <__adddf3>
20004028:	e68c      	b.n	20003d44 <__ieee754_log+0xd4>
2000402a:	4602      	mov	r2, r0
2000402c:	460b      	mov	r3, r1
2000402e:	4640      	mov	r0, r8
20004030:	4649      	mov	r1, r9
20004032:	f7fe fb7f 	bl	20002734 <__aeabi_dsub>
20004036:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
2000403a:	f7fe fd2f 	bl	20002a9c <__aeabi_dmul>
2000403e:	e714      	b.n	20003e6a <__ieee754_log+0x1fa>
20004040:	df3e5244 	.word	0xdf3e5244
20004044:	3fc2f112 	.word	0x3fc2f112
20004048:	96cb03de 	.word	0x96cb03de
2000404c:	3fc74664 	.word	0x3fc74664
20004050:	94229359 	.word	0x94229359
20004054:	3fd24924 	.word	0x3fd24924
20004058:	55555593 	.word	0x55555593
2000405c:	3fe55555 	.word	0x3fe55555
20004060:	d078c69f 	.word	0xd078c69f
20004064:	3fc39a09 	.word	0x3fc39a09
20004068:	1d8e78af 	.word	0x1d8e78af
2000406c:	3fcc71c5 	.word	0x3fcc71c5
20004070:	9997fa04 	.word	0x9997fa04
20004074:	3fd99999 	.word	0x3fd99999
20004078:	55555555 	.word	0x55555555
2000407c:	bfd55555 	.word	0xbfd55555
20004080:	fee00000 	.word	0xfee00000
20004084:	3fe62e42 	.word	0x3fe62e42
20004088:	35793c76 	.word	0x35793c76
2000408c:	bdea39ef 	.word	0xbdea39ef
20004090:	35793c76 	.word	0x35793c76
20004094:	3dea39ef 	.word	0x3dea39ef

20004098 <finite>:
20004098:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
2000409c:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
200040a0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
200040a4:	0fc0      	lsrs	r0, r0, #31
200040a6:	4770      	bx	lr

200040a8 <matherr>:
200040a8:	2000      	movs	r0, #0
200040aa:	4770      	bx	lr

200040ac <nan>:
200040ac:	f240 0100 	movw	r1, #0
200040b0:	2000      	movs	r0, #0
200040b2:	f6c7 71f8 	movt	r1, #32760	; 0x7ff8
200040b6:	4770      	bx	lr

200040b8 <C.37.4376>:
200040b8:	1b1a 0000                                   ....

200040bc <g_config_reg_lut>:
200040bc:	3000 4001 3004 4001 3008 4001 300c 4001     .0.@.0.@.0.@.0.@
200040cc:	3010 4001 3014 4001 3018 4001 301c 4001     .0.@.0.@.0.@.0.@
200040dc:	3020 4001 3024 4001 3028 4001 302c 4001      0.@$0.@(0.@,0.@
200040ec:	3030 4001 3034 4001 3038 4001 303c 4001     00.@40.@80.@<0.@
200040fc:	3040 4001 3044 4001 3048 4001 304c 4001     @0.@D0.@H0.@L0.@
2000410c:	3050 4001 3054 4001 3058 4001 305c 4001     P0.@T0.@X0.@\0.@
2000411c:	3060 4001 3064 4001 3068 4001 306c 4001     `0.@d0.@h0.@l0.@
2000412c:	3070 4001 3074 4001 3078 4001 307c 4001     p0.@t0.@x0.@|0.@

2000413c <g_gpio_irqn_lut>:
2000413c:	0020 0021 0022 0023 0024 0025 0026 0027      .!.".#.$.%.&.'.
2000414c:	0028 0029 002a 002b 002c 002d 002e 002f     (.).*.+.,.-.../.
2000415c:	0030 0031 0032 0033 0034 0035 0036 0037     0.1.2.3.4.5.6.7.
2000416c:	0038 0039 003a 003b 003c 003d 003e 003f     8.9.:.;.<.=.>.?.
2000417c:	0043 0000                                   C...

20004180 <__sf_fake_stdin>:
	...

200041a0 <__sf_fake_stdout>:
	...

200041c0 <__sf_fake_stderr>:
	...
200041e0:	7865 0070 6f6c 0067 0000 0000 0000 0000     exp.log.........

200041f0 <ln2HI>:
200041f0:	0000 fee0 2e42 3fe6 0000 fee0 2e42 bfe6     ....B..?....B...

20004200 <ln2LO>:
20004200:	3c76 3579 39ef 3dea 3c76 3579 39ef bdea     v<y5.9.=v<y5.9..

20004210 <halF>:
20004210:	0000 0000 0000 3fe0 0000 0000 0000 bfe0     .......?........

20004220 <_init>:
20004220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20004222:	bf00      	nop
20004224:	bcf8      	pop	{r3, r4, r5, r6, r7}
20004226:	bc08      	pop	{r3}
20004228:	469e      	mov	lr, r3
2000422a:	4770      	bx	lr

2000422c <_fini>:
2000422c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000422e:	bf00      	nop
20004230:	bcf8      	pop	{r3, r4, r5, r6, r7}
20004232:	bc08      	pop	{r3}
20004234:	469e      	mov	lr, r3
20004236:	4770      	bx	lr

20004238 <__frame_dummy_init_array_entry>:
20004238:	0485 2000                                   ... 

2000423c <__do_global_dtors_aux_fini_array_entry>:
2000423c:	0471 2000                                   q.. 
