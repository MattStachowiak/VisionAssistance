#include <stdio.h>
#include <inttypes.h>
#include <assert.h>
#include <math.h>
#include "drivers/mss_uart/mss_uart.h"
#include "drivers/mss_i2c/mss_i2c.h"
#include "drivers/mss_gpio/mss_gpio.h"
#include "gridEYE.h"
#include "LED.h"
#include "sonic_dist.h"
#include "imu_interface.h"

/*
    Authored by:
    Darshin Patel
    Matthew Stachowiak
    Michael Manceor
    Nathan Vollbrecht
*/


#define WAND_IMU_ADDR 		0x28
#define GLASSES_IMU_ADDR 	0x29

#define DISPLAY_FOV 72 // degrees
#define DISPLAY_POINT_WIDTH 2 // num of LEDs to light up at a time
#define NO_LED -1000

enum Mode {STANDARD, SPECTRUM, COMPASS}current_mode;


//--- Global Variables ---
volatile uint32_t* LED = (uint32_t*)LED_ADDR;
uint32_t color;
int LED_num;

volatile uint32_t* SONIC_READ = (uint32_t*) SONIC_ADDR;
uint32_t SONIC_DATA;
float cm_dist;

double IMU_offset;
double IMU_temp_offset;
double display_angle;
int8_t set_heading_baseline = 1;

float temps[8][8];


// Function reverses bits in the byte
uint8_t byte_reverse(uint8_t x)
{
	return  0xFF & (((x & 0b10000000) >> 7) | ((x & 0b01000000) >> 5) | ((x & 0b00100000) >> 3) | ((x & 0b00010000) >> 1) |
		((x & 0b00001000) << 1) | ((x & 0b000000100) << 3) | ((x & 0b000000010) << 5) | ((x & 0b00000001) << 7));
}


// Function scales brightness based on distance
uint32_t scale_brightness(int32_t color, float in_dist){
	uint i;
	uint32_t result = 0;
	double scale_factor;

	for (i = 0; i<3; ++i)
	{
		uint8_t ind_value = byte_reverse((color >> 8*(i)) & 0xFF);
		scale_factor = 2.17 - 0.332*log(in_dist);
		if (scale_factor > 1) scale_factor = 1;
		if (scale_factor < 0) scale_factor = 0;
		result = result | (byte_reverse(ind_value*scale_factor) << 8*(i));
	}
	return result;
}


// Function for testing distance controlling LED number
// Each LED is 2.5 cm of distance
int dist_to_LED(float in_dist){

	return (int)in_dist / 3;
}
// Interrupts for Gyroscope reset functionality (Pin J20)
void GPIO0_IRQHandler (void){

	IMU_offset = IMU_temp_offset;
	MSS_GPIO_clear_irq(MSS_GPIO_0);
}

// Interrupts for Mode cycling (Pin J21)
void GPIO1_IRQHandler (void){

	current_mode += 1;
	current_mode %= 3;
	MSS_GPIO_clear_irq(MSS_GPIO_1);
}


// Write to LEDs with brightness scaled on the distance
void write_scaled_LEDs(){
	// Write to LEDs
	int i;
	for(i = 0; i < NUMLEDS; ++i){
		if (i >= LED_num && i < LED_num + DISPLAY_POINT_WIDTH)
			LED[i] = scale_brightness(color, cm_dist);
		else
			LED[i] = off;
	}
}

// Standard cane style behavior
void standard_execute(){

	if(get_max_temp(temps) > 42.00)
		color = red;
	else if((temps[3][3] > 26.00 || temps[4][4] > 26.00) && (temps[3][3] < 35.00 || temps[4][4] < 35.00))
		color = yellow;
	else
		color = green;

	// IMUs calculate angle at which to display
	set_heading_baseline = 0;
	if (display_angle < -DISPLAY_FOV/2 || display_angle >= DISPLAY_FOV/2){
		LED_num = display_angle < 0 ? NUMLEDS-1 : 0 - (DISPLAY_POINT_WIDTH-1);
		color = red;
	}
	else
		LED_num = (NUMLEDS-1) - (int)(display_angle/(DISPLAY_FOV/NUMLEDS) + NUMLEDS/2);

	cm_dist = data_to_cm(SONIC_DATA);

	write_scaled_LEDs();

}


// Determine color based on temperature
// Spectrum is from blue (0 C) to red (80 C)
void spectrum_execute(){
	float avg_temp = 0;
	avg_temp = (temps[3][3] + temps[3][4] + temps[4][3] + temps[4][4]) / 4.0;



}


void compass_execute(){

}


int main(){

	// Setup
	LED_reset(LED);
	current_mode = STANDARD;
	// Initialize GPIO for interrupts
	MSS_GPIO_init();
	MSS_GPIO_config( MSS_GPIO_0, MSS_GPIO_INPUT_MODE | MSS_GPIO_IRQ_EDGE_POSITIVE );
	MSS_GPIO_config( MSS_GPIO_1, MSS_GPIO_INPUT_MODE | MSS_GPIO_IRQ_EDGE_POSITIVE );
	MSS_GPIO_enable_irq( MSS_GPIO_0 );
	MSS_GPIO_enable_irq( MSS_GPIO_1 );
	// Initialize with a clock frequency of ~ 400kHz
	MSS_I2C_init(&g_mss_i2c1 , 0x0, MSS_I2C_PCLK_DIV_256 );
	gridEYE_init();
	if (init_BNO055(WAND_IMU_ADDR)) assert("IMU init error");
	if (init_BNO055(GLASSES_IMU_ADDR)) assert("IMU init error");
	IMU_offset = 0;


	// Base pixel register is 0x80
	uint8_t pixel_addr[] = {0x80};
	uint8_t pixel_data[128] = {0};


	// Loop variables
	while( 1 ) {
		// Hold off interrupts during I2C communication
		NVIC_DisableIRQ(32);
		NVIC_DisableIRQ(33);

		// Get data from all sensors
		gridEYE_read(pixel_addr, pixel_data);
		display_angle = calc_display_angle(GLASSES_IMU_ADDR, WAND_IMU_ADDR, set_heading_baseline) - IMU_offset;


		NVIC_EnableIRQ(32);
		NVIC_EnableIRQ(33);

		IMU_temp_offset = display_angle + IMU_offset;
		SONIC_DATA = *SONIC_READ;

		get_temps_forward(pixel_data, temps);

		switch(current_mode){
			case STANDARD:
				standard_execute();
				break;
			case SPECTRUM:
				spectrum_execute();
				break;
			case COMPASS:
				compass_execute();
				break;
			default:
				standard_execute();
				break;
		}


		//gridEYE_print(temps);

	}//while(1)
	return 0;
}
